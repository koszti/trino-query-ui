// Generated from trino/SqlBase.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { SqlBaseListener } from "./SqlBaseListener.js";
import { SqlBaseVisitor } from "./SqlBaseVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


export class SqlBaseParser extends antlr.Parser {
    public static readonly T__0 = 1;
    public static readonly T__1 = 2;
    public static readonly T__2 = 3;
    public static readonly T__3 = 4;
    public static readonly T__4 = 5;
    public static readonly T__5 = 6;
    public static readonly T__6 = 7;
    public static readonly T__7 = 8;
    public static readonly T__8 = 9;
    public static readonly T__9 = 10;
    public static readonly T__10 = 11;
    public static readonly T__11 = 12;
    public static readonly T__12 = 13;
    public static readonly T__13 = 14;
    public static readonly T__14 = 15;
    public static readonly T__15 = 16;
    public static readonly T__16 = 17;
    public static readonly ABSENT = 18;
    public static readonly ADD = 19;
    public static readonly ADMIN = 20;
    public static readonly AFTER = 21;
    public static readonly ALL = 22;
    public static readonly ALTER = 23;
    public static readonly ANALYZE = 24;
    public static readonly AND = 25;
    public static readonly ANY = 26;
    public static readonly ARRAY = 27;
    public static readonly AS = 28;
    public static readonly ASC = 29;
    public static readonly AT = 30;
    public static readonly AUTHORIZATION = 31;
    public static readonly BERNOULLI = 32;
    public static readonly BETWEEN = 33;
    public static readonly BOTH = 34;
    public static readonly BY = 35;
    public static readonly CALL = 36;
    public static readonly CASCADE = 37;
    public static readonly CASE = 38;
    public static readonly CAST = 39;
    public static readonly CATALOG = 40;
    public static readonly CATALOGS = 41;
    public static readonly COLUMN = 42;
    public static readonly COLUMNS = 43;
    public static readonly COMMENT = 44;
    public static readonly COMMIT = 45;
    public static readonly COMMITTED = 46;
    public static readonly CONDITIONAL = 47;
    public static readonly CONSTRAINT = 48;
    public static readonly COUNT = 49;
    public static readonly COPARTITION = 50;
    public static readonly CREATE = 51;
    public static readonly CROSS = 52;
    public static readonly CUBE = 53;
    public static readonly CURRENT = 54;
    public static readonly CURRENT_CATALOG = 55;
    public static readonly CURRENT_DATE = 56;
    public static readonly CURRENT_PATH = 57;
    public static readonly CURRENT_ROLE = 58;
    public static readonly CURRENT_SCHEMA = 59;
    public static readonly CURRENT_TIME = 60;
    public static readonly CURRENT_TIMESTAMP = 61;
    public static readonly CURRENT_USER = 62;
    public static readonly DATA = 63;
    public static readonly DATE = 64;
    public static readonly DAY = 65;
    public static readonly DEALLOCATE = 66;
    public static readonly DEFAULT = 67;
    public static readonly DEFINE = 68;
    public static readonly DEFINER = 69;
    public static readonly DELETE = 70;
    public static readonly DENY = 71;
    public static readonly DESC = 72;
    public static readonly DESCRIBE = 73;
    public static readonly DESCRIPTOR = 74;
    public static readonly DISTINCT = 75;
    public static readonly DISTRIBUTED = 76;
    public static readonly DOUBLE = 77;
    public static readonly DROP = 78;
    public static readonly ELSE = 79;
    public static readonly EMPTY = 80;
    public static readonly ENCODING = 81;
    public static readonly END = 82;
    public static readonly ERROR = 83;
    public static readonly ESCAPE = 84;
    public static readonly EXCEPT = 85;
    public static readonly EXCLUDING = 86;
    public static readonly EXECUTE = 87;
    public static readonly EXISTS = 88;
    public static readonly EXPLAIN = 89;
    public static readonly EXTRACT = 90;
    public static readonly FALSE = 91;
    public static readonly FETCH = 92;
    public static readonly FILTER = 93;
    public static readonly FINAL = 94;
    public static readonly FIRST = 95;
    public static readonly FOLLOWING = 96;
    public static readonly FOR = 97;
    public static readonly FORMAT = 98;
    public static readonly FROM = 99;
    public static readonly FULL = 100;
    public static readonly FUNCTIONS = 101;
    public static readonly GRACE = 102;
    public static readonly GRANT = 103;
    public static readonly GRANTED = 104;
    public static readonly GRANTS = 105;
    public static readonly GRAPHVIZ = 106;
    public static readonly GROUP = 107;
    public static readonly GROUPING = 108;
    public static readonly GROUPS = 109;
    public static readonly HAVING = 110;
    public static readonly HOUR = 111;
    public static readonly IF = 112;
    public static readonly IGNORE = 113;
    public static readonly IMMEDIATE = 114;
    public static readonly IN = 115;
    public static readonly INCLUDING = 116;
    public static readonly INITIAL = 117;
    public static readonly INNER = 118;
    public static readonly INPUT = 119;
    public static readonly INSERT = 120;
    public static readonly INTERSECT = 121;
    public static readonly INTERVAL = 122;
    public static readonly INTO = 123;
    public static readonly INVOKER = 124;
    public static readonly IO = 125;
    public static readonly IS = 126;
    public static readonly ISOLATION = 127;
    public static readonly JOIN = 128;
    public static readonly JSON = 129;
    public static readonly JSON_ARRAY = 130;
    public static readonly JSON_EXISTS = 131;
    public static readonly JSON_OBJECT = 132;
    public static readonly JSON_QUERY = 133;
    public static readonly JSON_TABLE = 134;
    public static readonly JSON_VALUE = 135;
    public static readonly KEEP = 136;
    public static readonly KEY = 137;
    public static readonly KEYS = 138;
    public static readonly LAST = 139;
    public static readonly LATERAL = 140;
    public static readonly LEADING = 141;
    public static readonly LEFT = 142;
    public static readonly LEVEL = 143;
    public static readonly LIKE = 144;
    public static readonly LIMIT = 145;
    public static readonly LISTAGG = 146;
    public static readonly LOCAL = 147;
    public static readonly LOCALTIME = 148;
    public static readonly LOCALTIMESTAMP = 149;
    public static readonly LOGICAL = 150;
    public static readonly MAP = 151;
    public static readonly MATCH = 152;
    public static readonly MATCHED = 153;
    public static readonly MATCHES = 154;
    public static readonly MATCH_RECOGNIZE = 155;
    public static readonly MATERIALIZED = 156;
    public static readonly MEASURES = 157;
    public static readonly MERGE = 158;
    public static readonly MINUTE = 159;
    public static readonly MONTH = 160;
    public static readonly NATURAL = 161;
    public static readonly NESTED = 162;
    public static readonly NEXT = 163;
    public static readonly NFC = 164;
    public static readonly NFD = 165;
    public static readonly NFKC = 166;
    public static readonly NFKD = 167;
    public static readonly NO = 168;
    public static readonly NONE = 169;
    public static readonly NORMALIZE = 170;
    public static readonly NOT = 171;
    public static readonly NULL = 172;
    public static readonly NULLIF = 173;
    public static readonly NULLS = 174;
    public static readonly OBJECT = 175;
    public static readonly OF = 176;
    public static readonly OFFSET = 177;
    public static readonly OMIT = 178;
    public static readonly ON = 179;
    public static readonly ONE = 180;
    public static readonly ONLY = 181;
    public static readonly OPTION = 182;
    public static readonly OR = 183;
    public static readonly ORDER = 184;
    public static readonly ORDINALITY = 185;
    public static readonly OUTER = 186;
    public static readonly OUTPUT = 187;
    public static readonly OVER = 188;
    public static readonly OVERFLOW = 189;
    public static readonly PARTITION = 190;
    public static readonly PARTITIONS = 191;
    public static readonly PASSING = 192;
    public static readonly PAST = 193;
    public static readonly PATH = 194;
    public static readonly PATTERN = 195;
    public static readonly PER = 196;
    public static readonly PERIOD = 197;
    public static readonly PERMUTE = 198;
    public static readonly PLAN = 199;
    public static readonly POSITION = 200;
    public static readonly PRECEDING = 201;
    public static readonly PRECISION = 202;
    public static readonly PREPARE = 203;
    public static readonly PRIVILEGES = 204;
    public static readonly PROPERTIES = 205;
    public static readonly PRUNE = 206;
    public static readonly QUOTES = 207;
    public static readonly RANGE = 208;
    public static readonly READ = 209;
    public static readonly RECURSIVE = 210;
    public static readonly REFRESH = 211;
    public static readonly RENAME = 212;
    public static readonly REPEATABLE = 213;
    public static readonly REPLACE = 214;
    public static readonly RESET = 215;
    public static readonly RESPECT = 216;
    public static readonly RESTRICT = 217;
    public static readonly RETURNING = 218;
    public static readonly REVOKE = 219;
    public static readonly RIGHT = 220;
    public static readonly ROLE = 221;
    public static readonly ROLES = 222;
    public static readonly ROLLBACK = 223;
    public static readonly ROLLUP = 224;
    public static readonly ROW = 225;
    public static readonly ROWS = 226;
    public static readonly RUNNING = 227;
    public static readonly SCALAR = 228;
    public static readonly SCHEMA = 229;
    public static readonly SCHEMAS = 230;
    public static readonly SECOND = 231;
    public static readonly SECURITY = 232;
    public static readonly SEEK = 233;
    public static readonly SELECT = 234;
    public static readonly SERIALIZABLE = 235;
    public static readonly SESSION = 236;
    public static readonly SET = 237;
    public static readonly SETS = 238;
    public static readonly SHOW = 239;
    public static readonly SOME = 240;
    public static readonly START = 241;
    public static readonly STATS = 242;
    public static readonly SUBSET = 243;
    public static readonly SUBSTRING = 244;
    public static readonly SYSTEM = 245;
    public static readonly TABLE = 246;
    public static readonly TABLES = 247;
    public static readonly TABLESAMPLE = 248;
    public static readonly TEXT = 249;
    public static readonly TEXT_STRING = 250;
    public static readonly THEN = 251;
    public static readonly TIES = 252;
    public static readonly TIME = 253;
    public static readonly TIMESTAMP = 254;
    public static readonly TO = 255;
    public static readonly TRAILING = 256;
    public static readonly TRANSACTION = 257;
    public static readonly TRIM = 258;
    public static readonly TRUE = 259;
    public static readonly TRUNCATE = 260;
    public static readonly TRY_CAST = 261;
    public static readonly TYPE = 262;
    public static readonly UESCAPE = 263;
    public static readonly UNBOUNDED = 264;
    public static readonly UNCOMMITTED = 265;
    public static readonly UNCONDITIONAL = 266;
    public static readonly UNION = 267;
    public static readonly UNIQUE = 268;
    public static readonly UNKNOWN = 269;
    public static readonly UNMATCHED = 270;
    public static readonly UNNEST = 271;
    public static readonly UPDATE = 272;
    public static readonly USE = 273;
    public static readonly USER = 274;
    public static readonly USING = 275;
    public static readonly UTF16 = 276;
    public static readonly UTF32 = 277;
    public static readonly UTF8 = 278;
    public static readonly VALIDATE = 279;
    public static readonly VALUE = 280;
    public static readonly VALUES = 281;
    public static readonly VERBOSE = 282;
    public static readonly VERSION = 283;
    public static readonly VIEW = 284;
    public static readonly WHEN = 285;
    public static readonly WHERE = 286;
    public static readonly WINDOW = 287;
    public static readonly WITH = 288;
    public static readonly WITHIN = 289;
    public static readonly WITHOUT = 290;
    public static readonly WORK = 291;
    public static readonly WRAPPER = 292;
    public static readonly WRITE = 293;
    public static readonly YEAR = 294;
    public static readonly ZONE = 295;
    public static readonly EQ = 296;
    public static readonly NEQ = 297;
    public static readonly LT = 298;
    public static readonly LTE = 299;
    public static readonly GT = 300;
    public static readonly GTE = 301;
    public static readonly PLUS = 302;
    public static readonly MINUS = 303;
    public static readonly ASTERISK = 304;
    public static readonly SLASH = 305;
    public static readonly PERCENT = 306;
    public static readonly CONCAT = 307;
    public static readonly QUESTION_MARK = 308;
    public static readonly STRING = 309;
    public static readonly UNICODE_STRING = 310;
    public static readonly BINARY_LITERAL = 311;
    public static readonly INTEGER_VALUE = 312;
    public static readonly DECIMAL_VALUE = 313;
    public static readonly DOUBLE_VALUE = 314;
    public static readonly IDENTIFIER = 315;
    public static readonly DIGIT_IDENTIFIER = 316;
    public static readonly QUOTED_IDENTIFIER = 317;
    public static readonly BACKQUOTED_IDENTIFIER = 318;
    public static readonly SIMPLE_COMMENT = 319;
    public static readonly BRACKETED_COMMENT = 320;
    public static readonly WS = 321;
    public static readonly UNRECOGNIZED = 322;
    public static readonly DELIMITER = 323;
    public static readonly RULE_singleStatement = 0;
    public static readonly RULE_standaloneExpression = 1;
    public static readonly RULE_standalonePathSpecification = 2;
    public static readonly RULE_standaloneType = 3;
    public static readonly RULE_standaloneRowPattern = 4;
    public static readonly RULE_statement = 5;
    public static readonly RULE_query = 6;
    public static readonly RULE_with = 7;
    public static readonly RULE_tableElement = 8;
    public static readonly RULE_columnDefinition = 9;
    public static readonly RULE_likeClause = 10;
    public static readonly RULE_properties = 11;
    public static readonly RULE_propertyAssignments = 12;
    public static readonly RULE_property = 13;
    public static readonly RULE_propertyValue = 14;
    public static readonly RULE_queryNoWith = 15;
    public static readonly RULE_limitRowCount = 16;
    public static readonly RULE_rowCount = 17;
    public static readonly RULE_queryTerm = 18;
    public static readonly RULE_queryPrimary = 19;
    public static readonly RULE_sortItem = 20;
    public static readonly RULE_querySpecification = 21;
    public static readonly RULE_groupBy = 22;
    public static readonly RULE_groupingElement = 23;
    public static readonly RULE_groupingSet = 24;
    public static readonly RULE_windowDefinition = 25;
    public static readonly RULE_windowSpecification = 26;
    public static readonly RULE_namedQuery = 27;
    public static readonly RULE_setQuantifier = 28;
    public static readonly RULE_selectItem = 29;
    public static readonly RULE_relation = 30;
    public static readonly RULE_joinType = 31;
    public static readonly RULE_joinCriteria = 32;
    public static readonly RULE_sampledRelation = 33;
    public static readonly RULE_sampleType = 34;
    public static readonly RULE_trimsSpecification = 35;
    public static readonly RULE_listAggOverflowBehavior = 36;
    public static readonly RULE_listaggCountIndication = 37;
    public static readonly RULE_patternRecognition = 38;
    public static readonly RULE_measureDefinition = 39;
    public static readonly RULE_rowsPerMatch = 40;
    public static readonly RULE_emptyMatchHandling = 41;
    public static readonly RULE_skipTo = 42;
    public static readonly RULE_subsetDefinition = 43;
    public static readonly RULE_variableDefinition = 44;
    public static readonly RULE_aliasedRelation = 45;
    public static readonly RULE_columnAliases = 46;
    public static readonly RULE_relationPrimary = 47;
    public static readonly RULE_jsonTableColumn = 48;
    public static readonly RULE_jsonTableSpecificPlan = 49;
    public static readonly RULE_jsonTablePathName = 50;
    public static readonly RULE_planPrimary = 51;
    public static readonly RULE_jsonTableDefaultPlan = 52;
    public static readonly RULE_tableFunctionCall = 53;
    public static readonly RULE_tableFunctionArgument = 54;
    public static readonly RULE_tableArgument = 55;
    public static readonly RULE_tableArgumentRelation = 56;
    public static readonly RULE_descriptorArgument = 57;
    public static readonly RULE_descriptorField = 58;
    public static readonly RULE_copartitionTables = 59;
    public static readonly RULE_expression = 60;
    public static readonly RULE_booleanExpression = 61;
    public static readonly RULE_predicate = 62;
    public static readonly RULE_valueExpression = 63;
    public static readonly RULE_primaryExpression = 64;
    public static readonly RULE_jsonPathInvocation = 65;
    public static readonly RULE_jsonValueExpression = 66;
    public static readonly RULE_jsonRepresentation = 67;
    public static readonly RULE_jsonArgument = 68;
    public static readonly RULE_jsonExistsErrorBehavior = 69;
    public static readonly RULE_jsonValueBehavior = 70;
    public static readonly RULE_jsonQueryWrapperBehavior = 71;
    public static readonly RULE_jsonQueryBehavior = 72;
    public static readonly RULE_jsonObjectMember = 73;
    public static readonly RULE_processingMode = 74;
    public static readonly RULE_nullTreatment = 75;
    public static readonly RULE_string = 76;
    public static readonly RULE_timeZoneSpecifier = 77;
    public static readonly RULE_comparisonOperator = 78;
    public static readonly RULE_comparisonQuantifier = 79;
    public static readonly RULE_booleanValue = 80;
    public static readonly RULE_interval = 81;
    public static readonly RULE_intervalField = 82;
    public static readonly RULE_normalForm = 83;
    public static readonly RULE_type = 84;
    public static readonly RULE_rowField = 85;
    public static readonly RULE_typeParameter = 86;
    public static readonly RULE_whenClause = 87;
    public static readonly RULE_filter = 88;
    public static readonly RULE_mergeCase = 89;
    public static readonly RULE_over = 90;
    public static readonly RULE_windowFrame = 91;
    public static readonly RULE_frameExtent = 92;
    public static readonly RULE_frameBound = 93;
    public static readonly RULE_rowPattern = 94;
    public static readonly RULE_patternPrimary = 95;
    public static readonly RULE_patternQuantifier = 96;
    public static readonly RULE_updateAssignment = 97;
    public static readonly RULE_explainOption = 98;
    public static readonly RULE_transactionMode = 99;
    public static readonly RULE_levelOfIsolation = 100;
    public static readonly RULE_callArgument = 101;
    public static readonly RULE_pathElement = 102;
    public static readonly RULE_pathSpecification = 103;
    public static readonly RULE_privilege = 104;
    public static readonly RULE_qualifiedName = 105;
    public static readonly RULE_queryPeriod = 106;
    public static readonly RULE_rangeType = 107;
    public static readonly RULE_grantor = 108;
    public static readonly RULE_principal = 109;
    public static readonly RULE_roles = 110;
    public static readonly RULE_identifier = 111;
    public static readonly RULE_number = 112;
    public static readonly RULE_authorizationUser = 113;
    public static readonly RULE_nonReserved = 114;

    public static readonly literalNames = [
        null, "'.'", "'('", "')'", "','", "'SKIP'", "'=>'", "'->'", "'['", 
        "']'", "':'", "'|'", "'^'", "'$'", "'{-'", "'-}'", "'{'", "'}'", 
        "'ABSENT'", "'ADD'", "'ADMIN'", "'AFTER'", "'ALL'", "'ALTER'", "'ANALYZE'", 
        "'AND'", "'ANY'", "'ARRAY'", "'AS'", "'ASC'", "'AT'", "'AUTHORIZATION'", 
        "'BERNOULLI'", "'BETWEEN'", "'BOTH'", "'BY'", "'CALL'", "'CASCADE'", 
        "'CASE'", "'CAST'", "'CATALOG'", "'CATALOGS'", "'COLUMN'", "'COLUMNS'", 
        "'COMMENT'", "'COMMIT'", "'COMMITTED'", "'CONDITIONAL'", "'CONSTRAINT'", 
        "'COUNT'", "'COPARTITION'", "'CREATE'", "'CROSS'", "'CUBE'", "'CURRENT'", 
        "'CURRENT_CATALOG'", "'CURRENT_DATE'", "'CURRENT_PATH'", "'CURRENT_ROLE'", 
        "'CURRENT_SCHEMA'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
        "'DATA'", "'DATE'", "'DAY'", "'DEALLOCATE'", "'DEFAULT'", "'DEFINE'", 
        "'DEFINER'", "'DELETE'", "'DENY'", "'DESC'", "'DESCRIBE'", "'DESCRIPTOR'", 
        "'DISTINCT'", "'DISTRIBUTED'", "'DOUBLE'", "'DROP'", "'ELSE'", "'EMPTY'", 
        "'ENCODING'", "'END'", "'ERROR'", "'ESCAPE'", "'EXCEPT'", "'EXCLUDING'", 
        "'EXECUTE'", "'EXISTS'", "'EXPLAIN'", "'EXTRACT'", "'FALSE'", "'FETCH'", 
        "'FILTER'", "'FINAL'", "'FIRST'", "'FOLLOWING'", "'FOR'", "'FORMAT'", 
        "'FROM'", "'FULL'", "'FUNCTIONS'", "'GRACE'", "'GRANT'", "'GRANTED'", 
        "'GRANTS'", "'GRAPHVIZ'", "'GROUP'", "'GROUPING'", "'GROUPS'", "'HAVING'", 
        "'HOUR'", "'IF'", "'IGNORE'", "'IMMEDIATE'", "'IN'", "'INCLUDING'", 
        "'INITIAL'", "'INNER'", "'INPUT'", "'INSERT'", "'INTERSECT'", "'INTERVAL'", 
        "'INTO'", "'INVOKER'", "'IO'", "'IS'", "'ISOLATION'", "'JOIN'", 
        "'JSON'", "'JSON_ARRAY'", "'JSON_EXISTS'", "'JSON_OBJECT'", "'JSON_QUERY'", 
        "'JSON_TABLE'", "'JSON_VALUE'", "'KEEP'", "'KEY'", "'KEYS'", "'LAST'", 
        "'LATERAL'", "'LEADING'", "'LEFT'", "'LEVEL'", "'LIKE'", "'LIMIT'", 
        "'LISTAGG'", "'LOCAL'", "'LOCALTIME'", "'LOCALTIMESTAMP'", "'LOGICAL'", 
        "'MAP'", "'MATCH'", "'MATCHED'", "'MATCHES'", "'MATCH_RECOGNIZE'", 
        "'MATERIALIZED'", "'MEASURES'", "'MERGE'", "'MINUTE'", "'MONTH'", 
        "'NATURAL'", "'NESTED'", "'NEXT'", "'NFC'", "'NFD'", "'NFKC'", "'NFKD'", 
        "'NO'", "'NONE'", "'NORMALIZE'", "'NOT'", "'NULL'", "'NULLIF'", 
        "'NULLS'", "'OBJECT'", "'OF'", "'OFFSET'", "'OMIT'", "'ON'", "'ONE'", 
        "'ONLY'", "'OPTION'", "'OR'", "'ORDER'", "'ORDINALITY'", "'OUTER'", 
        "'OUTPUT'", "'OVER'", "'OVERFLOW'", "'PARTITION'", "'PARTITIONS'", 
        "'PASSING'", "'PAST'", "'PATH'", "'PATTERN'", "'PER'", "'PERIOD'", 
        "'PERMUTE'", "'PLAN'", "'POSITION'", "'PRECEDING'", "'PRECISION'", 
        "'PREPARE'", "'PRIVILEGES'", "'PROPERTIES'", "'PRUNE'", "'QUOTES'", 
        "'RANGE'", "'READ'", "'RECURSIVE'", "'REFRESH'", "'RENAME'", "'REPEATABLE'", 
        "'REPLACE'", "'RESET'", "'RESPECT'", "'RESTRICT'", "'RETURNING'", 
        "'REVOKE'", "'RIGHT'", "'ROLE'", "'ROLES'", "'ROLLBACK'", "'ROLLUP'", 
        "'ROW'", "'ROWS'", "'RUNNING'", "'SCALAR'", "'SCHEMA'", "'SCHEMAS'", 
        "'SECOND'", "'SECURITY'", "'SEEK'", "'SELECT'", "'SERIALIZABLE'", 
        "'SESSION'", "'SET'", "'SETS'", "'SHOW'", "'SOME'", "'START'", "'STATS'", 
        "'SUBSET'", "'SUBSTRING'", "'SYSTEM'", "'TABLE'", "'TABLES'", "'TABLESAMPLE'", 
        "'TEXT'", "'STRING'", "'THEN'", "'TIES'", "'TIME'", "'TIMESTAMP'", 
        "'TO'", "'TRAILING'", "'TRANSACTION'", "'TRIM'", "'TRUE'", "'TRUNCATE'", 
        "'TRY_CAST'", "'TYPE'", "'UESCAPE'", "'UNBOUNDED'", "'UNCOMMITTED'", 
        "'UNCONDITIONAL'", "'UNION'", "'UNIQUE'", "'UNKNOWN'", "'UNMATCHED'", 
        "'UNNEST'", "'UPDATE'", "'USE'", "'USER'", "'USING'", "'UTF16'", 
        "'UTF32'", "'UTF8'", "'VALIDATE'", "'VALUE'", "'VALUES'", "'VERBOSE'", 
        "'VERSION'", "'VIEW'", "'WHEN'", "'WHERE'", "'WINDOW'", "'WITH'", 
        "'WITHIN'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'WRITE'", "'YEAR'", 
        "'ZONE'", "'='", null, "'<'", "'<='", "'>'", "'>='", "'+'", "'-'", 
        "'*'", "'/'", "'%'", "'||'", "'?'"
    ];

    public static readonly symbolicNames = [
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, "ABSENT", "ADD", "ADMIN", 
        "AFTER", "ALL", "ALTER", "ANALYZE", "AND", "ANY", "ARRAY", "AS", 
        "ASC", "AT", "AUTHORIZATION", "BERNOULLI", "BETWEEN", "BOTH", "BY", 
        "CALL", "CASCADE", "CASE", "CAST", "CATALOG", "CATALOGS", "COLUMN", 
        "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", "CONDITIONAL", "CONSTRAINT", 
        "COUNT", "COPARTITION", "CREATE", "CROSS", "CUBE", "CURRENT", "CURRENT_CATALOG", 
        "CURRENT_DATE", "CURRENT_PATH", "CURRENT_ROLE", "CURRENT_SCHEMA", 
        "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "DATA", "DATE", 
        "DAY", "DEALLOCATE", "DEFAULT", "DEFINE", "DEFINER", "DELETE", "DENY", 
        "DESC", "DESCRIBE", "DESCRIPTOR", "DISTINCT", "DISTRIBUTED", "DOUBLE", 
        "DROP", "ELSE", "EMPTY", "ENCODING", "END", "ERROR", "ESCAPE", "EXCEPT", 
        "EXCLUDING", "EXECUTE", "EXISTS", "EXPLAIN", "EXTRACT", "FALSE", 
        "FETCH", "FILTER", "FINAL", "FIRST", "FOLLOWING", "FOR", "FORMAT", 
        "FROM", "FULL", "FUNCTIONS", "GRACE", "GRANT", "GRANTED", "GRANTS", 
        "GRAPHVIZ", "GROUP", "GROUPING", "GROUPS", "HAVING", "HOUR", "IF", 
        "IGNORE", "IMMEDIATE", "IN", "INCLUDING", "INITIAL", "INNER", "INPUT", 
        "INSERT", "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IO", "IS", 
        "ISOLATION", "JOIN", "JSON", "JSON_ARRAY", "JSON_EXISTS", "JSON_OBJECT", 
        "JSON_QUERY", "JSON_TABLE", "JSON_VALUE", "KEEP", "KEY", "KEYS", 
        "LAST", "LATERAL", "LEADING", "LEFT", "LEVEL", "LIKE", "LIMIT", 
        "LISTAGG", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOGICAL", "MAP", 
        "MATCH", "MATCHED", "MATCHES", "MATCH_RECOGNIZE", "MATERIALIZED", 
        "MEASURES", "MERGE", "MINUTE", "MONTH", "NATURAL", "NESTED", "NEXT", 
        "NFC", "NFD", "NFKC", "NFKD", "NO", "NONE", "NORMALIZE", "NOT", 
        "NULL", "NULLIF", "NULLS", "OBJECT", "OF", "OFFSET", "OMIT", "ON", 
        "ONE", "ONLY", "OPTION", "OR", "ORDER", "ORDINALITY", "OUTER", "OUTPUT", 
        "OVER", "OVERFLOW", "PARTITION", "PARTITIONS", "PASSING", "PAST", 
        "PATH", "PATTERN", "PER", "PERIOD", "PERMUTE", "PLAN", "POSITION", 
        "PRECEDING", "PRECISION", "PREPARE", "PRIVILEGES", "PROPERTIES", 
        "PRUNE", "QUOTES", "RANGE", "READ", "RECURSIVE", "REFRESH", "RENAME", 
        "REPEATABLE", "REPLACE", "RESET", "RESPECT", "RESTRICT", "RETURNING", 
        "REVOKE", "RIGHT", "ROLE", "ROLES", "ROLLBACK", "ROLLUP", "ROW", 
        "ROWS", "RUNNING", "SCALAR", "SCHEMA", "SCHEMAS", "SECOND", "SECURITY", 
        "SEEK", "SELECT", "SERIALIZABLE", "SESSION", "SET", "SETS", "SHOW", 
        "SOME", "START", "STATS", "SUBSET", "SUBSTRING", "SYSTEM", "TABLE", 
        "TABLES", "TABLESAMPLE", "TEXT", "TEXT_STRING", "THEN", "TIES", 
        "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION", "TRIM", "TRUE", 
        "TRUNCATE", "TRY_CAST", "TYPE", "UESCAPE", "UNBOUNDED", "UNCOMMITTED", 
        "UNCONDITIONAL", "UNION", "UNIQUE", "UNKNOWN", "UNMATCHED", "UNNEST", 
        "UPDATE", "USE", "USER", "USING", "UTF16", "UTF32", "UTF8", "VALIDATE", 
        "VALUE", "VALUES", "VERBOSE", "VERSION", "VIEW", "WHEN", "WHERE", 
        "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER", "WRITE", 
        "YEAR", "ZONE", "EQ", "NEQ", "LT", "LTE", "GT", "GTE", "PLUS", "MINUS", 
        "ASTERISK", "SLASH", "PERCENT", "CONCAT", "QUESTION_MARK", "STRING", 
        "UNICODE_STRING", "BINARY_LITERAL", "INTEGER_VALUE", "DECIMAL_VALUE", 
        "DOUBLE_VALUE", "IDENTIFIER", "DIGIT_IDENTIFIER", "QUOTED_IDENTIFIER", 
        "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", "BRACKETED_COMMENT", 
        "WS", "UNRECOGNIZED", "DELIMITER"
    ];
    public static readonly ruleNames = [
        "singleStatement", "standaloneExpression", "standalonePathSpecification", 
        "standaloneType", "standaloneRowPattern", "statement", "query", 
        "with", "tableElement", "columnDefinition", "likeClause", "properties", 
        "propertyAssignments", "property", "propertyValue", "queryNoWith", 
        "limitRowCount", "rowCount", "queryTerm", "queryPrimary", "sortItem", 
        "querySpecification", "groupBy", "groupingElement", "groupingSet", 
        "windowDefinition", "windowSpecification", "namedQuery", "setQuantifier", 
        "selectItem", "relation", "joinType", "joinCriteria", "sampledRelation", 
        "sampleType", "trimsSpecification", "listAggOverflowBehavior", "listaggCountIndication", 
        "patternRecognition", "measureDefinition", "rowsPerMatch", "emptyMatchHandling", 
        "skipTo", "subsetDefinition", "variableDefinition", "aliasedRelation", 
        "columnAliases", "relationPrimary", "jsonTableColumn", "jsonTableSpecificPlan", 
        "jsonTablePathName", "planPrimary", "jsonTableDefaultPlan", "tableFunctionCall", 
        "tableFunctionArgument", "tableArgument", "tableArgumentRelation", 
        "descriptorArgument", "descriptorField", "copartitionTables", "expression", 
        "booleanExpression", "predicate", "valueExpression", "primaryExpression", 
        "jsonPathInvocation", "jsonValueExpression", "jsonRepresentation", 
        "jsonArgument", "jsonExistsErrorBehavior", "jsonValueBehavior", 
        "jsonQueryWrapperBehavior", "jsonQueryBehavior", "jsonObjectMember", 
        "processingMode", "nullTreatment", "string", "timeZoneSpecifier", 
        "comparisonOperator", "comparisonQuantifier", "booleanValue", "interval", 
        "intervalField", "normalForm", "type", "rowField", "typeParameter", 
        "whenClause", "filter", "mergeCase", "over", "windowFrame", "frameExtent", 
        "frameBound", "rowPattern", "patternPrimary", "patternQuantifier", 
        "updateAssignment", "explainOption", "transactionMode", "levelOfIsolation", 
        "callArgument", "pathElement", "pathSpecification", "privilege", 
        "qualifiedName", "queryPeriod", "rangeType", "grantor", "principal", 
        "roles", "identifier", "number", "authorizationUser", "nonReserved",
    ];

    public get grammarFileName(): string { return "SqlBase.g4"; }
    public get literalNames(): (string | null)[] { return SqlBaseParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return SqlBaseParser.symbolicNames; }
    public get ruleNames(): string[] { return SqlBaseParser.ruleNames; }
    public get serializedATN(): number[] { return SqlBaseParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, SqlBaseParser._ATN, SqlBaseParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public singleStatement(): SingleStatementContext {
        let localContext = new SingleStatementContext(this.context, this.state);
        this.enterRule(localContext, 0, SqlBaseParser.RULE_singleStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 230;
            this.statement();
            this.state = 231;
            this.match(SqlBaseParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public standaloneExpression(): StandaloneExpressionContext {
        let localContext = new StandaloneExpressionContext(this.context, this.state);
        this.enterRule(localContext, 2, SqlBaseParser.RULE_standaloneExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 233;
            this.expression();
            this.state = 234;
            this.match(SqlBaseParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public standalonePathSpecification(): StandalonePathSpecificationContext {
        let localContext = new StandalonePathSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 4, SqlBaseParser.RULE_standalonePathSpecification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 236;
            this.pathSpecification();
            this.state = 237;
            this.match(SqlBaseParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public standaloneType(): StandaloneTypeContext {
        let localContext = new StandaloneTypeContext(this.context, this.state);
        this.enterRule(localContext, 6, SqlBaseParser.RULE_standaloneType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 239;
            this.type_(0);
            this.state = 240;
            this.match(SqlBaseParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public standaloneRowPattern(): StandaloneRowPatternContext {
        let localContext = new StandaloneRowPatternContext(this.context, this.state);
        this.enterRule(localContext, 8, SqlBaseParser.RULE_standaloneRowPattern);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 242;
            this.rowPattern(0);
            this.state = 243;
            this.match(SqlBaseParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statement(): StatementContext {
        let localContext = new StatementContext(this.context, this.state);
        this.enterRule(localContext, 10, SqlBaseParser.RULE_statement);
        let _la: number;
        try {
            this.state = 1099;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 117, this.context) ) {
            case 1:
                localContext = new StatementDefaultContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 245;
                this.query();
                }
                break;
            case 2:
                localContext = new UseContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 246;
                this.match(SqlBaseParser.USE);
                this.state = 247;
                (localContext as UseContext)._schema = this.identifier();
                }
                break;
            case 3:
                localContext = new UseContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 248;
                this.match(SqlBaseParser.USE);
                this.state = 249;
                (localContext as UseContext)._catalog = this.identifier();
                this.state = 250;
                this.match(SqlBaseParser.T__0);
                this.state = 251;
                (localContext as UseContext)._schema = this.identifier();
                }
                break;
            case 4:
                localContext = new CreateCatalogContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 253;
                this.match(SqlBaseParser.CREATE);
                this.state = 254;
                this.match(SqlBaseParser.CATALOG);
                this.state = 258;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 0, this.context) ) {
                case 1:
                    {
                    this.state = 255;
                    this.match(SqlBaseParser.IF);
                    this.state = 256;
                    this.match(SqlBaseParser.NOT);
                    this.state = 257;
                    this.match(SqlBaseParser.EXISTS);
                    }
                    break;
                }
                this.state = 260;
                (localContext as CreateCatalogContext)._catalog = this.identifier();
                this.state = 261;
                this.match(SqlBaseParser.USING);
                this.state = 262;
                (localContext as CreateCatalogContext)._connectorName = this.identifier();
                this.state = 265;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 44) {
                    {
                    this.state = 263;
                    this.match(SqlBaseParser.COMMENT);
                    this.state = 264;
                    this.string_();
                    }
                }

                this.state = 269;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 31) {
                    {
                    this.state = 267;
                    this.match(SqlBaseParser.AUTHORIZATION);
                    this.state = 268;
                    this.principal();
                    }
                }

                this.state = 273;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 271;
                    this.match(SqlBaseParser.WITH);
                    this.state = 272;
                    this.properties();
                    }
                }

                }
                break;
            case 5:
                localContext = new DropCatalogContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 275;
                this.match(SqlBaseParser.DROP);
                this.state = 276;
                this.match(SqlBaseParser.CATALOG);
                this.state = 279;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 4, this.context) ) {
                case 1:
                    {
                    this.state = 277;
                    this.match(SqlBaseParser.IF);
                    this.state = 278;
                    this.match(SqlBaseParser.EXISTS);
                    }
                    break;
                }
                this.state = 281;
                (localContext as DropCatalogContext)._catalog = this.identifier();
                this.state = 283;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 37 || _la === 217) {
                    {
                    this.state = 282;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 37 || _la === 217)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 6:
                localContext = new CreateSchemaContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 285;
                this.match(SqlBaseParser.CREATE);
                this.state = 286;
                this.match(SqlBaseParser.SCHEMA);
                this.state = 290;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 6, this.context) ) {
                case 1:
                    {
                    this.state = 287;
                    this.match(SqlBaseParser.IF);
                    this.state = 288;
                    this.match(SqlBaseParser.NOT);
                    this.state = 289;
                    this.match(SqlBaseParser.EXISTS);
                    }
                    break;
                }
                this.state = 292;
                this.qualifiedName();
                this.state = 295;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 31) {
                    {
                    this.state = 293;
                    this.match(SqlBaseParser.AUTHORIZATION);
                    this.state = 294;
                    this.principal();
                    }
                }

                this.state = 299;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 297;
                    this.match(SqlBaseParser.WITH);
                    this.state = 298;
                    this.properties();
                    }
                }

                }
                break;
            case 7:
                localContext = new DropSchemaContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 301;
                this.match(SqlBaseParser.DROP);
                this.state = 302;
                this.match(SqlBaseParser.SCHEMA);
                this.state = 305;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 9, this.context) ) {
                case 1:
                    {
                    this.state = 303;
                    this.match(SqlBaseParser.IF);
                    this.state = 304;
                    this.match(SqlBaseParser.EXISTS);
                    }
                    break;
                }
                this.state = 307;
                this.qualifiedName();
                this.state = 309;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 37 || _la === 217) {
                    {
                    this.state = 308;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 37 || _la === 217)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 8:
                localContext = new RenameSchemaContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 311;
                this.match(SqlBaseParser.ALTER);
                this.state = 312;
                this.match(SqlBaseParser.SCHEMA);
                this.state = 313;
                this.qualifiedName();
                this.state = 314;
                this.match(SqlBaseParser.RENAME);
                this.state = 315;
                this.match(SqlBaseParser.TO);
                this.state = 316;
                this.identifier();
                }
                break;
            case 9:
                localContext = new SetSchemaAuthorizationContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 318;
                this.match(SqlBaseParser.ALTER);
                this.state = 319;
                this.match(SqlBaseParser.SCHEMA);
                this.state = 320;
                this.qualifiedName();
                this.state = 321;
                this.match(SqlBaseParser.SET);
                this.state = 322;
                this.match(SqlBaseParser.AUTHORIZATION);
                this.state = 323;
                this.principal();
                }
                break;
            case 10:
                localContext = new CreateTableAsSelectContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 325;
                this.match(SqlBaseParser.CREATE);
                this.state = 328;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 183) {
                    {
                    this.state = 326;
                    this.match(SqlBaseParser.OR);
                    this.state = 327;
                    this.match(SqlBaseParser.REPLACE);
                    }
                }

                this.state = 330;
                this.match(SqlBaseParser.TABLE);
                this.state = 334;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 12, this.context) ) {
                case 1:
                    {
                    this.state = 331;
                    this.match(SqlBaseParser.IF);
                    this.state = 332;
                    this.match(SqlBaseParser.NOT);
                    this.state = 333;
                    this.match(SqlBaseParser.EXISTS);
                    }
                    break;
                }
                this.state = 336;
                this.qualifiedName();
                this.state = 338;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 337;
                    this.columnAliases();
                    }
                }

                this.state = 342;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 44) {
                    {
                    this.state = 340;
                    this.match(SqlBaseParser.COMMENT);
                    this.state = 341;
                    this.string_();
                    }
                }

                this.state = 346;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 344;
                    this.match(SqlBaseParser.WITH);
                    this.state = 345;
                    this.properties();
                    }
                }

                this.state = 348;
                this.match(SqlBaseParser.AS);
                this.state = 354;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 16, this.context) ) {
                case 1:
                    {
                    this.state = 349;
                    this.query();
                    }
                    break;
                case 2:
                    {
                    this.state = 350;
                    this.match(SqlBaseParser.T__1);
                    this.state = 351;
                    this.query();
                    this.state = 352;
                    this.match(SqlBaseParser.T__2);
                    }
                    break;
                }
                this.state = 361;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 356;
                    this.match(SqlBaseParser.WITH);
                    this.state = 358;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 168) {
                        {
                        this.state = 357;
                        this.match(SqlBaseParser.NO);
                        }
                    }

                    this.state = 360;
                    this.match(SqlBaseParser.DATA);
                    }
                }

                }
                break;
            case 11:
                localContext = new CreateTableContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 363;
                this.match(SqlBaseParser.CREATE);
                this.state = 366;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 183) {
                    {
                    this.state = 364;
                    this.match(SqlBaseParser.OR);
                    this.state = 365;
                    this.match(SqlBaseParser.REPLACE);
                    }
                }

                this.state = 368;
                this.match(SqlBaseParser.TABLE);
                this.state = 372;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 20, this.context) ) {
                case 1:
                    {
                    this.state = 369;
                    this.match(SqlBaseParser.IF);
                    this.state = 370;
                    this.match(SqlBaseParser.NOT);
                    this.state = 371;
                    this.match(SqlBaseParser.EXISTS);
                    }
                    break;
                }
                this.state = 374;
                this.qualifiedName();
                this.state = 375;
                this.match(SqlBaseParser.T__1);
                this.state = 376;
                this.tableElement();
                this.state = 381;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 377;
                    this.match(SqlBaseParser.T__3);
                    this.state = 378;
                    this.tableElement();
                    }
                    }
                    this.state = 383;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 384;
                this.match(SqlBaseParser.T__2);
                this.state = 387;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 44) {
                    {
                    this.state = 385;
                    this.match(SqlBaseParser.COMMENT);
                    this.state = 386;
                    this.string_();
                    }
                }

                this.state = 391;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 389;
                    this.match(SqlBaseParser.WITH);
                    this.state = 390;
                    this.properties();
                    }
                }

                }
                break;
            case 12:
                localContext = new DropTableContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 393;
                this.match(SqlBaseParser.DROP);
                this.state = 394;
                this.match(SqlBaseParser.TABLE);
                this.state = 397;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 24, this.context) ) {
                case 1:
                    {
                    this.state = 395;
                    this.match(SqlBaseParser.IF);
                    this.state = 396;
                    this.match(SqlBaseParser.EXISTS);
                    }
                    break;
                }
                this.state = 399;
                this.qualifiedName();
                }
                break;
            case 13:
                localContext = new InsertIntoContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 400;
                this.match(SqlBaseParser.INSERT);
                this.state = 401;
                this.match(SqlBaseParser.INTO);
                this.state = 402;
                this.qualifiedName();
                this.state = 404;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 25, this.context) ) {
                case 1:
                    {
                    this.state = 403;
                    this.columnAliases();
                    }
                    break;
                }
                this.state = 406;
                this.query();
                }
                break;
            case 14:
                localContext = new DeleteContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 408;
                this.match(SqlBaseParser.DELETE);
                this.state = 409;
                this.match(SqlBaseParser.FROM);
                this.state = 410;
                this.qualifiedName();
                this.state = 413;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 286) {
                    {
                    this.state = 411;
                    this.match(SqlBaseParser.WHERE);
                    this.state = 412;
                    this.booleanExpression(0);
                    }
                }

                }
                break;
            case 15:
                localContext = new TruncateTableContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 415;
                this.match(SqlBaseParser.TRUNCATE);
                this.state = 416;
                this.match(SqlBaseParser.TABLE);
                this.state = 417;
                this.qualifiedName();
                }
                break;
            case 16:
                localContext = new CommentTableContext(localContext);
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 418;
                this.match(SqlBaseParser.COMMENT);
                this.state = 419;
                this.match(SqlBaseParser.ON);
                this.state = 420;
                this.match(SqlBaseParser.TABLE);
                this.state = 421;
                this.qualifiedName();
                this.state = 422;
                this.match(SqlBaseParser.IS);
                this.state = 425;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlBaseParser.STRING:
                case SqlBaseParser.UNICODE_STRING:
                    {
                    this.state = 423;
                    this.string_();
                    }
                    break;
                case SqlBaseParser.NULL:
                    {
                    this.state = 424;
                    this.match(SqlBaseParser.NULL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 17:
                localContext = new CommentViewContext(localContext);
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 427;
                this.match(SqlBaseParser.COMMENT);
                this.state = 428;
                this.match(SqlBaseParser.ON);
                this.state = 429;
                this.match(SqlBaseParser.VIEW);
                this.state = 430;
                this.qualifiedName();
                this.state = 431;
                this.match(SqlBaseParser.IS);
                this.state = 434;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlBaseParser.STRING:
                case SqlBaseParser.UNICODE_STRING:
                    {
                    this.state = 432;
                    this.string_();
                    }
                    break;
                case SqlBaseParser.NULL:
                    {
                    this.state = 433;
                    this.match(SqlBaseParser.NULL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 18:
                localContext = new CommentColumnContext(localContext);
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 436;
                this.match(SqlBaseParser.COMMENT);
                this.state = 437;
                this.match(SqlBaseParser.ON);
                this.state = 438;
                this.match(SqlBaseParser.COLUMN);
                this.state = 439;
                this.qualifiedName();
                this.state = 440;
                this.match(SqlBaseParser.IS);
                this.state = 443;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlBaseParser.STRING:
                case SqlBaseParser.UNICODE_STRING:
                    {
                    this.state = 441;
                    this.string_();
                    }
                    break;
                case SqlBaseParser.NULL:
                    {
                    this.state = 442;
                    this.match(SqlBaseParser.NULL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 19:
                localContext = new RenameTableContext(localContext);
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 445;
                this.match(SqlBaseParser.ALTER);
                this.state = 446;
                this.match(SqlBaseParser.TABLE);
                this.state = 449;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 30, this.context) ) {
                case 1:
                    {
                    this.state = 447;
                    this.match(SqlBaseParser.IF);
                    this.state = 448;
                    this.match(SqlBaseParser.EXISTS);
                    }
                    break;
                }
                this.state = 451;
                (localContext as RenameTableContext)._from_ = this.qualifiedName();
                this.state = 452;
                this.match(SqlBaseParser.RENAME);
                this.state = 453;
                this.match(SqlBaseParser.TO);
                this.state = 454;
                (localContext as RenameTableContext)._to = this.qualifiedName();
                }
                break;
            case 20:
                localContext = new AddColumnContext(localContext);
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 456;
                this.match(SqlBaseParser.ALTER);
                this.state = 457;
                this.match(SqlBaseParser.TABLE);
                this.state = 460;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 31, this.context) ) {
                case 1:
                    {
                    this.state = 458;
                    this.match(SqlBaseParser.IF);
                    this.state = 459;
                    this.match(SqlBaseParser.EXISTS);
                    }
                    break;
                }
                this.state = 462;
                (localContext as AddColumnContext)._tableName = this.qualifiedName();
                this.state = 463;
                this.match(SqlBaseParser.ADD);
                this.state = 464;
                this.match(SqlBaseParser.COLUMN);
                this.state = 468;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 32, this.context) ) {
                case 1:
                    {
                    this.state = 465;
                    this.match(SqlBaseParser.IF);
                    this.state = 466;
                    this.match(SqlBaseParser.NOT);
                    this.state = 467;
                    this.match(SqlBaseParser.EXISTS);
                    }
                    break;
                }
                this.state = 470;
                (localContext as AddColumnContext)._column = this.columnDefinition();
                }
                break;
            case 21:
                localContext = new RenameColumnContext(localContext);
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 472;
                this.match(SqlBaseParser.ALTER);
                this.state = 473;
                this.match(SqlBaseParser.TABLE);
                this.state = 476;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 33, this.context) ) {
                case 1:
                    {
                    this.state = 474;
                    this.match(SqlBaseParser.IF);
                    this.state = 475;
                    this.match(SqlBaseParser.EXISTS);
                    }
                    break;
                }
                this.state = 478;
                (localContext as RenameColumnContext)._tableName = this.qualifiedName();
                this.state = 479;
                this.match(SqlBaseParser.RENAME);
                this.state = 480;
                this.match(SqlBaseParser.COLUMN);
                this.state = 483;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 34, this.context) ) {
                case 1:
                    {
                    this.state = 481;
                    this.match(SqlBaseParser.IF);
                    this.state = 482;
                    this.match(SqlBaseParser.EXISTS);
                    }
                    break;
                }
                this.state = 485;
                (localContext as RenameColumnContext)._from_ = this.qualifiedName();
                this.state = 486;
                this.match(SqlBaseParser.TO);
                this.state = 487;
                (localContext as RenameColumnContext)._to = this.identifier();
                }
                break;
            case 22:
                localContext = new DropColumnContext(localContext);
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 489;
                this.match(SqlBaseParser.ALTER);
                this.state = 490;
                this.match(SqlBaseParser.TABLE);
                this.state = 493;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 35, this.context) ) {
                case 1:
                    {
                    this.state = 491;
                    this.match(SqlBaseParser.IF);
                    this.state = 492;
                    this.match(SqlBaseParser.EXISTS);
                    }
                    break;
                }
                this.state = 495;
                (localContext as DropColumnContext)._tableName = this.qualifiedName();
                this.state = 496;
                this.match(SqlBaseParser.DROP);
                this.state = 497;
                this.match(SqlBaseParser.COLUMN);
                this.state = 500;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 36, this.context) ) {
                case 1:
                    {
                    this.state = 498;
                    this.match(SqlBaseParser.IF);
                    this.state = 499;
                    this.match(SqlBaseParser.EXISTS);
                    }
                    break;
                }
                this.state = 502;
                (localContext as DropColumnContext)._column = this.qualifiedName();
                }
                break;
            case 23:
                localContext = new SetColumnTypeContext(localContext);
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 504;
                this.match(SqlBaseParser.ALTER);
                this.state = 505;
                this.match(SqlBaseParser.TABLE);
                this.state = 508;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 37, this.context) ) {
                case 1:
                    {
                    this.state = 506;
                    this.match(SqlBaseParser.IF);
                    this.state = 507;
                    this.match(SqlBaseParser.EXISTS);
                    }
                    break;
                }
                this.state = 510;
                (localContext as SetColumnTypeContext)._tableName = this.qualifiedName();
                this.state = 511;
                this.match(SqlBaseParser.ALTER);
                this.state = 512;
                this.match(SqlBaseParser.COLUMN);
                this.state = 513;
                (localContext as SetColumnTypeContext)._columnName = this.qualifiedName();
                this.state = 514;
                this.match(SqlBaseParser.SET);
                this.state = 515;
                this.match(SqlBaseParser.DATA);
                this.state = 516;
                this.match(SqlBaseParser.TYPE);
                this.state = 517;
                this.type_(0);
                }
                break;
            case 24:
                localContext = new SetTableAuthorizationContext(localContext);
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 519;
                this.match(SqlBaseParser.ALTER);
                this.state = 520;
                this.match(SqlBaseParser.TABLE);
                this.state = 521;
                (localContext as SetTableAuthorizationContext)._tableName = this.qualifiedName();
                this.state = 522;
                this.match(SqlBaseParser.SET);
                this.state = 523;
                this.match(SqlBaseParser.AUTHORIZATION);
                this.state = 524;
                this.principal();
                }
                break;
            case 25:
                localContext = new SetTablePropertiesContext(localContext);
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 526;
                this.match(SqlBaseParser.ALTER);
                this.state = 527;
                this.match(SqlBaseParser.TABLE);
                this.state = 528;
                (localContext as SetTablePropertiesContext)._tableName = this.qualifiedName();
                this.state = 529;
                this.match(SqlBaseParser.SET);
                this.state = 530;
                this.match(SqlBaseParser.PROPERTIES);
                this.state = 531;
                this.propertyAssignments();
                }
                break;
            case 26:
                localContext = new TableExecuteContext(localContext);
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 533;
                this.match(SqlBaseParser.ALTER);
                this.state = 534;
                this.match(SqlBaseParser.TABLE);
                this.state = 535;
                (localContext as TableExecuteContext)._tableName = this.qualifiedName();
                this.state = 536;
                this.match(SqlBaseParser.EXECUTE);
                this.state = 537;
                (localContext as TableExecuteContext)._procedureName = this.identifier();
                this.state = 550;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 538;
                    this.match(SqlBaseParser.T__1);
                    this.state = 547;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326660) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4224122869) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4283119035) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3031939045) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294926303) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4271767551) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 3154050559) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4260364031) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 2810043871) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 536621119) !== 0)) {
                        {
                        this.state = 539;
                        this.callArgument();
                        this.state = 544;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 4) {
                            {
                            {
                            this.state = 540;
                            this.match(SqlBaseParser.T__3);
                            this.state = 541;
                            this.callArgument();
                            }
                            }
                            this.state = 546;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                    }

                    this.state = 549;
                    this.match(SqlBaseParser.T__2);
                    }
                }

                this.state = 554;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 286) {
                    {
                    this.state = 552;
                    this.match(SqlBaseParser.WHERE);
                    this.state = 553;
                    (localContext as TableExecuteContext)._where = this.booleanExpression(0);
                    }
                }

                }
                break;
            case 27:
                localContext = new AnalyzeContext(localContext);
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 556;
                this.match(SqlBaseParser.ANALYZE);
                this.state = 557;
                this.qualifiedName();
                this.state = 560;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 558;
                    this.match(SqlBaseParser.WITH);
                    this.state = 559;
                    this.properties();
                    }
                }

                }
                break;
            case 28:
                localContext = new CreateMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 562;
                this.match(SqlBaseParser.CREATE);
                this.state = 565;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 183) {
                    {
                    this.state = 563;
                    this.match(SqlBaseParser.OR);
                    this.state = 564;
                    this.match(SqlBaseParser.REPLACE);
                    }
                }

                this.state = 567;
                this.match(SqlBaseParser.MATERIALIZED);
                this.state = 568;
                this.match(SqlBaseParser.VIEW);
                this.state = 572;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 44, this.context) ) {
                case 1:
                    {
                    this.state = 569;
                    this.match(SqlBaseParser.IF);
                    this.state = 570;
                    this.match(SqlBaseParser.NOT);
                    this.state = 571;
                    this.match(SqlBaseParser.EXISTS);
                    }
                    break;
                }
                this.state = 574;
                this.qualifiedName();
                this.state = 578;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 102) {
                    {
                    this.state = 575;
                    this.match(SqlBaseParser.GRACE);
                    this.state = 576;
                    this.match(SqlBaseParser.PERIOD);
                    this.state = 577;
                    this.interval();
                    }
                }

                this.state = 582;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 44) {
                    {
                    this.state = 580;
                    this.match(SqlBaseParser.COMMENT);
                    this.state = 581;
                    this.string_();
                    }
                }

                this.state = 586;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 584;
                    this.match(SqlBaseParser.WITH);
                    this.state = 585;
                    this.properties();
                    }
                }

                this.state = 588;
                this.match(SqlBaseParser.AS);
                this.state = 589;
                this.query();
                }
                break;
            case 29:
                localContext = new CreateViewContext(localContext);
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 591;
                this.match(SqlBaseParser.CREATE);
                this.state = 594;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 183) {
                    {
                    this.state = 592;
                    this.match(SqlBaseParser.OR);
                    this.state = 593;
                    this.match(SqlBaseParser.REPLACE);
                    }
                }

                this.state = 596;
                this.match(SqlBaseParser.VIEW);
                this.state = 597;
                this.qualifiedName();
                this.state = 600;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 44) {
                    {
                    this.state = 598;
                    this.match(SqlBaseParser.COMMENT);
                    this.state = 599;
                    this.string_();
                    }
                }

                this.state = 604;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 232) {
                    {
                    this.state = 602;
                    this.match(SqlBaseParser.SECURITY);
                    this.state = 603;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 69 || _la === 124)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 606;
                this.match(SqlBaseParser.AS);
                this.state = 607;
                this.query();
                }
                break;
            case 30:
                localContext = new RefreshMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 609;
                this.match(SqlBaseParser.REFRESH);
                this.state = 610;
                this.match(SqlBaseParser.MATERIALIZED);
                this.state = 611;
                this.match(SqlBaseParser.VIEW);
                this.state = 612;
                this.qualifiedName();
                }
                break;
            case 31:
                localContext = new DropMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 613;
                this.match(SqlBaseParser.DROP);
                this.state = 614;
                this.match(SqlBaseParser.MATERIALIZED);
                this.state = 615;
                this.match(SqlBaseParser.VIEW);
                this.state = 618;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 51, this.context) ) {
                case 1:
                    {
                    this.state = 616;
                    this.match(SqlBaseParser.IF);
                    this.state = 617;
                    this.match(SqlBaseParser.EXISTS);
                    }
                    break;
                }
                this.state = 620;
                this.qualifiedName();
                }
                break;
            case 32:
                localContext = new RenameMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 621;
                this.match(SqlBaseParser.ALTER);
                this.state = 622;
                this.match(SqlBaseParser.MATERIALIZED);
                this.state = 623;
                this.match(SqlBaseParser.VIEW);
                this.state = 626;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 52, this.context) ) {
                case 1:
                    {
                    this.state = 624;
                    this.match(SqlBaseParser.IF);
                    this.state = 625;
                    this.match(SqlBaseParser.EXISTS);
                    }
                    break;
                }
                this.state = 628;
                (localContext as RenameMaterializedViewContext)._from_ = this.qualifiedName();
                this.state = 629;
                this.match(SqlBaseParser.RENAME);
                this.state = 630;
                this.match(SqlBaseParser.TO);
                this.state = 631;
                (localContext as RenameMaterializedViewContext)._to = this.qualifiedName();
                }
                break;
            case 33:
                localContext = new SetMaterializedViewPropertiesContext(localContext);
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 633;
                this.match(SqlBaseParser.ALTER);
                this.state = 634;
                this.match(SqlBaseParser.MATERIALIZED);
                this.state = 635;
                this.match(SqlBaseParser.VIEW);
                this.state = 636;
                this.qualifiedName();
                this.state = 637;
                this.match(SqlBaseParser.SET);
                this.state = 638;
                this.match(SqlBaseParser.PROPERTIES);
                this.state = 639;
                this.propertyAssignments();
                }
                break;
            case 34:
                localContext = new DropViewContext(localContext);
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 641;
                this.match(SqlBaseParser.DROP);
                this.state = 642;
                this.match(SqlBaseParser.VIEW);
                this.state = 645;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 53, this.context) ) {
                case 1:
                    {
                    this.state = 643;
                    this.match(SqlBaseParser.IF);
                    this.state = 644;
                    this.match(SqlBaseParser.EXISTS);
                    }
                    break;
                }
                this.state = 647;
                this.qualifiedName();
                }
                break;
            case 35:
                localContext = new RenameViewContext(localContext);
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 648;
                this.match(SqlBaseParser.ALTER);
                this.state = 649;
                this.match(SqlBaseParser.VIEW);
                this.state = 650;
                (localContext as RenameViewContext)._from_ = this.qualifiedName();
                this.state = 651;
                this.match(SqlBaseParser.RENAME);
                this.state = 652;
                this.match(SqlBaseParser.TO);
                this.state = 653;
                (localContext as RenameViewContext)._to = this.qualifiedName();
                }
                break;
            case 36:
                localContext = new SetViewAuthorizationContext(localContext);
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 655;
                this.match(SqlBaseParser.ALTER);
                this.state = 656;
                this.match(SqlBaseParser.VIEW);
                this.state = 657;
                (localContext as SetViewAuthorizationContext)._from_ = this.qualifiedName();
                this.state = 658;
                this.match(SqlBaseParser.SET);
                this.state = 659;
                this.match(SqlBaseParser.AUTHORIZATION);
                this.state = 660;
                this.principal();
                }
                break;
            case 37:
                localContext = new CallContext(localContext);
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 662;
                this.match(SqlBaseParser.CALL);
                this.state = 663;
                this.qualifiedName();
                this.state = 664;
                this.match(SqlBaseParser.T__1);
                this.state = 673;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326660) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4224122869) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4283119035) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3031939045) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294926303) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4271767551) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 3154050559) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4260364031) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 2810043871) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 536621119) !== 0)) {
                    {
                    this.state = 665;
                    this.callArgument();
                    this.state = 670;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 666;
                        this.match(SqlBaseParser.T__3);
                        this.state = 667;
                        this.callArgument();
                        }
                        }
                        this.state = 672;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 675;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 38:
                localContext = new CreateRoleContext(localContext);
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 677;
                this.match(SqlBaseParser.CREATE);
                this.state = 678;
                this.match(SqlBaseParser.ROLE);
                this.state = 679;
                (localContext as CreateRoleContext)._name = this.identifier();
                this.state = 683;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 680;
                    this.match(SqlBaseParser.WITH);
                    this.state = 681;
                    this.match(SqlBaseParser.ADMIN);
                    this.state = 682;
                    this.grantor();
                    }
                }

                this.state = 687;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 115) {
                    {
                    this.state = 685;
                    this.match(SqlBaseParser.IN);
                    this.state = 686;
                    (localContext as CreateRoleContext)._catalog = this.identifier();
                    }
                }

                }
                break;
            case 39:
                localContext = new DropRoleContext(localContext);
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 689;
                this.match(SqlBaseParser.DROP);
                this.state = 690;
                this.match(SqlBaseParser.ROLE);
                this.state = 691;
                (localContext as DropRoleContext)._name = this.identifier();
                this.state = 694;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 115) {
                    {
                    this.state = 692;
                    this.match(SqlBaseParser.IN);
                    this.state = 693;
                    (localContext as DropRoleContext)._catalog = this.identifier();
                    }
                }

                }
                break;
            case 40:
                localContext = new GrantRolesContext(localContext);
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 696;
                this.match(SqlBaseParser.GRANT);
                this.state = 697;
                this.roles();
                this.state = 698;
                this.match(SqlBaseParser.TO);
                this.state = 699;
                this.principal();
                this.state = 704;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 700;
                    this.match(SqlBaseParser.T__3);
                    this.state = 701;
                    this.principal();
                    }
                    }
                    this.state = 706;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 710;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 707;
                    this.match(SqlBaseParser.WITH);
                    this.state = 708;
                    this.match(SqlBaseParser.ADMIN);
                    this.state = 709;
                    this.match(SqlBaseParser.OPTION);
                    }
                }

                this.state = 715;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 104) {
                    {
                    this.state = 712;
                    this.match(SqlBaseParser.GRANTED);
                    this.state = 713;
                    this.match(SqlBaseParser.BY);
                    this.state = 714;
                    this.grantor();
                    }
                }

                this.state = 719;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 115) {
                    {
                    this.state = 717;
                    this.match(SqlBaseParser.IN);
                    this.state = 718;
                    (localContext as GrantRolesContext)._catalog = this.identifier();
                    }
                }

                }
                break;
            case 41:
                localContext = new RevokeRolesContext(localContext);
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 721;
                this.match(SqlBaseParser.REVOKE);
                this.state = 725;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 63, this.context) ) {
                case 1:
                    {
                    this.state = 722;
                    this.match(SqlBaseParser.ADMIN);
                    this.state = 723;
                    this.match(SqlBaseParser.OPTION);
                    this.state = 724;
                    this.match(SqlBaseParser.FOR);
                    }
                    break;
                }
                this.state = 727;
                this.roles();
                this.state = 728;
                this.match(SqlBaseParser.FROM);
                this.state = 729;
                this.principal();
                this.state = 734;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 730;
                    this.match(SqlBaseParser.T__3);
                    this.state = 731;
                    this.principal();
                    }
                    }
                    this.state = 736;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 740;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 104) {
                    {
                    this.state = 737;
                    this.match(SqlBaseParser.GRANTED);
                    this.state = 738;
                    this.match(SqlBaseParser.BY);
                    this.state = 739;
                    this.grantor();
                    }
                }

                this.state = 744;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 115) {
                    {
                    this.state = 742;
                    this.match(SqlBaseParser.IN);
                    this.state = 743;
                    (localContext as RevokeRolesContext)._catalog = this.identifier();
                    }
                }

                }
                break;
            case 42:
                localContext = new SetRoleContext(localContext);
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 746;
                this.match(SqlBaseParser.SET);
                this.state = 747;
                this.match(SqlBaseParser.ROLE);
                this.state = 751;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 67, this.context) ) {
                case 1:
                    {
                    this.state = 748;
                    this.match(SqlBaseParser.ALL);
                    }
                    break;
                case 2:
                    {
                    this.state = 749;
                    this.match(SqlBaseParser.NONE);
                    }
                    break;
                case 3:
                    {
                    this.state = 750;
                    (localContext as SetRoleContext)._role = this.identifier();
                    }
                    break;
                }
                this.state = 755;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 115) {
                    {
                    this.state = 753;
                    this.match(SqlBaseParser.IN);
                    this.state = 754;
                    (localContext as SetRoleContext)._catalog = this.identifier();
                    }
                }

                }
                break;
            case 43:
                localContext = new GrantContext(localContext);
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 757;
                this.match(SqlBaseParser.GRANT);
                this.state = 768;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlBaseParser.CREATE:
                case SqlBaseParser.DELETE:
                case SqlBaseParser.INSERT:
                case SqlBaseParser.SELECT:
                case SqlBaseParser.UPDATE:
                    {
                    this.state = 758;
                    this.privilege();
                    this.state = 763;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 759;
                        this.match(SqlBaseParser.T__3);
                        this.state = 760;
                        this.privilege();
                        }
                        }
                        this.state = 765;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                case SqlBaseParser.ALL:
                    {
                    this.state = 766;
                    this.match(SqlBaseParser.ALL);
                    this.state = 767;
                    this.match(SqlBaseParser.PRIVILEGES);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 770;
                this.match(SqlBaseParser.ON);
                this.state = 772;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 71, this.context) ) {
                case 1:
                    {
                    this.state = 771;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 229 || _la === 246)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 774;
                this.qualifiedName();
                this.state = 775;
                this.match(SqlBaseParser.TO);
                this.state = 776;
                (localContext as GrantContext)._grantee = this.principal();
                this.state = 780;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 777;
                    this.match(SqlBaseParser.WITH);
                    this.state = 778;
                    this.match(SqlBaseParser.GRANT);
                    this.state = 779;
                    this.match(SqlBaseParser.OPTION);
                    }
                }

                }
                break;
            case 44:
                localContext = new DenyContext(localContext);
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 782;
                this.match(SqlBaseParser.DENY);
                this.state = 793;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlBaseParser.CREATE:
                case SqlBaseParser.DELETE:
                case SqlBaseParser.INSERT:
                case SqlBaseParser.SELECT:
                case SqlBaseParser.UPDATE:
                    {
                    this.state = 783;
                    this.privilege();
                    this.state = 788;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 784;
                        this.match(SqlBaseParser.T__3);
                        this.state = 785;
                        this.privilege();
                        }
                        }
                        this.state = 790;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                case SqlBaseParser.ALL:
                    {
                    this.state = 791;
                    this.match(SqlBaseParser.ALL);
                    this.state = 792;
                    this.match(SqlBaseParser.PRIVILEGES);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 795;
                this.match(SqlBaseParser.ON);
                this.state = 797;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 75, this.context) ) {
                case 1:
                    {
                    this.state = 796;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 229 || _la === 246)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 799;
                this.qualifiedName();
                this.state = 800;
                this.match(SqlBaseParser.TO);
                this.state = 801;
                (localContext as DenyContext)._grantee = this.principal();
                }
                break;
            case 45:
                localContext = new RevokeContext(localContext);
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 803;
                this.match(SqlBaseParser.REVOKE);
                this.state = 807;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 103) {
                    {
                    this.state = 804;
                    this.match(SqlBaseParser.GRANT);
                    this.state = 805;
                    this.match(SqlBaseParser.OPTION);
                    this.state = 806;
                    this.match(SqlBaseParser.FOR);
                    }
                }

                this.state = 819;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlBaseParser.CREATE:
                case SqlBaseParser.DELETE:
                case SqlBaseParser.INSERT:
                case SqlBaseParser.SELECT:
                case SqlBaseParser.UPDATE:
                    {
                    this.state = 809;
                    this.privilege();
                    this.state = 814;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 810;
                        this.match(SqlBaseParser.T__3);
                        this.state = 811;
                        this.privilege();
                        }
                        }
                        this.state = 816;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                case SqlBaseParser.ALL:
                    {
                    this.state = 817;
                    this.match(SqlBaseParser.ALL);
                    this.state = 818;
                    this.match(SqlBaseParser.PRIVILEGES);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 821;
                this.match(SqlBaseParser.ON);
                this.state = 823;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 79, this.context) ) {
                case 1:
                    {
                    this.state = 822;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 229 || _la === 246)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 825;
                this.qualifiedName();
                this.state = 826;
                this.match(SqlBaseParser.FROM);
                this.state = 827;
                (localContext as RevokeContext)._grantee = this.principal();
                }
                break;
            case 46:
                localContext = new ShowGrantsContext(localContext);
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 829;
                this.match(SqlBaseParser.SHOW);
                this.state = 830;
                this.match(SqlBaseParser.GRANTS);
                this.state = 836;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 179) {
                    {
                    this.state = 831;
                    this.match(SqlBaseParser.ON);
                    this.state = 833;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 246) {
                        {
                        this.state = 832;
                        this.match(SqlBaseParser.TABLE);
                        }
                    }

                    this.state = 835;
                    this.qualifiedName();
                    }
                }

                }
                break;
            case 47:
                localContext = new ExplainContext(localContext);
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 838;
                this.match(SqlBaseParser.EXPLAIN);
                this.state = 850;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 83, this.context) ) {
                case 1:
                    {
                    this.state = 839;
                    this.match(SqlBaseParser.T__1);
                    this.state = 840;
                    this.explainOption();
                    this.state = 845;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 841;
                        this.match(SqlBaseParser.T__3);
                        this.state = 842;
                        this.explainOption();
                        }
                        }
                        this.state = 847;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 848;
                    this.match(SqlBaseParser.T__2);
                    }
                    break;
                }
                this.state = 852;
                this.statement();
                }
                break;
            case 48:
                localContext = new ExplainAnalyzeContext(localContext);
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 853;
                this.match(SqlBaseParser.EXPLAIN);
                this.state = 854;
                this.match(SqlBaseParser.ANALYZE);
                this.state = 856;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 282) {
                    {
                    this.state = 855;
                    this.match(SqlBaseParser.VERBOSE);
                    }
                }

                this.state = 858;
                this.statement();
                }
                break;
            case 49:
                localContext = new ShowCreateTableContext(localContext);
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 859;
                this.match(SqlBaseParser.SHOW);
                this.state = 860;
                this.match(SqlBaseParser.CREATE);
                this.state = 861;
                this.match(SqlBaseParser.TABLE);
                this.state = 862;
                this.qualifiedName();
                }
                break;
            case 50:
                localContext = new ShowCreateSchemaContext(localContext);
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 863;
                this.match(SqlBaseParser.SHOW);
                this.state = 864;
                this.match(SqlBaseParser.CREATE);
                this.state = 865;
                this.match(SqlBaseParser.SCHEMA);
                this.state = 866;
                this.qualifiedName();
                }
                break;
            case 51:
                localContext = new ShowCreateViewContext(localContext);
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 867;
                this.match(SqlBaseParser.SHOW);
                this.state = 868;
                this.match(SqlBaseParser.CREATE);
                this.state = 869;
                this.match(SqlBaseParser.VIEW);
                this.state = 870;
                this.qualifiedName();
                }
                break;
            case 52:
                localContext = new ShowCreateMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 52);
                {
                this.state = 871;
                this.match(SqlBaseParser.SHOW);
                this.state = 872;
                this.match(SqlBaseParser.CREATE);
                this.state = 873;
                this.match(SqlBaseParser.MATERIALIZED);
                this.state = 874;
                this.match(SqlBaseParser.VIEW);
                this.state = 875;
                this.qualifiedName();
                }
                break;
            case 53:
                localContext = new ShowTablesContext(localContext);
                this.enterOuterAlt(localContext, 53);
                {
                this.state = 876;
                this.match(SqlBaseParser.SHOW);
                this.state = 877;
                this.match(SqlBaseParser.TABLES);
                this.state = 880;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 99 || _la === 115) {
                    {
                    this.state = 878;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 99 || _la === 115)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 879;
                    this.qualifiedName();
                    }
                }

                this.state = 888;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 144) {
                    {
                    this.state = 882;
                    this.match(SqlBaseParser.LIKE);
                    this.state = 883;
                    (localContext as ShowTablesContext)._pattern = this.string_();
                    this.state = 886;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 84) {
                        {
                        this.state = 884;
                        this.match(SqlBaseParser.ESCAPE);
                        this.state = 885;
                        (localContext as ShowTablesContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 54:
                localContext = new ShowSchemasContext(localContext);
                this.enterOuterAlt(localContext, 54);
                {
                this.state = 890;
                this.match(SqlBaseParser.SHOW);
                this.state = 891;
                this.match(SqlBaseParser.SCHEMAS);
                this.state = 894;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 99 || _la === 115) {
                    {
                    this.state = 892;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 99 || _la === 115)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 893;
                    this.identifier();
                    }
                }

                this.state = 902;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 144) {
                    {
                    this.state = 896;
                    this.match(SqlBaseParser.LIKE);
                    this.state = 897;
                    (localContext as ShowSchemasContext)._pattern = this.string_();
                    this.state = 900;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 84) {
                        {
                        this.state = 898;
                        this.match(SqlBaseParser.ESCAPE);
                        this.state = 899;
                        (localContext as ShowSchemasContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 55:
                localContext = new ShowCatalogsContext(localContext);
                this.enterOuterAlt(localContext, 55);
                {
                this.state = 904;
                this.match(SqlBaseParser.SHOW);
                this.state = 905;
                this.match(SqlBaseParser.CATALOGS);
                this.state = 912;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 144) {
                    {
                    this.state = 906;
                    this.match(SqlBaseParser.LIKE);
                    this.state = 907;
                    (localContext as ShowCatalogsContext)._pattern = this.string_();
                    this.state = 910;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 84) {
                        {
                        this.state = 908;
                        this.match(SqlBaseParser.ESCAPE);
                        this.state = 909;
                        (localContext as ShowCatalogsContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 56:
                localContext = new ShowColumnsContext(localContext);
                this.enterOuterAlt(localContext, 56);
                {
                this.state = 914;
                this.match(SqlBaseParser.SHOW);
                this.state = 915;
                this.match(SqlBaseParser.COLUMNS);
                this.state = 916;
                _la = this.tokenStream.LA(1);
                if(!(_la === 99 || _la === 115)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 918;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326656) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 2152136501) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4065015227) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3031934949) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4293222273) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4271765759) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 3154050559) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4260364031) !== 0) || ((((_la - 260)) & ~0x1F) === 0 && ((1 << (_la - 260)) & 3923736439) !== 0) || ((((_la - 292)) & ~0x1F) === 0 && ((1 << (_la - 292)) & 125829135) !== 0)) {
                    {
                    this.state = 917;
                    this.qualifiedName();
                    }
                }

                this.state = 926;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 144) {
                    {
                    this.state = 920;
                    this.match(SqlBaseParser.LIKE);
                    this.state = 921;
                    (localContext as ShowColumnsContext)._pattern = this.string_();
                    this.state = 924;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 84) {
                        {
                        this.state = 922;
                        this.match(SqlBaseParser.ESCAPE);
                        this.state = 923;
                        (localContext as ShowColumnsContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 57:
                localContext = new ShowStatsContext(localContext);
                this.enterOuterAlt(localContext, 57);
                {
                this.state = 928;
                this.match(SqlBaseParser.SHOW);
                this.state = 929;
                this.match(SqlBaseParser.STATS);
                this.state = 930;
                this.match(SqlBaseParser.FOR);
                this.state = 931;
                this.qualifiedName();
                }
                break;
            case 58:
                localContext = new ShowStatsForQueryContext(localContext);
                this.enterOuterAlt(localContext, 58);
                {
                this.state = 932;
                this.match(SqlBaseParser.SHOW);
                this.state = 933;
                this.match(SqlBaseParser.STATS);
                this.state = 934;
                this.match(SqlBaseParser.FOR);
                this.state = 935;
                this.match(SqlBaseParser.T__1);
                this.state = 936;
                this.query();
                this.state = 937;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 59:
                localContext = new ShowRolesContext(localContext);
                this.enterOuterAlt(localContext, 59);
                {
                this.state = 939;
                this.match(SqlBaseParser.SHOW);
                this.state = 941;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 54) {
                    {
                    this.state = 940;
                    this.match(SqlBaseParser.CURRENT);
                    }
                }

                this.state = 943;
                this.match(SqlBaseParser.ROLES);
                this.state = 946;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 99 || _la === 115) {
                    {
                    this.state = 944;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 99 || _la === 115)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 945;
                    this.identifier();
                    }
                }

                }
                break;
            case 60:
                localContext = new ShowRoleGrantsContext(localContext);
                this.enterOuterAlt(localContext, 60);
                {
                this.state = 948;
                this.match(SqlBaseParser.SHOW);
                this.state = 949;
                this.match(SqlBaseParser.ROLE);
                this.state = 950;
                this.match(SqlBaseParser.GRANTS);
                this.state = 953;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 99 || _la === 115) {
                    {
                    this.state = 951;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 99 || _la === 115)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 952;
                    this.identifier();
                    }
                }

                }
                break;
            case 61:
                localContext = new ShowColumnsContext(localContext);
                this.enterOuterAlt(localContext, 61);
                {
                this.state = 955;
                this.match(SqlBaseParser.DESCRIBE);
                this.state = 956;
                this.qualifiedName();
                }
                break;
            case 62:
                localContext = new ShowColumnsContext(localContext);
                this.enterOuterAlt(localContext, 62);
                {
                this.state = 957;
                this.match(SqlBaseParser.DESC);
                this.state = 958;
                this.qualifiedName();
                }
                break;
            case 63:
                localContext = new ShowFunctionsContext(localContext);
                this.enterOuterAlt(localContext, 63);
                {
                this.state = 959;
                this.match(SqlBaseParser.SHOW);
                this.state = 960;
                this.match(SqlBaseParser.FUNCTIONS);
                this.state = 967;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 144) {
                    {
                    this.state = 961;
                    this.match(SqlBaseParser.LIKE);
                    this.state = 962;
                    (localContext as ShowFunctionsContext)._pattern = this.string_();
                    this.state = 965;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 84) {
                        {
                        this.state = 963;
                        this.match(SqlBaseParser.ESCAPE);
                        this.state = 964;
                        (localContext as ShowFunctionsContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 64:
                localContext = new ShowSessionContext(localContext);
                this.enterOuterAlt(localContext, 64);
                {
                this.state = 969;
                this.match(SqlBaseParser.SHOW);
                this.state = 970;
                this.match(SqlBaseParser.SESSION);
                this.state = 977;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 144) {
                    {
                    this.state = 971;
                    this.match(SqlBaseParser.LIKE);
                    this.state = 972;
                    (localContext as ShowSessionContext)._pattern = this.string_();
                    this.state = 975;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 84) {
                        {
                        this.state = 973;
                        this.match(SqlBaseParser.ESCAPE);
                        this.state = 974;
                        (localContext as ShowSessionContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 65:
                localContext = new SetSessionAuthorizationContext(localContext);
                this.enterOuterAlt(localContext, 65);
                {
                this.state = 979;
                this.match(SqlBaseParser.SET);
                this.state = 980;
                this.match(SqlBaseParser.SESSION);
                this.state = 981;
                this.match(SqlBaseParser.AUTHORIZATION);
                this.state = 982;
                this.authorizationUser();
                }
                break;
            case 66:
                localContext = new ResetSessionAuthorizationContext(localContext);
                this.enterOuterAlt(localContext, 66);
                {
                this.state = 983;
                this.match(SqlBaseParser.RESET);
                this.state = 984;
                this.match(SqlBaseParser.SESSION);
                this.state = 985;
                this.match(SqlBaseParser.AUTHORIZATION);
                }
                break;
            case 67:
                localContext = new SetSessionContext(localContext);
                this.enterOuterAlt(localContext, 67);
                {
                this.state = 986;
                this.match(SqlBaseParser.SET);
                this.state = 987;
                this.match(SqlBaseParser.SESSION);
                this.state = 988;
                this.qualifiedName();
                this.state = 989;
                this.match(SqlBaseParser.EQ);
                this.state = 990;
                this.expression();
                }
                break;
            case 68:
                localContext = new ResetSessionContext(localContext);
                this.enterOuterAlt(localContext, 68);
                {
                this.state = 992;
                this.match(SqlBaseParser.RESET);
                this.state = 993;
                this.match(SqlBaseParser.SESSION);
                this.state = 994;
                this.qualifiedName();
                }
                break;
            case 69:
                localContext = new StartTransactionContext(localContext);
                this.enterOuterAlt(localContext, 69);
                {
                this.state = 995;
                this.match(SqlBaseParser.START);
                this.state = 996;
                this.match(SqlBaseParser.TRANSACTION);
                this.state = 1005;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 127 || _la === 209) {
                    {
                    this.state = 997;
                    this.transactionMode();
                    this.state = 1002;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 998;
                        this.match(SqlBaseParser.T__3);
                        this.state = 999;
                        this.transactionMode();
                        }
                        }
                        this.state = 1004;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                }
                break;
            case 70:
                localContext = new CommitContext(localContext);
                this.enterOuterAlt(localContext, 70);
                {
                this.state = 1007;
                this.match(SqlBaseParser.COMMIT);
                this.state = 1009;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 291) {
                    {
                    this.state = 1008;
                    this.match(SqlBaseParser.WORK);
                    }
                }

                }
                break;
            case 71:
                localContext = new RollbackContext(localContext);
                this.enterOuterAlt(localContext, 71);
                {
                this.state = 1011;
                this.match(SqlBaseParser.ROLLBACK);
                this.state = 1013;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 291) {
                    {
                    this.state = 1012;
                    this.match(SqlBaseParser.WORK);
                    }
                }

                }
                break;
            case 72:
                localContext = new PrepareContext(localContext);
                this.enterOuterAlt(localContext, 72);
                {
                this.state = 1015;
                this.match(SqlBaseParser.PREPARE);
                this.state = 1016;
                this.identifier();
                this.state = 1017;
                this.match(SqlBaseParser.FROM);
                this.state = 1018;
                this.statement();
                }
                break;
            case 73:
                localContext = new DeallocateContext(localContext);
                this.enterOuterAlt(localContext, 73);
                {
                this.state = 1020;
                this.match(SqlBaseParser.DEALLOCATE);
                this.state = 1021;
                this.match(SqlBaseParser.PREPARE);
                this.state = 1022;
                this.identifier();
                }
                break;
            case 74:
                localContext = new ExecuteContext(localContext);
                this.enterOuterAlt(localContext, 74);
                {
                this.state = 1023;
                this.match(SqlBaseParser.EXECUTE);
                this.state = 1024;
                this.identifier();
                this.state = 1034;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 275) {
                    {
                    this.state = 1025;
                    this.match(SqlBaseParser.USING);
                    this.state = 1026;
                    this.expression();
                    this.state = 1031;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 1027;
                        this.match(SqlBaseParser.T__3);
                        this.state = 1028;
                        this.expression();
                        }
                        }
                        this.state = 1033;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                }
                break;
            case 75:
                localContext = new ExecuteImmediateContext(localContext);
                this.enterOuterAlt(localContext, 75);
                {
                this.state = 1036;
                this.match(SqlBaseParser.EXECUTE);
                this.state = 1037;
                this.match(SqlBaseParser.IMMEDIATE);
                this.state = 1038;
                this.string_();
                this.state = 1048;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 275) {
                    {
                    this.state = 1039;
                    this.match(SqlBaseParser.USING);
                    this.state = 1040;
                    this.expression();
                    this.state = 1045;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 1041;
                        this.match(SqlBaseParser.T__3);
                        this.state = 1042;
                        this.expression();
                        }
                        }
                        this.state = 1047;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                }
                break;
            case 76:
                localContext = new DescribeInputContext(localContext);
                this.enterOuterAlt(localContext, 76);
                {
                this.state = 1050;
                this.match(SqlBaseParser.DESCRIBE);
                this.state = 1051;
                this.match(SqlBaseParser.INPUT);
                this.state = 1052;
                this.identifier();
                }
                break;
            case 77:
                localContext = new DescribeOutputContext(localContext);
                this.enterOuterAlt(localContext, 77);
                {
                this.state = 1053;
                this.match(SqlBaseParser.DESCRIBE);
                this.state = 1054;
                this.match(SqlBaseParser.OUTPUT);
                this.state = 1055;
                this.identifier();
                }
                break;
            case 78:
                localContext = new SetPathContext(localContext);
                this.enterOuterAlt(localContext, 78);
                {
                this.state = 1056;
                this.match(SqlBaseParser.SET);
                this.state = 1057;
                this.match(SqlBaseParser.PATH);
                this.state = 1058;
                this.pathSpecification();
                }
                break;
            case 79:
                localContext = new SetTimeZoneContext(localContext);
                this.enterOuterAlt(localContext, 79);
                {
                this.state = 1059;
                this.match(SqlBaseParser.SET);
                this.state = 1060;
                this.match(SqlBaseParser.TIME);
                this.state = 1061;
                this.match(SqlBaseParser.ZONE);
                this.state = 1064;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 111, this.context) ) {
                case 1:
                    {
                    this.state = 1062;
                    this.match(SqlBaseParser.LOCAL);
                    }
                    break;
                case 2:
                    {
                    this.state = 1063;
                    this.expression();
                    }
                    break;
                }
                }
                break;
            case 80:
                localContext = new UpdateContext(localContext);
                this.enterOuterAlt(localContext, 80);
                {
                this.state = 1066;
                this.match(SqlBaseParser.UPDATE);
                this.state = 1067;
                this.qualifiedName();
                this.state = 1068;
                this.match(SqlBaseParser.SET);
                this.state = 1069;
                this.updateAssignment();
                this.state = 1074;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1070;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1071;
                    this.updateAssignment();
                    }
                    }
                    this.state = 1076;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1079;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 286) {
                    {
                    this.state = 1077;
                    this.match(SqlBaseParser.WHERE);
                    this.state = 1078;
                    (localContext as UpdateContext)._where = this.booleanExpression(0);
                    }
                }

                }
                break;
            case 81:
                localContext = new MergeContext(localContext);
                this.enterOuterAlt(localContext, 81);
                {
                this.state = 1081;
                this.match(SqlBaseParser.MERGE);
                this.state = 1082;
                this.match(SqlBaseParser.INTO);
                this.state = 1083;
                this.qualifiedName();
                this.state = 1088;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4252762112) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 2152136501) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4065015227) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3031934949) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4293222273) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4271765759) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 3154050559) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4260364031) !== 0) || ((((_la - 260)) & ~0x1F) === 0 && ((1 << (_la - 260)) & 3923736439) !== 0) || ((((_la - 292)) & ~0x1F) === 0 && ((1 << (_la - 292)) & 125829135) !== 0)) {
                    {
                    this.state = 1085;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 28) {
                        {
                        this.state = 1084;
                        this.match(SqlBaseParser.AS);
                        }
                    }

                    this.state = 1087;
                    this.identifier();
                    }
                }

                this.state = 1090;
                this.match(SqlBaseParser.USING);
                this.state = 1091;
                this.relation(0);
                this.state = 1092;
                this.match(SqlBaseParser.ON);
                this.state = 1093;
                this.expression();
                this.state = 1095;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 1094;
                    this.mergeCase();
                    }
                    }
                    this.state = 1097;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 285);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public query(): QueryContext {
        let localContext = new QueryContext(this.context, this.state);
        this.enterRule(localContext, 12, SqlBaseParser.RULE_query);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1102;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 288) {
                {
                this.state = 1101;
                this.with_();
                }
            }

            this.state = 1104;
            this.queryNoWith();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public with_(): WithContext {
        let localContext = new WithContext(this.context, this.state);
        this.enterRule(localContext, 14, SqlBaseParser.RULE_with);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1106;
            this.match(SqlBaseParser.WITH);
            this.state = 1108;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 210) {
                {
                this.state = 1107;
                this.match(SqlBaseParser.RECURSIVE);
                }
            }

            this.state = 1110;
            this.namedQuery();
            this.state = 1115;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1111;
                this.match(SqlBaseParser.T__3);
                this.state = 1112;
                this.namedQuery();
                }
                }
                this.state = 1117;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableElement(): TableElementContext {
        let localContext = new TableElementContext(this.context, this.state);
        this.enterRule(localContext, 16, SqlBaseParser.RULE_tableElement);
        try {
            this.state = 1120;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.ABSENT:
            case SqlBaseParser.ADD:
            case SqlBaseParser.ADMIN:
            case SqlBaseParser.AFTER:
            case SqlBaseParser.ALL:
            case SqlBaseParser.ANALYZE:
            case SqlBaseParser.ANY:
            case SqlBaseParser.ARRAY:
            case SqlBaseParser.ASC:
            case SqlBaseParser.AT:
            case SqlBaseParser.AUTHORIZATION:
            case SqlBaseParser.BERNOULLI:
            case SqlBaseParser.BOTH:
            case SqlBaseParser.CALL:
            case SqlBaseParser.CASCADE:
            case SqlBaseParser.CATALOG:
            case SqlBaseParser.CATALOGS:
            case SqlBaseParser.COLUMN:
            case SqlBaseParser.COLUMNS:
            case SqlBaseParser.COMMENT:
            case SqlBaseParser.COMMIT:
            case SqlBaseParser.COMMITTED:
            case SqlBaseParser.CONDITIONAL:
            case SqlBaseParser.COUNT:
            case SqlBaseParser.COPARTITION:
            case SqlBaseParser.CURRENT:
            case SqlBaseParser.DATA:
            case SqlBaseParser.DATE:
            case SqlBaseParser.DAY:
            case SqlBaseParser.DEFAULT:
            case SqlBaseParser.DEFINE:
            case SqlBaseParser.DEFINER:
            case SqlBaseParser.DENY:
            case SqlBaseParser.DESC:
            case SqlBaseParser.DESCRIPTOR:
            case SqlBaseParser.DISTRIBUTED:
            case SqlBaseParser.DOUBLE:
            case SqlBaseParser.EMPTY:
            case SqlBaseParser.ENCODING:
            case SqlBaseParser.ERROR:
            case SqlBaseParser.EXCLUDING:
            case SqlBaseParser.EXPLAIN:
            case SqlBaseParser.FETCH:
            case SqlBaseParser.FILTER:
            case SqlBaseParser.FINAL:
            case SqlBaseParser.FIRST:
            case SqlBaseParser.FOLLOWING:
            case SqlBaseParser.FORMAT:
            case SqlBaseParser.FUNCTIONS:
            case SqlBaseParser.GRACE:
            case SqlBaseParser.GRANT:
            case SqlBaseParser.GRANTED:
            case SqlBaseParser.GRANTS:
            case SqlBaseParser.GRAPHVIZ:
            case SqlBaseParser.GROUPS:
            case SqlBaseParser.HOUR:
            case SqlBaseParser.IF:
            case SqlBaseParser.IGNORE:
            case SqlBaseParser.IMMEDIATE:
            case SqlBaseParser.INCLUDING:
            case SqlBaseParser.INITIAL:
            case SqlBaseParser.INPUT:
            case SqlBaseParser.INTERVAL:
            case SqlBaseParser.INVOKER:
            case SqlBaseParser.IO:
            case SqlBaseParser.ISOLATION:
            case SqlBaseParser.JSON:
            case SqlBaseParser.KEEP:
            case SqlBaseParser.KEY:
            case SqlBaseParser.KEYS:
            case SqlBaseParser.LAST:
            case SqlBaseParser.LATERAL:
            case SqlBaseParser.LEADING:
            case SqlBaseParser.LEVEL:
            case SqlBaseParser.LIMIT:
            case SqlBaseParser.LOCAL:
            case SqlBaseParser.LOGICAL:
            case SqlBaseParser.MAP:
            case SqlBaseParser.MATCH:
            case SqlBaseParser.MATCHED:
            case SqlBaseParser.MATCHES:
            case SqlBaseParser.MATCH_RECOGNIZE:
            case SqlBaseParser.MATERIALIZED:
            case SqlBaseParser.MEASURES:
            case SqlBaseParser.MERGE:
            case SqlBaseParser.MINUTE:
            case SqlBaseParser.MONTH:
            case SqlBaseParser.NESTED:
            case SqlBaseParser.NEXT:
            case SqlBaseParser.NFC:
            case SqlBaseParser.NFD:
            case SqlBaseParser.NFKC:
            case SqlBaseParser.NFKD:
            case SqlBaseParser.NO:
            case SqlBaseParser.NONE:
            case SqlBaseParser.NULLIF:
            case SqlBaseParser.NULLS:
            case SqlBaseParser.OBJECT:
            case SqlBaseParser.OF:
            case SqlBaseParser.OFFSET:
            case SqlBaseParser.OMIT:
            case SqlBaseParser.ONE:
            case SqlBaseParser.ONLY:
            case SqlBaseParser.OPTION:
            case SqlBaseParser.ORDINALITY:
            case SqlBaseParser.OUTPUT:
            case SqlBaseParser.OVER:
            case SqlBaseParser.OVERFLOW:
            case SqlBaseParser.PARTITION:
            case SqlBaseParser.PARTITIONS:
            case SqlBaseParser.PASSING:
            case SqlBaseParser.PAST:
            case SqlBaseParser.PATH:
            case SqlBaseParser.PATTERN:
            case SqlBaseParser.PER:
            case SqlBaseParser.PERIOD:
            case SqlBaseParser.PERMUTE:
            case SqlBaseParser.PLAN:
            case SqlBaseParser.POSITION:
            case SqlBaseParser.PRECEDING:
            case SqlBaseParser.PRECISION:
            case SqlBaseParser.PRIVILEGES:
            case SqlBaseParser.PROPERTIES:
            case SqlBaseParser.PRUNE:
            case SqlBaseParser.QUOTES:
            case SqlBaseParser.RANGE:
            case SqlBaseParser.READ:
            case SqlBaseParser.REFRESH:
            case SqlBaseParser.RENAME:
            case SqlBaseParser.REPEATABLE:
            case SqlBaseParser.REPLACE:
            case SqlBaseParser.RESET:
            case SqlBaseParser.RESPECT:
            case SqlBaseParser.RESTRICT:
            case SqlBaseParser.RETURNING:
            case SqlBaseParser.REVOKE:
            case SqlBaseParser.ROLE:
            case SqlBaseParser.ROLES:
            case SqlBaseParser.ROLLBACK:
            case SqlBaseParser.ROW:
            case SqlBaseParser.ROWS:
            case SqlBaseParser.RUNNING:
            case SqlBaseParser.SCALAR:
            case SqlBaseParser.SCHEMA:
            case SqlBaseParser.SCHEMAS:
            case SqlBaseParser.SECOND:
            case SqlBaseParser.SECURITY:
            case SqlBaseParser.SEEK:
            case SqlBaseParser.SERIALIZABLE:
            case SqlBaseParser.SESSION:
            case SqlBaseParser.SET:
            case SqlBaseParser.SETS:
            case SqlBaseParser.SHOW:
            case SqlBaseParser.SOME:
            case SqlBaseParser.START:
            case SqlBaseParser.STATS:
            case SqlBaseParser.SUBSET:
            case SqlBaseParser.SUBSTRING:
            case SqlBaseParser.SYSTEM:
            case SqlBaseParser.TABLES:
            case SqlBaseParser.TABLESAMPLE:
            case SqlBaseParser.TEXT:
            case SqlBaseParser.TEXT_STRING:
            case SqlBaseParser.TIES:
            case SqlBaseParser.TIME:
            case SqlBaseParser.TIMESTAMP:
            case SqlBaseParser.TO:
            case SqlBaseParser.TRAILING:
            case SqlBaseParser.TRANSACTION:
            case SqlBaseParser.TRUNCATE:
            case SqlBaseParser.TRY_CAST:
            case SqlBaseParser.TYPE:
            case SqlBaseParser.UNBOUNDED:
            case SqlBaseParser.UNCOMMITTED:
            case SqlBaseParser.UNCONDITIONAL:
            case SqlBaseParser.UNIQUE:
            case SqlBaseParser.UNKNOWN:
            case SqlBaseParser.UNMATCHED:
            case SqlBaseParser.UPDATE:
            case SqlBaseParser.USE:
            case SqlBaseParser.USER:
            case SqlBaseParser.UTF16:
            case SqlBaseParser.UTF32:
            case SqlBaseParser.UTF8:
            case SqlBaseParser.VALIDATE:
            case SqlBaseParser.VALUE:
            case SqlBaseParser.VERBOSE:
            case SqlBaseParser.VERSION:
            case SqlBaseParser.VIEW:
            case SqlBaseParser.WINDOW:
            case SqlBaseParser.WITHIN:
            case SqlBaseParser.WITHOUT:
            case SqlBaseParser.WORK:
            case SqlBaseParser.WRAPPER:
            case SqlBaseParser.WRITE:
            case SqlBaseParser.YEAR:
            case SqlBaseParser.ZONE:
            case SqlBaseParser.IDENTIFIER:
            case SqlBaseParser.DIGIT_IDENTIFIER:
            case SqlBaseParser.QUOTED_IDENTIFIER:
            case SqlBaseParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1118;
                this.columnDefinition();
                }
                break;
            case SqlBaseParser.LIKE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1119;
                this.likeClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnDefinition(): ColumnDefinitionContext {
        let localContext = new ColumnDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 18, SqlBaseParser.RULE_columnDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1122;
            this.qualifiedName();
            this.state = 1123;
            this.type_(0);
            this.state = 1126;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 171) {
                {
                this.state = 1124;
                this.match(SqlBaseParser.NOT);
                this.state = 1125;
                this.match(SqlBaseParser.NULL);
                }
            }

            this.state = 1130;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 44) {
                {
                this.state = 1128;
                this.match(SqlBaseParser.COMMENT);
                this.state = 1129;
                this.string_();
                }
            }

            this.state = 1134;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 288) {
                {
                this.state = 1132;
                this.match(SqlBaseParser.WITH);
                this.state = 1133;
                this.properties();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public likeClause(): LikeClauseContext {
        let localContext = new LikeClauseContext(this.context, this.state);
        this.enterRule(localContext, 20, SqlBaseParser.RULE_likeClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1136;
            this.match(SqlBaseParser.LIKE);
            this.state = 1137;
            this.qualifiedName();
            this.state = 1140;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 86 || _la === 116) {
                {
                this.state = 1138;
                localContext._optionType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 86 || _la === 116)) {
                    localContext._optionType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1139;
                this.match(SqlBaseParser.PROPERTIES);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public properties(): PropertiesContext {
        let localContext = new PropertiesContext(this.context, this.state);
        this.enterRule(localContext, 22, SqlBaseParser.RULE_properties);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1142;
            this.match(SqlBaseParser.T__1);
            this.state = 1143;
            this.propertyAssignments();
            this.state = 1144;
            this.match(SqlBaseParser.T__2);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyAssignments(): PropertyAssignmentsContext {
        let localContext = new PropertyAssignmentsContext(this.context, this.state);
        this.enterRule(localContext, 24, SqlBaseParser.RULE_propertyAssignments);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1146;
            this.property();
            this.state = 1151;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1147;
                this.match(SqlBaseParser.T__3);
                this.state = 1148;
                this.property();
                }
                }
                this.state = 1153;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public property(): PropertyContext {
        let localContext = new PropertyContext(this.context, this.state);
        this.enterRule(localContext, 26, SqlBaseParser.RULE_property);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1154;
            this.identifier();
            this.state = 1155;
            this.match(SqlBaseParser.EQ);
            this.state = 1156;
            this.propertyValue();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyValue(): PropertyValueContext {
        let localContext = new PropertyValueContext(this.context, this.state);
        this.enterRule(localContext, 28, SqlBaseParser.RULE_propertyValue);
        try {
            this.state = 1160;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 127, this.context) ) {
            case 1:
                localContext = new DefaultPropertyValueContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1158;
                this.match(SqlBaseParser.DEFAULT);
                }
                break;
            case 2:
                localContext = new NonDefaultPropertyValueContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1159;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryNoWith(): QueryNoWithContext {
        let localContext = new QueryNoWithContext(this.context, this.state);
        this.enterRule(localContext, 30, SqlBaseParser.RULE_queryNoWith);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1162;
            this.queryTerm(0);
            this.state = 1173;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 184) {
                {
                this.state = 1163;
                this.match(SqlBaseParser.ORDER);
                this.state = 1164;
                this.match(SqlBaseParser.BY);
                this.state = 1165;
                this.sortItem();
                this.state = 1170;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1166;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1167;
                    this.sortItem();
                    }
                    }
                    this.state = 1172;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 1180;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 177) {
                {
                this.state = 1175;
                this.match(SqlBaseParser.OFFSET);
                this.state = 1176;
                localContext._offset = this.rowCount();
                this.state = 1178;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225 || _la === 226) {
                    {
                    this.state = 1177;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 225 || _la === 226)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
            }

            this.state = 1195;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.LIMIT:
                {
                {
                this.state = 1182;
                this.match(SqlBaseParser.LIMIT);
                this.state = 1183;
                localContext._limit = this.limitRowCount();
                }
                }
                break;
            case SqlBaseParser.FETCH:
                {
                {
                this.state = 1184;
                this.match(SqlBaseParser.FETCH);
                this.state = 1185;
                _la = this.tokenStream.LA(1);
                if(!(_la === 95 || _la === 163)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1187;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 308 || _la === 312) {
                    {
                    this.state = 1186;
                    localContext._fetchFirst = this.rowCount();
                    }
                }

                this.state = 1189;
                _la = this.tokenStream.LA(1);
                if(!(_la === 225 || _la === 226)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1193;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlBaseParser.ONLY:
                    {
                    this.state = 1190;
                    this.match(SqlBaseParser.ONLY);
                    }
                    break;
                case SqlBaseParser.WITH:
                    {
                    this.state = 1191;
                    this.match(SqlBaseParser.WITH);
                    this.state = 1192;
                    this.match(SqlBaseParser.TIES);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                }
                break;
            case SqlBaseParser.EOF:
            case SqlBaseParser.T__2:
            case SqlBaseParser.WITH:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitRowCount(): LimitRowCountContext {
        let localContext = new LimitRowCountContext(this.context, this.state);
        this.enterRule(localContext, 32, SqlBaseParser.RULE_limitRowCount);
        try {
            this.state = 1199;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.ALL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1197;
                this.match(SqlBaseParser.ALL);
                }
                break;
            case SqlBaseParser.QUESTION_MARK:
            case SqlBaseParser.INTEGER_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1198;
                this.rowCount();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowCount(): RowCountContext {
        let localContext = new RowCountContext(this.context, this.state);
        this.enterRule(localContext, 34, SqlBaseParser.RULE_rowCount);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1201;
            _la = this.tokenStream.LA(1);
            if(!(_la === 308 || _la === 312)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public queryTerm(): QueryTermContext;
    public queryTerm(_p: number): QueryTermContext;
    public queryTerm(_p?: number): QueryTermContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new QueryTermContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 36;
        this.enterRecursionRule(localContext, 36, SqlBaseParser.RULE_queryTerm, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            localContext = new QueryTermDefaultContext(localContext);
            this.context = localContext;
            previousContext = localContext;

            this.state = 1204;
            this.queryPrimary();
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 1220;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 139, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 1218;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 138, this.context) ) {
                    case 1:
                        {
                        localContext = new SetOperationContext(new QueryTermContext(parentContext, parentState));
                        (localContext as SetOperationContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SqlBaseParser.RULE_queryTerm);
                        this.state = 1206;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 1207;
                        (localContext as SetOperationContext)._operator = this.match(SqlBaseParser.INTERSECT);
                        this.state = 1209;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 22 || _la === 75) {
                            {
                            this.state = 1208;
                            this.setQuantifier();
                            }
                        }

                        this.state = 1211;
                        (localContext as SetOperationContext)._right = this.queryTerm(3);
                        }
                        break;
                    case 2:
                        {
                        localContext = new SetOperationContext(new QueryTermContext(parentContext, parentState));
                        (localContext as SetOperationContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SqlBaseParser.RULE_queryTerm);
                        this.state = 1212;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 1213;
                        (localContext as SetOperationContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 85 || _la === 267)) {
                            (localContext as SetOperationContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 1215;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 22 || _la === 75) {
                            {
                            this.state = 1214;
                            this.setQuantifier();
                            }
                        }

                        this.state = 1217;
                        (localContext as SetOperationContext)._right = this.queryTerm(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 1222;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 139, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public queryPrimary(): QueryPrimaryContext {
        let localContext = new QueryPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 38, SqlBaseParser.RULE_queryPrimary);
        try {
            let alternative: number;
            this.state = 1239;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.SELECT:
                localContext = new QueryPrimaryDefaultContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1223;
                this.querySpecification();
                }
                break;
            case SqlBaseParser.TABLE:
                localContext = new TableContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1224;
                this.match(SqlBaseParser.TABLE);
                this.state = 1225;
                this.qualifiedName();
                }
                break;
            case SqlBaseParser.VALUES:
                localContext = new InlineTableContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1226;
                this.match(SqlBaseParser.VALUES);
                this.state = 1227;
                this.expression();
                this.state = 1232;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 140, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1228;
                        this.match(SqlBaseParser.T__3);
                        this.state = 1229;
                        this.expression();
                        }
                        }
                    }
                    this.state = 1234;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 140, this.context);
                }
                }
                break;
            case SqlBaseParser.T__1:
                localContext = new SubqueryContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1235;
                this.match(SqlBaseParser.T__1);
                this.state = 1236;
                this.queryNoWith();
                this.state = 1237;
                this.match(SqlBaseParser.T__2);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortItem(): SortItemContext {
        let localContext = new SortItemContext(this.context, this.state);
        this.enterRule(localContext, 40, SqlBaseParser.RULE_sortItem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1241;
            this.expression();
            this.state = 1243;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 29 || _la === 72) {
                {
                this.state = 1242;
                localContext._ordering = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 29 || _la === 72)) {
                    localContext._ordering = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 1247;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 174) {
                {
                this.state = 1245;
                this.match(SqlBaseParser.NULLS);
                this.state = 1246;
                localContext._nullOrdering = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 95 || _la === 139)) {
                    localContext._nullOrdering = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public querySpecification(): QuerySpecificationContext {
        let localContext = new QuerySpecificationContext(this.context, this.state);
        this.enterRule(localContext, 42, SqlBaseParser.RULE_querySpecification);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1249;
            this.match(SqlBaseParser.SELECT);
            this.state = 1251;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 144, this.context) ) {
            case 1:
                {
                this.state = 1250;
                this.setQuantifier();
                }
                break;
            }
            this.state = 1253;
            this.selectItem();
            this.state = 1258;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 145, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1254;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1255;
                    this.selectItem();
                    }
                    }
                }
                this.state = 1260;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 145, this.context);
            }
            this.state = 1270;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 147, this.context) ) {
            case 1:
                {
                this.state = 1261;
                this.match(SqlBaseParser.FROM);
                this.state = 1262;
                this.relation(0);
                this.state = 1267;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 146, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1263;
                        this.match(SqlBaseParser.T__3);
                        this.state = 1264;
                        this.relation(0);
                        }
                        }
                    }
                    this.state = 1269;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 146, this.context);
                }
                }
                break;
            }
            this.state = 1274;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 148, this.context) ) {
            case 1:
                {
                this.state = 1272;
                this.match(SqlBaseParser.WHERE);
                this.state = 1273;
                localContext._where = this.booleanExpression(0);
                }
                break;
            }
            this.state = 1279;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 149, this.context) ) {
            case 1:
                {
                this.state = 1276;
                this.match(SqlBaseParser.GROUP);
                this.state = 1277;
                this.match(SqlBaseParser.BY);
                this.state = 1278;
                this.groupBy();
                }
                break;
            }
            this.state = 1283;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 150, this.context) ) {
            case 1:
                {
                this.state = 1281;
                this.match(SqlBaseParser.HAVING);
                this.state = 1282;
                localContext._having = this.booleanExpression(0);
                }
                break;
            }
            this.state = 1294;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 152, this.context) ) {
            case 1:
                {
                this.state = 1285;
                this.match(SqlBaseParser.WINDOW);
                this.state = 1286;
                this.windowDefinition();
                this.state = 1291;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 151, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1287;
                        this.match(SqlBaseParser.T__3);
                        this.state = 1288;
                        this.windowDefinition();
                        }
                        }
                    }
                    this.state = 1293;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 151, this.context);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupBy(): GroupByContext {
        let localContext = new GroupByContext(this.context, this.state);
        this.enterRule(localContext, 44, SqlBaseParser.RULE_groupBy);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1297;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 153, this.context) ) {
            case 1:
                {
                this.state = 1296;
                this.setQuantifier();
                }
                break;
            }
            this.state = 1299;
            this.groupingElement();
            this.state = 1304;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 154, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1300;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1301;
                    this.groupingElement();
                    }
                    }
                }
                this.state = 1306;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 154, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingElement(): GroupingElementContext {
        let localContext = new GroupingElementContext(this.context, this.state);
        this.enterRule(localContext, 46, SqlBaseParser.RULE_groupingElement);
        let _la: number;
        try {
            this.state = 1347;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 160, this.context) ) {
            case 1:
                localContext = new SingleGroupingSetContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1307;
                this.groupingSet();
                }
                break;
            case 2:
                localContext = new RollupContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1308;
                this.match(SqlBaseParser.ROLLUP);
                this.state = 1309;
                this.match(SqlBaseParser.T__1);
                this.state = 1318;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326660) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4224122869) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4283119035) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3031939045) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294926303) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4271767551) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 3154050559) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4260364031) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 2810043871) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 536621119) !== 0)) {
                    {
                    this.state = 1310;
                    this.groupingSet();
                    this.state = 1315;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 1311;
                        this.match(SqlBaseParser.T__3);
                        this.state = 1312;
                        this.groupingSet();
                        }
                        }
                        this.state = 1317;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1320;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 3:
                localContext = new CubeContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1321;
                this.match(SqlBaseParser.CUBE);
                this.state = 1322;
                this.match(SqlBaseParser.T__1);
                this.state = 1331;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326660) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4224122869) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4283119035) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3031939045) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294926303) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4271767551) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 3154050559) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4260364031) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 2810043871) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 536621119) !== 0)) {
                    {
                    this.state = 1323;
                    this.groupingSet();
                    this.state = 1328;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 1324;
                        this.match(SqlBaseParser.T__3);
                        this.state = 1325;
                        this.groupingSet();
                        }
                        }
                        this.state = 1330;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1333;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 4:
                localContext = new MultipleGroupingSetsContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1334;
                this.match(SqlBaseParser.GROUPING);
                this.state = 1335;
                this.match(SqlBaseParser.SETS);
                this.state = 1336;
                this.match(SqlBaseParser.T__1);
                this.state = 1337;
                this.groupingSet();
                this.state = 1342;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1338;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1339;
                    this.groupingSet();
                    }
                    }
                    this.state = 1344;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1345;
                this.match(SqlBaseParser.T__2);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingSet(): GroupingSetContext {
        let localContext = new GroupingSetContext(this.context, this.state);
        this.enterRule(localContext, 48, SqlBaseParser.RULE_groupingSet);
        let _la: number;
        try {
            this.state = 1362;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 163, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1349;
                this.match(SqlBaseParser.T__1);
                this.state = 1358;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326660) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4224122869) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4283119035) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3031939045) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294926303) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4271767551) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 3154050559) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4260364031) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 2810043871) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 536621119) !== 0)) {
                    {
                    this.state = 1350;
                    this.expression();
                    this.state = 1355;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 1351;
                        this.match(SqlBaseParser.T__3);
                        this.state = 1352;
                        this.expression();
                        }
                        }
                        this.state = 1357;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1360;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1361;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowDefinition(): WindowDefinitionContext {
        let localContext = new WindowDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 50, SqlBaseParser.RULE_windowDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1364;
            localContext._name = this.identifier();
            this.state = 1365;
            this.match(SqlBaseParser.AS);
            this.state = 1366;
            this.match(SqlBaseParser.T__1);
            this.state = 1367;
            this.windowSpecification();
            this.state = 1368;
            this.match(SqlBaseParser.T__2);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowSpecification(): WindowSpecificationContext {
        let localContext = new WindowSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 52, SqlBaseParser.RULE_windowSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1371;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 164, this.context) ) {
            case 1:
                {
                this.state = 1370;
                localContext._existingWindowName = this.identifier();
                }
                break;
            }
            this.state = 1383;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 190) {
                {
                this.state = 1373;
                this.match(SqlBaseParser.PARTITION);
                this.state = 1374;
                this.match(SqlBaseParser.BY);
                this.state = 1375;
                localContext._expression = this.expression();
                localContext._partition.push(localContext._expression!);
                this.state = 1380;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1376;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1377;
                    localContext._expression = this.expression();
                    localContext._partition.push(localContext._expression!);
                    }
                    }
                    this.state = 1382;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 1395;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 184) {
                {
                this.state = 1385;
                this.match(SqlBaseParser.ORDER);
                this.state = 1386;
                this.match(SqlBaseParser.BY);
                this.state = 1387;
                this.sortItem();
                this.state = 1392;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1388;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1389;
                    this.sortItem();
                    }
                    }
                    this.state = 1394;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 1398;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 109 || _la === 157 || _la === 208 || _la === 226) {
                {
                this.state = 1397;
                this.windowFrame();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedQuery(): NamedQueryContext {
        let localContext = new NamedQueryContext(this.context, this.state);
        this.enterRule(localContext, 54, SqlBaseParser.RULE_namedQuery);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1400;
            localContext._name = this.identifier();
            this.state = 1402;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 1401;
                this.columnAliases();
                }
            }

            this.state = 1404;
            this.match(SqlBaseParser.AS);
            this.state = 1405;
            this.match(SqlBaseParser.T__1);
            this.state = 1406;
            this.query();
            this.state = 1407;
            this.match(SqlBaseParser.T__2);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setQuantifier(): SetQuantifierContext {
        let localContext = new SetQuantifierContext(this.context, this.state);
        this.enterRule(localContext, 56, SqlBaseParser.RULE_setQuantifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1409;
            _la = this.tokenStream.LA(1);
            if(!(_la === 22 || _la === 75)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectItem(): SelectItemContext {
        let localContext = new SelectItemContext(this.context, this.state);
        this.enterRule(localContext, 58, SqlBaseParser.RULE_selectItem);
        let _la: number;
        try {
            this.state = 1426;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 174, this.context) ) {
            case 1:
                localContext = new SelectSingleContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1411;
                this.expression();
                this.state = 1416;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 172, this.context) ) {
                case 1:
                    {
                    this.state = 1413;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 28) {
                        {
                        this.state = 1412;
                        this.match(SqlBaseParser.AS);
                        }
                    }

                    this.state = 1415;
                    this.identifier();
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new SelectAllContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1418;
                this.primaryExpression(0);
                this.state = 1419;
                this.match(SqlBaseParser.T__0);
                this.state = 1420;
                this.match(SqlBaseParser.ASTERISK);
                this.state = 1423;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 173, this.context) ) {
                case 1:
                    {
                    this.state = 1421;
                    this.match(SqlBaseParser.AS);
                    this.state = 1422;
                    this.columnAliases();
                    }
                    break;
                }
                }
                break;
            case 3:
                localContext = new SelectAllContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1425;
                this.match(SqlBaseParser.ASTERISK);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public relation(): RelationContext;
    public relation(_p: number): RelationContext;
    public relation(_p?: number): RelationContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new RelationContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 60;
        this.enterRecursionRule(localContext, 60, SqlBaseParser.RULE_relation, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            localContext = new RelationDefaultContext(localContext);
            this.context = localContext;
            previousContext = localContext;

            this.state = 1429;
            this.sampledRelation();
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 1449;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 176, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    {
                    localContext = new JoinRelationContext(new RelationContext(parentContext, parentState));
                    (localContext as JoinRelationContext)._left = previousContext;
                    this.pushNewRecursionContext(localContext, _startState, SqlBaseParser.RULE_relation);
                    this.state = 1431;
                    if (!(this.precpred(this.context, 2))) {
                        throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                    }
                    this.state = 1445;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case SqlBaseParser.CROSS:
                        {
                        this.state = 1432;
                        this.match(SqlBaseParser.CROSS);
                        this.state = 1433;
                        this.match(SqlBaseParser.JOIN);
                        this.state = 1434;
                        (localContext as JoinRelationContext)._right = this.sampledRelation();
                        }
                        break;
                    case SqlBaseParser.FULL:
                    case SqlBaseParser.INNER:
                    case SqlBaseParser.JOIN:
                    case SqlBaseParser.LEFT:
                    case SqlBaseParser.RIGHT:
                        {
                        this.state = 1435;
                        this.joinType();
                        this.state = 1436;
                        this.match(SqlBaseParser.JOIN);
                        this.state = 1437;
                        (localContext as JoinRelationContext)._rightRelation = this.relation(0);
                        this.state = 1438;
                        this.joinCriteria();
                        }
                        break;
                    case SqlBaseParser.NATURAL:
                        {
                        this.state = 1440;
                        this.match(SqlBaseParser.NATURAL);
                        this.state = 1441;
                        this.joinType();
                        this.state = 1442;
                        this.match(SqlBaseParser.JOIN);
                        this.state = 1443;
                        (localContext as JoinRelationContext)._right = this.sampledRelation();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    }
                }
                this.state = 1451;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 176, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public joinType(): JoinTypeContext {
        let localContext = new JoinTypeContext(this.context, this.state);
        this.enterRule(localContext, 62, SqlBaseParser.RULE_joinType);
        let _la: number;
        try {
            this.state = 1467;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.INNER:
            case SqlBaseParser.JOIN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1453;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 118) {
                    {
                    this.state = 1452;
                    this.match(SqlBaseParser.INNER);
                    }
                }

                }
                break;
            case SqlBaseParser.LEFT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1455;
                this.match(SqlBaseParser.LEFT);
                this.state = 1457;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 186) {
                    {
                    this.state = 1456;
                    this.match(SqlBaseParser.OUTER);
                    }
                }

                }
                break;
            case SqlBaseParser.RIGHT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1459;
                this.match(SqlBaseParser.RIGHT);
                this.state = 1461;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 186) {
                    {
                    this.state = 1460;
                    this.match(SqlBaseParser.OUTER);
                    }
                }

                }
                break;
            case SqlBaseParser.FULL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1463;
                this.match(SqlBaseParser.FULL);
                this.state = 1465;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 186) {
                    {
                    this.state = 1464;
                    this.match(SqlBaseParser.OUTER);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinCriteria(): JoinCriteriaContext {
        let localContext = new JoinCriteriaContext(this.context, this.state);
        this.enterRule(localContext, 64, SqlBaseParser.RULE_joinCriteria);
        let _la: number;
        try {
            this.state = 1483;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.ON:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1469;
                this.match(SqlBaseParser.ON);
                this.state = 1470;
                this.booleanExpression(0);
                }
                break;
            case SqlBaseParser.USING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1471;
                this.match(SqlBaseParser.USING);
                this.state = 1472;
                this.match(SqlBaseParser.T__1);
                this.state = 1473;
                this.identifier();
                this.state = 1478;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1474;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1475;
                    this.identifier();
                    }
                    }
                    this.state = 1480;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1481;
                this.match(SqlBaseParser.T__2);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampledRelation(): SampledRelationContext {
        let localContext = new SampledRelationContext(this.context, this.state);
        this.enterRule(localContext, 66, SqlBaseParser.RULE_sampledRelation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1485;
            this.patternRecognition();
            this.state = 1492;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 184, this.context) ) {
            case 1:
                {
                this.state = 1486;
                this.match(SqlBaseParser.TABLESAMPLE);
                this.state = 1487;
                this.sampleType();
                this.state = 1488;
                this.match(SqlBaseParser.T__1);
                this.state = 1489;
                localContext._percentage = this.expression();
                this.state = 1490;
                this.match(SqlBaseParser.T__2);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampleType(): SampleTypeContext {
        let localContext = new SampleTypeContext(this.context, this.state);
        this.enterRule(localContext, 68, SqlBaseParser.RULE_sampleType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1494;
            _la = this.tokenStream.LA(1);
            if(!(_la === 32 || _la === 245)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trimsSpecification(): TrimsSpecificationContext {
        let localContext = new TrimsSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 70, SqlBaseParser.RULE_trimsSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1496;
            _la = this.tokenStream.LA(1);
            if(!(_la === 34 || _la === 141 || _la === 256)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listAggOverflowBehavior(): ListAggOverflowBehaviorContext {
        let localContext = new ListAggOverflowBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 72, SqlBaseParser.RULE_listAggOverflowBehavior);
        let _la: number;
        try {
            this.state = 1504;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.ERROR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1498;
                this.match(SqlBaseParser.ERROR);
                }
                break;
            case SqlBaseParser.TRUNCATE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1499;
                this.match(SqlBaseParser.TRUNCATE);
                this.state = 1501;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 309 || _la === 310) {
                    {
                    this.state = 1500;
                    this.string_();
                    }
                }

                this.state = 1503;
                this.listaggCountIndication();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listaggCountIndication(): ListaggCountIndicationContext {
        let localContext = new ListaggCountIndicationContext(this.context, this.state);
        this.enterRule(localContext, 74, SqlBaseParser.RULE_listaggCountIndication);
        try {
            this.state = 1510;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.WITH:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1506;
                this.match(SqlBaseParser.WITH);
                this.state = 1507;
                this.match(SqlBaseParser.COUNT);
                }
                break;
            case SqlBaseParser.WITHOUT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1508;
                this.match(SqlBaseParser.WITHOUT);
                this.state = 1509;
                this.match(SqlBaseParser.COUNT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public patternRecognition(): PatternRecognitionContext {
        let localContext = new PatternRecognitionContext(this.context, this.state);
        this.enterRule(localContext, 76, SqlBaseParser.RULE_patternRecognition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1512;
            this.aliasedRelation();
            this.state = 1595;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 203, this.context) ) {
            case 1:
                {
                this.state = 1513;
                this.match(SqlBaseParser.MATCH_RECOGNIZE);
                this.state = 1514;
                this.match(SqlBaseParser.T__1);
                this.state = 1525;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 190) {
                    {
                    this.state = 1515;
                    this.match(SqlBaseParser.PARTITION);
                    this.state = 1516;
                    this.match(SqlBaseParser.BY);
                    this.state = 1517;
                    localContext._expression = this.expression();
                    localContext._partition.push(localContext._expression!);
                    this.state = 1522;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 1518;
                        this.match(SqlBaseParser.T__3);
                        this.state = 1519;
                        localContext._expression = this.expression();
                        localContext._partition.push(localContext._expression!);
                        }
                        }
                        this.state = 1524;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1537;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 184) {
                    {
                    this.state = 1527;
                    this.match(SqlBaseParser.ORDER);
                    this.state = 1528;
                    this.match(SqlBaseParser.BY);
                    this.state = 1529;
                    this.sortItem();
                    this.state = 1534;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 1530;
                        this.match(SqlBaseParser.T__3);
                        this.state = 1531;
                        this.sortItem();
                        }
                        }
                        this.state = 1536;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1548;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 157) {
                    {
                    this.state = 1539;
                    this.match(SqlBaseParser.MEASURES);
                    this.state = 1540;
                    this.measureDefinition();
                    this.state = 1545;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 1541;
                        this.match(SqlBaseParser.T__3);
                        this.state = 1542;
                        this.measureDefinition();
                        }
                        }
                        this.state = 1547;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1551;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 22 || _la === 180) {
                    {
                    this.state = 1550;
                    this.rowsPerMatch();
                    }
                }

                this.state = 1556;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 21) {
                    {
                    this.state = 1553;
                    this.match(SqlBaseParser.AFTER);
                    this.state = 1554;
                    this.match(SqlBaseParser.MATCH);
                    this.state = 1555;
                    this.skipTo();
                    }
                }

                this.state = 1559;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 117 || _la === 233) {
                    {
                    this.state = 1558;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 117 || _la === 233)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1561;
                this.match(SqlBaseParser.PATTERN);
                this.state = 1562;
                this.match(SqlBaseParser.T__1);
                this.state = 1563;
                this.rowPattern(0);
                this.state = 1564;
                this.match(SqlBaseParser.T__2);
                this.state = 1574;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 243) {
                    {
                    this.state = 1565;
                    this.match(SqlBaseParser.SUBSET);
                    this.state = 1566;
                    this.subsetDefinition();
                    this.state = 1571;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 1567;
                        this.match(SqlBaseParser.T__3);
                        this.state = 1568;
                        this.subsetDefinition();
                        }
                        }
                        this.state = 1573;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1576;
                this.match(SqlBaseParser.DEFINE);
                this.state = 1577;
                this.variableDefinition();
                this.state = 1582;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1578;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1579;
                    this.variableDefinition();
                    }
                    }
                    this.state = 1584;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1585;
                this.match(SqlBaseParser.T__2);
                this.state = 1593;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 202, this.context) ) {
                case 1:
                    {
                    this.state = 1587;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 28) {
                        {
                        this.state = 1586;
                        this.match(SqlBaseParser.AS);
                        }
                    }

                    this.state = 1589;
                    this.identifier();
                    this.state = 1591;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 201, this.context) ) {
                    case 1:
                        {
                        this.state = 1590;
                        this.columnAliases();
                        }
                        break;
                    }
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public measureDefinition(): MeasureDefinitionContext {
        let localContext = new MeasureDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 78, SqlBaseParser.RULE_measureDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1597;
            this.expression();
            this.state = 1598;
            this.match(SqlBaseParser.AS);
            this.state = 1599;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowsPerMatch(): RowsPerMatchContext {
        let localContext = new RowsPerMatchContext(this.context, this.state);
        this.enterRule(localContext, 80, SqlBaseParser.RULE_rowsPerMatch);
        let _la: number;
        try {
            this.state = 1612;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.ONE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1601;
                this.match(SqlBaseParser.ONE);
                this.state = 1602;
                this.match(SqlBaseParser.ROW);
                this.state = 1603;
                this.match(SqlBaseParser.PER);
                this.state = 1604;
                this.match(SqlBaseParser.MATCH);
                }
                break;
            case SqlBaseParser.ALL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1605;
                this.match(SqlBaseParser.ALL);
                this.state = 1606;
                this.match(SqlBaseParser.ROWS);
                this.state = 1607;
                this.match(SqlBaseParser.PER);
                this.state = 1608;
                this.match(SqlBaseParser.MATCH);
                this.state = 1610;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 178 || _la === 239 || _la === 288) {
                    {
                    this.state = 1609;
                    this.emptyMatchHandling();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public emptyMatchHandling(): EmptyMatchHandlingContext {
        let localContext = new EmptyMatchHandlingContext(this.context, this.state);
        this.enterRule(localContext, 82, SqlBaseParser.RULE_emptyMatchHandling);
        try {
            this.state = 1623;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.SHOW:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1614;
                this.match(SqlBaseParser.SHOW);
                this.state = 1615;
                this.match(SqlBaseParser.EMPTY);
                this.state = 1616;
                this.match(SqlBaseParser.MATCHES);
                }
                break;
            case SqlBaseParser.OMIT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1617;
                this.match(SqlBaseParser.OMIT);
                this.state = 1618;
                this.match(SqlBaseParser.EMPTY);
                this.state = 1619;
                this.match(SqlBaseParser.MATCHES);
                }
                break;
            case SqlBaseParser.WITH:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1620;
                this.match(SqlBaseParser.WITH);
                this.state = 1621;
                this.match(SqlBaseParser.UNMATCHED);
                this.state = 1622;
                this.match(SqlBaseParser.ROWS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skipTo(): SkipToContext {
        let localContext = new SkipToContext(this.context, this.state);
        this.enterRule(localContext, 84, SqlBaseParser.RULE_skipTo);
        try {
            this.state = 1644;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 207, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1625;
                this.match(SqlBaseParser.T__4);
                this.state = 1626;
                this.match(SqlBaseParser.TO);
                this.state = 1627;
                this.match(SqlBaseParser.NEXT);
                this.state = 1628;
                this.match(SqlBaseParser.ROW);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1629;
                this.match(SqlBaseParser.T__4);
                this.state = 1630;
                this.match(SqlBaseParser.PAST);
                this.state = 1631;
                this.match(SqlBaseParser.LAST);
                this.state = 1632;
                this.match(SqlBaseParser.ROW);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1633;
                this.match(SqlBaseParser.T__4);
                this.state = 1634;
                this.match(SqlBaseParser.TO);
                this.state = 1635;
                this.match(SqlBaseParser.FIRST);
                this.state = 1636;
                this.identifier();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1637;
                this.match(SqlBaseParser.T__4);
                this.state = 1638;
                this.match(SqlBaseParser.TO);
                this.state = 1639;
                this.match(SqlBaseParser.LAST);
                this.state = 1640;
                this.identifier();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1641;
                this.match(SqlBaseParser.T__4);
                this.state = 1642;
                this.match(SqlBaseParser.TO);
                this.state = 1643;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subsetDefinition(): SubsetDefinitionContext {
        let localContext = new SubsetDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 86, SqlBaseParser.RULE_subsetDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1646;
            localContext._name = this.identifier();
            this.state = 1647;
            this.match(SqlBaseParser.EQ);
            this.state = 1648;
            this.match(SqlBaseParser.T__1);
            this.state = 1649;
            localContext._identifier = this.identifier();
            localContext._union.push(localContext._identifier!);
            this.state = 1654;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1650;
                this.match(SqlBaseParser.T__3);
                this.state = 1651;
                localContext._identifier = this.identifier();
                localContext._union.push(localContext._identifier!);
                }
                }
                this.state = 1656;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1657;
            this.match(SqlBaseParser.T__2);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variableDefinition(): VariableDefinitionContext {
        let localContext = new VariableDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 88, SqlBaseParser.RULE_variableDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1659;
            this.identifier();
            this.state = 1660;
            this.match(SqlBaseParser.AS);
            this.state = 1661;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aliasedRelation(): AliasedRelationContext {
        let localContext = new AliasedRelationContext(this.context, this.state);
        this.enterRule(localContext, 90, SqlBaseParser.RULE_aliasedRelation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1663;
            this.relationPrimary();
            this.state = 1671;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 211, this.context) ) {
            case 1:
                {
                this.state = 1665;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 1664;
                    this.match(SqlBaseParser.AS);
                    }
                }

                this.state = 1667;
                this.identifier();
                this.state = 1669;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 210, this.context) ) {
                case 1:
                    {
                    this.state = 1668;
                    this.columnAliases();
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnAliases(): ColumnAliasesContext {
        let localContext = new ColumnAliasesContext(this.context, this.state);
        this.enterRule(localContext, 92, SqlBaseParser.RULE_columnAliases);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1673;
            this.match(SqlBaseParser.T__1);
            this.state = 1674;
            this.identifier();
            this.state = 1679;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1675;
                this.match(SqlBaseParser.T__3);
                this.state = 1676;
                this.identifier();
                }
                }
                this.state = 1681;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1682;
            this.match(SqlBaseParser.T__2);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relationPrimary(): RelationPrimaryContext {
        let localContext = new RelationPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 94, SqlBaseParser.RULE_relationPrimary);
        let _la: number;
        try {
            this.state = 1755;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 219, this.context) ) {
            case 1:
                localContext = new TableNameContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1684;
                this.qualifiedName();
                this.state = 1686;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 213, this.context) ) {
                case 1:
                    {
                    this.state = 1685;
                    this.queryPeriod();
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new SubqueryRelationContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1688;
                this.match(SqlBaseParser.T__1);
                this.state = 1689;
                this.query();
                this.state = 1690;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 3:
                localContext = new UnnestContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1692;
                this.match(SqlBaseParser.UNNEST);
                this.state = 1693;
                this.match(SqlBaseParser.T__1);
                this.state = 1694;
                this.expression();
                this.state = 1699;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1695;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1696;
                    this.expression();
                    }
                    }
                    this.state = 1701;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1702;
                this.match(SqlBaseParser.T__2);
                this.state = 1705;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 215, this.context) ) {
                case 1:
                    {
                    this.state = 1703;
                    this.match(SqlBaseParser.WITH);
                    this.state = 1704;
                    this.match(SqlBaseParser.ORDINALITY);
                    }
                    break;
                }
                }
                break;
            case 4:
                localContext = new LateralContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1707;
                this.match(SqlBaseParser.LATERAL);
                this.state = 1708;
                this.match(SqlBaseParser.T__1);
                this.state = 1709;
                this.query();
                this.state = 1710;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 5:
                localContext = new TableFunctionInvocationContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1712;
                this.match(SqlBaseParser.TABLE);
                this.state = 1713;
                this.match(SqlBaseParser.T__1);
                this.state = 1714;
                this.tableFunctionCall();
                this.state = 1715;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 6:
                localContext = new ParenthesizedRelationContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1717;
                this.match(SqlBaseParser.T__1);
                this.state = 1718;
                this.relation(0);
                this.state = 1719;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 7:
                localContext = new JsonTableContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1721;
                this.match(SqlBaseParser.JSON_TABLE);
                this.state = 1722;
                this.match(SqlBaseParser.T__1);
                this.state = 1723;
                this.jsonPathInvocation();
                this.state = 1724;
                this.match(SqlBaseParser.COLUMNS);
                this.state = 1725;
                this.match(SqlBaseParser.T__1);
                this.state = 1726;
                this.jsonTableColumn();
                this.state = 1731;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1727;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1728;
                    this.jsonTableColumn();
                    }
                    }
                    this.state = 1733;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1734;
                this.match(SqlBaseParser.T__2);
                this.state = 1746;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 217, this.context) ) {
                case 1:
                    {
                    this.state = 1735;
                    this.match(SqlBaseParser.PLAN);
                    this.state = 1736;
                    this.match(SqlBaseParser.T__1);
                    this.state = 1737;
                    this.jsonTableSpecificPlan();
                    this.state = 1738;
                    this.match(SqlBaseParser.T__2);
                    }
                    break;
                case 2:
                    {
                    this.state = 1740;
                    this.match(SqlBaseParser.PLAN);
                    this.state = 1741;
                    this.match(SqlBaseParser.DEFAULT);
                    this.state = 1742;
                    this.match(SqlBaseParser.T__1);
                    this.state = 1743;
                    this.jsonTableDefaultPlan();
                    this.state = 1744;
                    this.match(SqlBaseParser.T__2);
                    }
                    break;
                }
                this.state = 1751;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80 || _la === 83) {
                    {
                    this.state = 1748;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 80 || _la === 83)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1749;
                    this.match(SqlBaseParser.ON);
                    this.state = 1750;
                    this.match(SqlBaseParser.ERROR);
                    }
                }

                this.state = 1753;
                this.match(SqlBaseParser.T__2);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonTableColumn(): JsonTableColumnContext {
        let localContext = new JsonTableColumnContext(this.context, this.state);
        this.enterRule(localContext, 96, SqlBaseParser.RULE_jsonTableColumn);
        let _la: number;
        try {
            this.state = 1834;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 232, this.context) ) {
            case 1:
                localContext = new OrdinalityColumnContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1757;
                this.identifier();
                this.state = 1758;
                this.match(SqlBaseParser.FOR);
                this.state = 1759;
                this.match(SqlBaseParser.ORDINALITY);
                }
                break;
            case 2:
                localContext = new ValueColumnContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1761;
                this.identifier();
                this.state = 1762;
                this.type_(0);
                this.state = 1765;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 194) {
                    {
                    this.state = 1763;
                    this.match(SqlBaseParser.PATH);
                    this.state = 1764;
                    this.string_();
                    }
                }

                this.state = 1771;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 221, this.context) ) {
                case 1:
                    {
                    this.state = 1767;
                    (localContext as ValueColumnContext)._emptyBehavior = this.jsonValueBehavior();
                    this.state = 1768;
                    this.match(SqlBaseParser.ON);
                    this.state = 1769;
                    this.match(SqlBaseParser.EMPTY);
                    }
                    break;
                }
                this.state = 1777;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 67 || _la === 83 || _la === 172) {
                    {
                    this.state = 1773;
                    (localContext as ValueColumnContext)._errorBehavior = this.jsonValueBehavior();
                    this.state = 1774;
                    this.match(SqlBaseParser.ON);
                    this.state = 1775;
                    this.match(SqlBaseParser.ERROR);
                    }
                }

                }
                break;
            case 3:
                localContext = new QueryColumnContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1779;
                this.identifier();
                this.state = 1780;
                this.type_(0);
                this.state = 1781;
                this.match(SqlBaseParser.FORMAT);
                this.state = 1782;
                this.jsonRepresentation();
                this.state = 1785;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 194) {
                    {
                    this.state = 1783;
                    this.match(SqlBaseParser.PATH);
                    this.state = 1784;
                    this.string_();
                    }
                }

                this.state = 1790;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288 || _la === 290) {
                    {
                    this.state = 1787;
                    this.jsonQueryWrapperBehavior();
                    this.state = 1788;
                    this.match(SqlBaseParser.WRAPPER);
                    }
                }

                this.state = 1799;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 136 || _la === 178) {
                    {
                    this.state = 1792;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 136 || _la === 178)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1793;
                    this.match(SqlBaseParser.QUOTES);
                    this.state = 1797;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 179) {
                        {
                        this.state = 1794;
                        this.match(SqlBaseParser.ON);
                        this.state = 1795;
                        this.match(SqlBaseParser.SCALAR);
                        this.state = 1796;
                        this.match(SqlBaseParser.TEXT_STRING);
                        }
                    }

                    }
                }

                this.state = 1805;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 227, this.context) ) {
                case 1:
                    {
                    this.state = 1801;
                    (localContext as QueryColumnContext)._emptyBehavior = this.jsonQueryBehavior();
                    this.state = 1802;
                    this.match(SqlBaseParser.ON);
                    this.state = 1803;
                    this.match(SqlBaseParser.EMPTY);
                    }
                    break;
                }
                this.state = 1811;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80 || _la === 83 || _la === 172) {
                    {
                    this.state = 1807;
                    (localContext as QueryColumnContext)._errorBehavior = this.jsonQueryBehavior();
                    this.state = 1808;
                    this.match(SqlBaseParser.ON);
                    this.state = 1809;
                    this.match(SqlBaseParser.ERROR);
                    }
                }

                }
                break;
            case 4:
                localContext = new NestedColumnsContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1813;
                this.match(SqlBaseParser.NESTED);
                this.state = 1815;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 194) {
                    {
                    this.state = 1814;
                    this.match(SqlBaseParser.PATH);
                    }
                }

                this.state = 1817;
                this.string_();
                this.state = 1820;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 1818;
                    this.match(SqlBaseParser.AS);
                    this.state = 1819;
                    this.identifier();
                    }
                }

                this.state = 1822;
                this.match(SqlBaseParser.COLUMNS);
                this.state = 1823;
                this.match(SqlBaseParser.T__1);
                this.state = 1824;
                this.jsonTableColumn();
                this.state = 1829;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1825;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1826;
                    this.jsonTableColumn();
                    }
                    }
                    this.state = 1831;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1832;
                this.match(SqlBaseParser.T__2);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonTableSpecificPlan(): JsonTableSpecificPlanContext {
        let localContext = new JsonTableSpecificPlanContext(this.context, this.state);
        this.enterRule(localContext, 98, SqlBaseParser.RULE_jsonTableSpecificPlan);
        let _la: number;
        try {
            this.state = 1861;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 235, this.context) ) {
            case 1:
                localContext = new LeafPlanContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1836;
                this.jsonTablePathName();
                }
                break;
            case 2:
                localContext = new JoinPlanContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1837;
                this.jsonTablePathName();
                this.state = 1838;
                _la = this.tokenStream.LA(1);
                if(!(_la === 118 || _la === 186)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1839;
                this.planPrimary();
                }
                break;
            case 3:
                localContext = new UnionPlanContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1841;
                this.planPrimary();
                this.state = 1842;
                this.match(SqlBaseParser.UNION);
                this.state = 1843;
                this.planPrimary();
                this.state = 1848;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 267) {
                    {
                    {
                    this.state = 1844;
                    this.match(SqlBaseParser.UNION);
                    this.state = 1845;
                    this.planPrimary();
                    }
                    }
                    this.state = 1850;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 4:
                localContext = new CrossPlanContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1851;
                this.planPrimary();
                this.state = 1852;
                this.match(SqlBaseParser.CROSS);
                this.state = 1853;
                this.planPrimary();
                this.state = 1858;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 52) {
                    {
                    {
                    this.state = 1854;
                    this.match(SqlBaseParser.CROSS);
                    this.state = 1855;
                    this.planPrimary();
                    }
                    }
                    this.state = 1860;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonTablePathName(): JsonTablePathNameContext {
        let localContext = new JsonTablePathNameContext(this.context, this.state);
        this.enterRule(localContext, 100, SqlBaseParser.RULE_jsonTablePathName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1863;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public planPrimary(): PlanPrimaryContext {
        let localContext = new PlanPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 102, SqlBaseParser.RULE_planPrimary);
        try {
            this.state = 1870;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.ABSENT:
            case SqlBaseParser.ADD:
            case SqlBaseParser.ADMIN:
            case SqlBaseParser.AFTER:
            case SqlBaseParser.ALL:
            case SqlBaseParser.ANALYZE:
            case SqlBaseParser.ANY:
            case SqlBaseParser.ARRAY:
            case SqlBaseParser.ASC:
            case SqlBaseParser.AT:
            case SqlBaseParser.AUTHORIZATION:
            case SqlBaseParser.BERNOULLI:
            case SqlBaseParser.BOTH:
            case SqlBaseParser.CALL:
            case SqlBaseParser.CASCADE:
            case SqlBaseParser.CATALOG:
            case SqlBaseParser.CATALOGS:
            case SqlBaseParser.COLUMN:
            case SqlBaseParser.COLUMNS:
            case SqlBaseParser.COMMENT:
            case SqlBaseParser.COMMIT:
            case SqlBaseParser.COMMITTED:
            case SqlBaseParser.CONDITIONAL:
            case SqlBaseParser.COUNT:
            case SqlBaseParser.COPARTITION:
            case SqlBaseParser.CURRENT:
            case SqlBaseParser.DATA:
            case SqlBaseParser.DATE:
            case SqlBaseParser.DAY:
            case SqlBaseParser.DEFAULT:
            case SqlBaseParser.DEFINE:
            case SqlBaseParser.DEFINER:
            case SqlBaseParser.DENY:
            case SqlBaseParser.DESC:
            case SqlBaseParser.DESCRIPTOR:
            case SqlBaseParser.DISTRIBUTED:
            case SqlBaseParser.DOUBLE:
            case SqlBaseParser.EMPTY:
            case SqlBaseParser.ENCODING:
            case SqlBaseParser.ERROR:
            case SqlBaseParser.EXCLUDING:
            case SqlBaseParser.EXPLAIN:
            case SqlBaseParser.FETCH:
            case SqlBaseParser.FILTER:
            case SqlBaseParser.FINAL:
            case SqlBaseParser.FIRST:
            case SqlBaseParser.FOLLOWING:
            case SqlBaseParser.FORMAT:
            case SqlBaseParser.FUNCTIONS:
            case SqlBaseParser.GRACE:
            case SqlBaseParser.GRANT:
            case SqlBaseParser.GRANTED:
            case SqlBaseParser.GRANTS:
            case SqlBaseParser.GRAPHVIZ:
            case SqlBaseParser.GROUPS:
            case SqlBaseParser.HOUR:
            case SqlBaseParser.IF:
            case SqlBaseParser.IGNORE:
            case SqlBaseParser.IMMEDIATE:
            case SqlBaseParser.INCLUDING:
            case SqlBaseParser.INITIAL:
            case SqlBaseParser.INPUT:
            case SqlBaseParser.INTERVAL:
            case SqlBaseParser.INVOKER:
            case SqlBaseParser.IO:
            case SqlBaseParser.ISOLATION:
            case SqlBaseParser.JSON:
            case SqlBaseParser.KEEP:
            case SqlBaseParser.KEY:
            case SqlBaseParser.KEYS:
            case SqlBaseParser.LAST:
            case SqlBaseParser.LATERAL:
            case SqlBaseParser.LEADING:
            case SqlBaseParser.LEVEL:
            case SqlBaseParser.LIMIT:
            case SqlBaseParser.LOCAL:
            case SqlBaseParser.LOGICAL:
            case SqlBaseParser.MAP:
            case SqlBaseParser.MATCH:
            case SqlBaseParser.MATCHED:
            case SqlBaseParser.MATCHES:
            case SqlBaseParser.MATCH_RECOGNIZE:
            case SqlBaseParser.MATERIALIZED:
            case SqlBaseParser.MEASURES:
            case SqlBaseParser.MERGE:
            case SqlBaseParser.MINUTE:
            case SqlBaseParser.MONTH:
            case SqlBaseParser.NESTED:
            case SqlBaseParser.NEXT:
            case SqlBaseParser.NFC:
            case SqlBaseParser.NFD:
            case SqlBaseParser.NFKC:
            case SqlBaseParser.NFKD:
            case SqlBaseParser.NO:
            case SqlBaseParser.NONE:
            case SqlBaseParser.NULLIF:
            case SqlBaseParser.NULLS:
            case SqlBaseParser.OBJECT:
            case SqlBaseParser.OF:
            case SqlBaseParser.OFFSET:
            case SqlBaseParser.OMIT:
            case SqlBaseParser.ONE:
            case SqlBaseParser.ONLY:
            case SqlBaseParser.OPTION:
            case SqlBaseParser.ORDINALITY:
            case SqlBaseParser.OUTPUT:
            case SqlBaseParser.OVER:
            case SqlBaseParser.OVERFLOW:
            case SqlBaseParser.PARTITION:
            case SqlBaseParser.PARTITIONS:
            case SqlBaseParser.PASSING:
            case SqlBaseParser.PAST:
            case SqlBaseParser.PATH:
            case SqlBaseParser.PATTERN:
            case SqlBaseParser.PER:
            case SqlBaseParser.PERIOD:
            case SqlBaseParser.PERMUTE:
            case SqlBaseParser.PLAN:
            case SqlBaseParser.POSITION:
            case SqlBaseParser.PRECEDING:
            case SqlBaseParser.PRECISION:
            case SqlBaseParser.PRIVILEGES:
            case SqlBaseParser.PROPERTIES:
            case SqlBaseParser.PRUNE:
            case SqlBaseParser.QUOTES:
            case SqlBaseParser.RANGE:
            case SqlBaseParser.READ:
            case SqlBaseParser.REFRESH:
            case SqlBaseParser.RENAME:
            case SqlBaseParser.REPEATABLE:
            case SqlBaseParser.REPLACE:
            case SqlBaseParser.RESET:
            case SqlBaseParser.RESPECT:
            case SqlBaseParser.RESTRICT:
            case SqlBaseParser.RETURNING:
            case SqlBaseParser.REVOKE:
            case SqlBaseParser.ROLE:
            case SqlBaseParser.ROLES:
            case SqlBaseParser.ROLLBACK:
            case SqlBaseParser.ROW:
            case SqlBaseParser.ROWS:
            case SqlBaseParser.RUNNING:
            case SqlBaseParser.SCALAR:
            case SqlBaseParser.SCHEMA:
            case SqlBaseParser.SCHEMAS:
            case SqlBaseParser.SECOND:
            case SqlBaseParser.SECURITY:
            case SqlBaseParser.SEEK:
            case SqlBaseParser.SERIALIZABLE:
            case SqlBaseParser.SESSION:
            case SqlBaseParser.SET:
            case SqlBaseParser.SETS:
            case SqlBaseParser.SHOW:
            case SqlBaseParser.SOME:
            case SqlBaseParser.START:
            case SqlBaseParser.STATS:
            case SqlBaseParser.SUBSET:
            case SqlBaseParser.SUBSTRING:
            case SqlBaseParser.SYSTEM:
            case SqlBaseParser.TABLES:
            case SqlBaseParser.TABLESAMPLE:
            case SqlBaseParser.TEXT:
            case SqlBaseParser.TEXT_STRING:
            case SqlBaseParser.TIES:
            case SqlBaseParser.TIME:
            case SqlBaseParser.TIMESTAMP:
            case SqlBaseParser.TO:
            case SqlBaseParser.TRAILING:
            case SqlBaseParser.TRANSACTION:
            case SqlBaseParser.TRUNCATE:
            case SqlBaseParser.TRY_CAST:
            case SqlBaseParser.TYPE:
            case SqlBaseParser.UNBOUNDED:
            case SqlBaseParser.UNCOMMITTED:
            case SqlBaseParser.UNCONDITIONAL:
            case SqlBaseParser.UNIQUE:
            case SqlBaseParser.UNKNOWN:
            case SqlBaseParser.UNMATCHED:
            case SqlBaseParser.UPDATE:
            case SqlBaseParser.USE:
            case SqlBaseParser.USER:
            case SqlBaseParser.UTF16:
            case SqlBaseParser.UTF32:
            case SqlBaseParser.UTF8:
            case SqlBaseParser.VALIDATE:
            case SqlBaseParser.VALUE:
            case SqlBaseParser.VERBOSE:
            case SqlBaseParser.VERSION:
            case SqlBaseParser.VIEW:
            case SqlBaseParser.WINDOW:
            case SqlBaseParser.WITHIN:
            case SqlBaseParser.WITHOUT:
            case SqlBaseParser.WORK:
            case SqlBaseParser.WRAPPER:
            case SqlBaseParser.WRITE:
            case SqlBaseParser.YEAR:
            case SqlBaseParser.ZONE:
            case SqlBaseParser.IDENTIFIER:
            case SqlBaseParser.DIGIT_IDENTIFIER:
            case SqlBaseParser.QUOTED_IDENTIFIER:
            case SqlBaseParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1865;
                this.jsonTablePathName();
                }
                break;
            case SqlBaseParser.T__1:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1866;
                this.match(SqlBaseParser.T__1);
                this.state = 1867;
                this.jsonTableSpecificPlan();
                this.state = 1868;
                this.match(SqlBaseParser.T__2);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonTableDefaultPlan(): JsonTableDefaultPlanContext {
        let localContext = new JsonTableDefaultPlanContext(this.context, this.state);
        this.enterRule(localContext, 104, SqlBaseParser.RULE_jsonTableDefaultPlan);
        let _la: number;
        try {
            this.state = 1882;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.INNER:
            case SqlBaseParser.OUTER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1872;
                _la = this.tokenStream.LA(1);
                if(!(_la === 118 || _la === 186)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1875;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 4) {
                    {
                    this.state = 1873;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1874;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 52 || _la === 267)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case SqlBaseParser.CROSS:
            case SqlBaseParser.UNION:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1877;
                _la = this.tokenStream.LA(1);
                if(!(_la === 52 || _la === 267)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1880;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 4) {
                    {
                    this.state = 1878;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1879;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 118 || _la === 186)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableFunctionCall(): TableFunctionCallContext {
        let localContext = new TableFunctionCallContext(this.context, this.state);
        this.enterRule(localContext, 106, SqlBaseParser.RULE_tableFunctionCall);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1884;
            this.qualifiedName();
            this.state = 1885;
            this.match(SqlBaseParser.T__1);
            this.state = 1894;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 241, this.context) ) {
            case 1:
                {
                this.state = 1886;
                this.tableFunctionArgument();
                this.state = 1891;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1887;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1888;
                    this.tableFunctionArgument();
                    }
                    }
                    this.state = 1893;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
            this.state = 1905;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 50) {
                {
                this.state = 1896;
                this.match(SqlBaseParser.COPARTITION);
                this.state = 1897;
                this.copartitionTables();
                this.state = 1902;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1898;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1899;
                    this.copartitionTables();
                    }
                    }
                    this.state = 1904;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 1907;
            this.match(SqlBaseParser.T__2);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableFunctionArgument(): TableFunctionArgumentContext {
        let localContext = new TableFunctionArgumentContext(this.context, this.state);
        this.enterRule(localContext, 108, SqlBaseParser.RULE_tableFunctionArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1912;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 244, this.context) ) {
            case 1:
                {
                this.state = 1909;
                this.identifier();
                this.state = 1910;
                this.match(SqlBaseParser.T__5);
                }
                break;
            }
            this.state = 1917;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 245, this.context) ) {
            case 1:
                {
                this.state = 1914;
                this.tableArgument();
                }
                break;
            case 2:
                {
                this.state = 1915;
                this.descriptorArgument();
                }
                break;
            case 3:
                {
                this.state = 1916;
                this.expression();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableArgument(): TableArgumentContext {
        let localContext = new TableArgumentContext(this.context, this.state);
        this.enterRule(localContext, 110, SqlBaseParser.RULE_tableArgument);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1919;
            this.tableArgumentRelation();
            this.state = 1937;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 190) {
                {
                this.state = 1920;
                this.match(SqlBaseParser.PARTITION);
                this.state = 1921;
                this.match(SqlBaseParser.BY);
                this.state = 1935;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 248, this.context) ) {
                case 1:
                    {
                    this.state = 1922;
                    this.match(SqlBaseParser.T__1);
                    this.state = 1931;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326660) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4224122869) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4283119035) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3031939045) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294926303) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4271767551) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 3154050559) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4260364031) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 2810043871) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 536621119) !== 0)) {
                        {
                        this.state = 1923;
                        this.expression();
                        this.state = 1928;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 4) {
                            {
                            {
                            this.state = 1924;
                            this.match(SqlBaseParser.T__3);
                            this.state = 1925;
                            this.expression();
                            }
                            }
                            this.state = 1930;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                    }

                    this.state = 1933;
                    this.match(SqlBaseParser.T__2);
                    }
                    break;
                case 2:
                    {
                    this.state = 1934;
                    this.expression();
                    }
                    break;
                }
                }
            }

            this.state = 1945;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.PRUNE:
                {
                this.state = 1939;
                this.match(SqlBaseParser.PRUNE);
                this.state = 1940;
                this.match(SqlBaseParser.WHEN);
                this.state = 1941;
                this.match(SqlBaseParser.EMPTY);
                }
                break;
            case SqlBaseParser.KEEP:
                {
                this.state = 1942;
                this.match(SqlBaseParser.KEEP);
                this.state = 1943;
                this.match(SqlBaseParser.WHEN);
                this.state = 1944;
                this.match(SqlBaseParser.EMPTY);
                }
                break;
            case SqlBaseParser.T__2:
            case SqlBaseParser.T__3:
            case SqlBaseParser.COPARTITION:
            case SqlBaseParser.ORDER:
                break;
            default:
                break;
            }
            this.state = 1963;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 184) {
                {
                this.state = 1947;
                this.match(SqlBaseParser.ORDER);
                this.state = 1948;
                this.match(SqlBaseParser.BY);
                this.state = 1961;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 252, this.context) ) {
                case 1:
                    {
                    this.state = 1949;
                    this.match(SqlBaseParser.T__1);
                    this.state = 1950;
                    this.sortItem();
                    this.state = 1955;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 1951;
                        this.match(SqlBaseParser.T__3);
                        this.state = 1952;
                        this.sortItem();
                        }
                        }
                        this.state = 1957;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 1958;
                    this.match(SqlBaseParser.T__2);
                    }
                    break;
                case 2:
                    {
                    this.state = 1960;
                    this.sortItem();
                    }
                    break;
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableArgumentRelation(): TableArgumentRelationContext {
        let localContext = new TableArgumentRelationContext(this.context, this.state);
        this.enterRule(localContext, 112, SqlBaseParser.RULE_tableArgumentRelation);
        let _la: number;
        try {
            this.state = 1991;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 260, this.context) ) {
            case 1:
                localContext = new TableArgumentTableContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1965;
                this.match(SqlBaseParser.TABLE);
                this.state = 1966;
                this.match(SqlBaseParser.T__1);
                this.state = 1967;
                this.qualifiedName();
                this.state = 1968;
                this.match(SqlBaseParser.T__2);
                this.state = 1976;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 256, this.context) ) {
                case 1:
                    {
                    this.state = 1970;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 28) {
                        {
                        this.state = 1969;
                        this.match(SqlBaseParser.AS);
                        }
                    }

                    this.state = 1972;
                    this.identifier();
                    this.state = 1974;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 2) {
                        {
                        this.state = 1973;
                        this.columnAliases();
                        }
                    }

                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new TableArgumentQueryContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1978;
                this.match(SqlBaseParser.TABLE);
                this.state = 1979;
                this.match(SqlBaseParser.T__1);
                this.state = 1980;
                this.query();
                this.state = 1981;
                this.match(SqlBaseParser.T__2);
                this.state = 1989;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 259, this.context) ) {
                case 1:
                    {
                    this.state = 1983;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 28) {
                        {
                        this.state = 1982;
                        this.match(SqlBaseParser.AS);
                        }
                    }

                    this.state = 1985;
                    this.identifier();
                    this.state = 1987;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 2) {
                        {
                        this.state = 1986;
                        this.columnAliases();
                        }
                    }

                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public descriptorArgument(): DescriptorArgumentContext {
        let localContext = new DescriptorArgumentContext(this.context, this.state);
        this.enterRule(localContext, 114, SqlBaseParser.RULE_descriptorArgument);
        let _la: number;
        try {
            this.state = 2011;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.DESCRIPTOR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1993;
                this.match(SqlBaseParser.DESCRIPTOR);
                this.state = 1994;
                this.match(SqlBaseParser.T__1);
                this.state = 1995;
                this.descriptorField();
                this.state = 2000;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1996;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1997;
                    this.descriptorField();
                    }
                    }
                    this.state = 2002;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2003;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case SqlBaseParser.CAST:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2005;
                this.match(SqlBaseParser.CAST);
                this.state = 2006;
                this.match(SqlBaseParser.T__1);
                this.state = 2007;
                this.match(SqlBaseParser.NULL);
                this.state = 2008;
                this.match(SqlBaseParser.AS);
                this.state = 2009;
                this.match(SqlBaseParser.DESCRIPTOR);
                this.state = 2010;
                this.match(SqlBaseParser.T__2);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public descriptorField(): DescriptorFieldContext {
        let localContext = new DescriptorFieldContext(this.context, this.state);
        this.enterRule(localContext, 116, SqlBaseParser.RULE_descriptorField);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2013;
            this.identifier();
            this.state = 2015;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326656) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 2152136501) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4065015227) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3031934949) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4293222273) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4271765759) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 3154050559) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4260364031) !== 0) || ((((_la - 260)) & ~0x1F) === 0 && ((1 << (_la - 260)) & 3923736439) !== 0) || ((((_la - 292)) & ~0x1F) === 0 && ((1 << (_la - 292)) & 125829135) !== 0)) {
                {
                this.state = 2014;
                this.type_(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copartitionTables(): CopartitionTablesContext {
        let localContext = new CopartitionTablesContext(this.context, this.state);
        this.enterRule(localContext, 118, SqlBaseParser.RULE_copartitionTables);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2017;
            this.match(SqlBaseParser.T__1);
            this.state = 2018;
            this.qualifiedName();
            this.state = 2019;
            this.match(SqlBaseParser.T__3);
            this.state = 2020;
            this.qualifiedName();
            this.state = 2025;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2021;
                this.match(SqlBaseParser.T__3);
                this.state = 2022;
                this.qualifiedName();
                }
                }
                this.state = 2027;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2028;
            this.match(SqlBaseParser.T__2);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expression(): ExpressionContext {
        let localContext = new ExpressionContext(this.context, this.state);
        this.enterRule(localContext, 120, SqlBaseParser.RULE_expression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2030;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public booleanExpression(): BooleanExpressionContext;
    public booleanExpression(_p: number): BooleanExpressionContext;
    public booleanExpression(_p?: number): BooleanExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new BooleanExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 122;
        this.enterRecursionRule(localContext, 122, SqlBaseParser.RULE_booleanExpression, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2039;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.T__1:
            case SqlBaseParser.ABSENT:
            case SqlBaseParser.ADD:
            case SqlBaseParser.ADMIN:
            case SqlBaseParser.AFTER:
            case SqlBaseParser.ALL:
            case SqlBaseParser.ANALYZE:
            case SqlBaseParser.ANY:
            case SqlBaseParser.ARRAY:
            case SqlBaseParser.ASC:
            case SqlBaseParser.AT:
            case SqlBaseParser.AUTHORIZATION:
            case SqlBaseParser.BERNOULLI:
            case SqlBaseParser.BOTH:
            case SqlBaseParser.CALL:
            case SqlBaseParser.CASCADE:
            case SqlBaseParser.CASE:
            case SqlBaseParser.CAST:
            case SqlBaseParser.CATALOG:
            case SqlBaseParser.CATALOGS:
            case SqlBaseParser.COLUMN:
            case SqlBaseParser.COLUMNS:
            case SqlBaseParser.COMMENT:
            case SqlBaseParser.COMMIT:
            case SqlBaseParser.COMMITTED:
            case SqlBaseParser.CONDITIONAL:
            case SqlBaseParser.COUNT:
            case SqlBaseParser.COPARTITION:
            case SqlBaseParser.CURRENT:
            case SqlBaseParser.CURRENT_CATALOG:
            case SqlBaseParser.CURRENT_DATE:
            case SqlBaseParser.CURRENT_PATH:
            case SqlBaseParser.CURRENT_SCHEMA:
            case SqlBaseParser.CURRENT_TIME:
            case SqlBaseParser.CURRENT_TIMESTAMP:
            case SqlBaseParser.CURRENT_USER:
            case SqlBaseParser.DATA:
            case SqlBaseParser.DATE:
            case SqlBaseParser.DAY:
            case SqlBaseParser.DEFAULT:
            case SqlBaseParser.DEFINE:
            case SqlBaseParser.DEFINER:
            case SqlBaseParser.DENY:
            case SqlBaseParser.DESC:
            case SqlBaseParser.DESCRIPTOR:
            case SqlBaseParser.DISTRIBUTED:
            case SqlBaseParser.DOUBLE:
            case SqlBaseParser.EMPTY:
            case SqlBaseParser.ENCODING:
            case SqlBaseParser.ERROR:
            case SqlBaseParser.EXCLUDING:
            case SqlBaseParser.EXISTS:
            case SqlBaseParser.EXPLAIN:
            case SqlBaseParser.EXTRACT:
            case SqlBaseParser.FALSE:
            case SqlBaseParser.FETCH:
            case SqlBaseParser.FILTER:
            case SqlBaseParser.FINAL:
            case SqlBaseParser.FIRST:
            case SqlBaseParser.FOLLOWING:
            case SqlBaseParser.FORMAT:
            case SqlBaseParser.FUNCTIONS:
            case SqlBaseParser.GRACE:
            case SqlBaseParser.GRANT:
            case SqlBaseParser.GRANTED:
            case SqlBaseParser.GRANTS:
            case SqlBaseParser.GRAPHVIZ:
            case SqlBaseParser.GROUPING:
            case SqlBaseParser.GROUPS:
            case SqlBaseParser.HOUR:
            case SqlBaseParser.IF:
            case SqlBaseParser.IGNORE:
            case SqlBaseParser.IMMEDIATE:
            case SqlBaseParser.INCLUDING:
            case SqlBaseParser.INITIAL:
            case SqlBaseParser.INPUT:
            case SqlBaseParser.INTERVAL:
            case SqlBaseParser.INVOKER:
            case SqlBaseParser.IO:
            case SqlBaseParser.ISOLATION:
            case SqlBaseParser.JSON:
            case SqlBaseParser.JSON_ARRAY:
            case SqlBaseParser.JSON_EXISTS:
            case SqlBaseParser.JSON_OBJECT:
            case SqlBaseParser.JSON_QUERY:
            case SqlBaseParser.JSON_VALUE:
            case SqlBaseParser.KEEP:
            case SqlBaseParser.KEY:
            case SqlBaseParser.KEYS:
            case SqlBaseParser.LAST:
            case SqlBaseParser.LATERAL:
            case SqlBaseParser.LEADING:
            case SqlBaseParser.LEVEL:
            case SqlBaseParser.LIMIT:
            case SqlBaseParser.LISTAGG:
            case SqlBaseParser.LOCAL:
            case SqlBaseParser.LOCALTIME:
            case SqlBaseParser.LOCALTIMESTAMP:
            case SqlBaseParser.LOGICAL:
            case SqlBaseParser.MAP:
            case SqlBaseParser.MATCH:
            case SqlBaseParser.MATCHED:
            case SqlBaseParser.MATCHES:
            case SqlBaseParser.MATCH_RECOGNIZE:
            case SqlBaseParser.MATERIALIZED:
            case SqlBaseParser.MEASURES:
            case SqlBaseParser.MERGE:
            case SqlBaseParser.MINUTE:
            case SqlBaseParser.MONTH:
            case SqlBaseParser.NESTED:
            case SqlBaseParser.NEXT:
            case SqlBaseParser.NFC:
            case SqlBaseParser.NFD:
            case SqlBaseParser.NFKC:
            case SqlBaseParser.NFKD:
            case SqlBaseParser.NO:
            case SqlBaseParser.NONE:
            case SqlBaseParser.NORMALIZE:
            case SqlBaseParser.NULL:
            case SqlBaseParser.NULLIF:
            case SqlBaseParser.NULLS:
            case SqlBaseParser.OBJECT:
            case SqlBaseParser.OF:
            case SqlBaseParser.OFFSET:
            case SqlBaseParser.OMIT:
            case SqlBaseParser.ONE:
            case SqlBaseParser.ONLY:
            case SqlBaseParser.OPTION:
            case SqlBaseParser.ORDINALITY:
            case SqlBaseParser.OUTPUT:
            case SqlBaseParser.OVER:
            case SqlBaseParser.OVERFLOW:
            case SqlBaseParser.PARTITION:
            case SqlBaseParser.PARTITIONS:
            case SqlBaseParser.PASSING:
            case SqlBaseParser.PAST:
            case SqlBaseParser.PATH:
            case SqlBaseParser.PATTERN:
            case SqlBaseParser.PER:
            case SqlBaseParser.PERIOD:
            case SqlBaseParser.PERMUTE:
            case SqlBaseParser.PLAN:
            case SqlBaseParser.POSITION:
            case SqlBaseParser.PRECEDING:
            case SqlBaseParser.PRECISION:
            case SqlBaseParser.PRIVILEGES:
            case SqlBaseParser.PROPERTIES:
            case SqlBaseParser.PRUNE:
            case SqlBaseParser.QUOTES:
            case SqlBaseParser.RANGE:
            case SqlBaseParser.READ:
            case SqlBaseParser.REFRESH:
            case SqlBaseParser.RENAME:
            case SqlBaseParser.REPEATABLE:
            case SqlBaseParser.REPLACE:
            case SqlBaseParser.RESET:
            case SqlBaseParser.RESPECT:
            case SqlBaseParser.RESTRICT:
            case SqlBaseParser.RETURNING:
            case SqlBaseParser.REVOKE:
            case SqlBaseParser.ROLE:
            case SqlBaseParser.ROLES:
            case SqlBaseParser.ROLLBACK:
            case SqlBaseParser.ROW:
            case SqlBaseParser.ROWS:
            case SqlBaseParser.RUNNING:
            case SqlBaseParser.SCALAR:
            case SqlBaseParser.SCHEMA:
            case SqlBaseParser.SCHEMAS:
            case SqlBaseParser.SECOND:
            case SqlBaseParser.SECURITY:
            case SqlBaseParser.SEEK:
            case SqlBaseParser.SERIALIZABLE:
            case SqlBaseParser.SESSION:
            case SqlBaseParser.SET:
            case SqlBaseParser.SETS:
            case SqlBaseParser.SHOW:
            case SqlBaseParser.SOME:
            case SqlBaseParser.START:
            case SqlBaseParser.STATS:
            case SqlBaseParser.SUBSET:
            case SqlBaseParser.SUBSTRING:
            case SqlBaseParser.SYSTEM:
            case SqlBaseParser.TABLES:
            case SqlBaseParser.TABLESAMPLE:
            case SqlBaseParser.TEXT:
            case SqlBaseParser.TEXT_STRING:
            case SqlBaseParser.TIES:
            case SqlBaseParser.TIME:
            case SqlBaseParser.TIMESTAMP:
            case SqlBaseParser.TO:
            case SqlBaseParser.TRAILING:
            case SqlBaseParser.TRANSACTION:
            case SqlBaseParser.TRIM:
            case SqlBaseParser.TRUE:
            case SqlBaseParser.TRUNCATE:
            case SqlBaseParser.TRY_CAST:
            case SqlBaseParser.TYPE:
            case SqlBaseParser.UNBOUNDED:
            case SqlBaseParser.UNCOMMITTED:
            case SqlBaseParser.UNCONDITIONAL:
            case SqlBaseParser.UNIQUE:
            case SqlBaseParser.UNKNOWN:
            case SqlBaseParser.UNMATCHED:
            case SqlBaseParser.UPDATE:
            case SqlBaseParser.USE:
            case SqlBaseParser.USER:
            case SqlBaseParser.UTF16:
            case SqlBaseParser.UTF32:
            case SqlBaseParser.UTF8:
            case SqlBaseParser.VALIDATE:
            case SqlBaseParser.VALUE:
            case SqlBaseParser.VERBOSE:
            case SqlBaseParser.VERSION:
            case SqlBaseParser.VIEW:
            case SqlBaseParser.WINDOW:
            case SqlBaseParser.WITHIN:
            case SqlBaseParser.WITHOUT:
            case SqlBaseParser.WORK:
            case SqlBaseParser.WRAPPER:
            case SqlBaseParser.WRITE:
            case SqlBaseParser.YEAR:
            case SqlBaseParser.ZONE:
            case SqlBaseParser.PLUS:
            case SqlBaseParser.MINUS:
            case SqlBaseParser.QUESTION_MARK:
            case SqlBaseParser.STRING:
            case SqlBaseParser.UNICODE_STRING:
            case SqlBaseParser.BINARY_LITERAL:
            case SqlBaseParser.INTEGER_VALUE:
            case SqlBaseParser.DECIMAL_VALUE:
            case SqlBaseParser.DOUBLE_VALUE:
            case SqlBaseParser.IDENTIFIER:
            case SqlBaseParser.DIGIT_IDENTIFIER:
            case SqlBaseParser.QUOTED_IDENTIFIER:
            case SqlBaseParser.BACKQUOTED_IDENTIFIER:
                {
                localContext = new PredicatedContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2033;
                (localContext as PredicatedContext)._valueExpression = this.valueExpression(0);
                this.state = 2035;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 265, this.context) ) {
                case 1:
                    {
                    this.state = 2034;
                        const predicatedContext = localContext as PredicatedContext;
                        if (predicatedContext._valueExpression instanceof ValueExpressionContext) {
                            this.predicate(predicatedContext._valueExpression);
                        } else {
                            // Handle the case where _valueExpression is not an instance of ValueExpressionContext
                        }
                    }
                    break;
                }
                }
                break;
            case SqlBaseParser.NOT:
                {
                localContext = new LogicalNotContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2037;
                this.match(SqlBaseParser.NOT);
                this.state = 2038;
                this.booleanExpression(3);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2049;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 268, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2047;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 267, this.context) ) {
                    case 1:
                        {
                        localContext = new AndContext(new BooleanExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, SqlBaseParser.RULE_booleanExpression);
                        this.state = 2041;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 2042;
                        this.match(SqlBaseParser.AND);
                        this.state = 2043;
                        this.booleanExpression(3);
                        }
                        break;
                    case 2:
                        {
                        localContext = new OrContext(new BooleanExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, SqlBaseParser.RULE_booleanExpression);
                        this.state = 2044;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 2045;
                        this.match(SqlBaseParser.OR);
                        this.state = 2046;
                        this.booleanExpression(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 2051;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 268, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public predicate(value: antlr.ParserRuleContext): PredicateContext {
        let localContext = new PredicateContext(this.context, this.state, value);
        this.enterRule(localContext, 124, SqlBaseParser.RULE_predicate);
        let _la: number;
        try {
            this.state = 2113;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 277, this.context) ) {
            case 1:
                localContext = new ComparisonContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2052;
                this.comparisonOperator();
                this.state = 2053;
                (localContext as ComparisonContext)._right = this.valueExpression(0);
                }
                break;
            case 2:
                localContext = new QuantifiedComparisonContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2055;
                this.comparisonOperator();
                this.state = 2056;
                this.comparisonQuantifier();
                this.state = 2057;
                this.match(SqlBaseParser.T__1);
                this.state = 2058;
                this.query();
                this.state = 2059;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 3:
                localContext = new BetweenContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2062;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 171) {
                    {
                    this.state = 2061;
                    this.match(SqlBaseParser.NOT);
                    }
                }

                this.state = 2064;
                this.match(SqlBaseParser.BETWEEN);
                this.state = 2065;
                (localContext as BetweenContext)._lower = this.valueExpression(0);
                this.state = 2066;
                this.match(SqlBaseParser.AND);
                this.state = 2067;
                (localContext as BetweenContext)._upper = this.valueExpression(0);
                }
                break;
            case 4:
                localContext = new InListContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2070;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 171) {
                    {
                    this.state = 2069;
                    this.match(SqlBaseParser.NOT);
                    }
                }

                this.state = 2072;
                this.match(SqlBaseParser.IN);
                this.state = 2073;
                this.match(SqlBaseParser.T__1);
                this.state = 2074;
                this.expression();
                this.state = 2079;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2075;
                    this.match(SqlBaseParser.T__3);
                    this.state = 2076;
                    this.expression();
                    }
                    }
                    this.state = 2081;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2082;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 5:
                localContext = new InSubqueryContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2085;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 171) {
                    {
                    this.state = 2084;
                    this.match(SqlBaseParser.NOT);
                    }
                }

                this.state = 2087;
                this.match(SqlBaseParser.IN);
                this.state = 2088;
                this.match(SqlBaseParser.T__1);
                this.state = 2089;
                this.query();
                this.state = 2090;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 6:
                localContext = new LikeContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2093;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 171) {
                    {
                    this.state = 2092;
                    this.match(SqlBaseParser.NOT);
                    }
                }

                this.state = 2095;
                this.match(SqlBaseParser.LIKE);
                this.state = 2096;
                (localContext as LikeContext)._pattern = this.valueExpression(0);
                this.state = 2099;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 274, this.context) ) {
                case 1:
                    {
                    this.state = 2097;
                    this.match(SqlBaseParser.ESCAPE);
                    this.state = 2098;
                    (localContext as LikeContext)._escape = this.valueExpression(0);
                    }
                    break;
                }
                }
                break;
            case 7:
                localContext = new NullPredicateContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2101;
                this.match(SqlBaseParser.IS);
                this.state = 2103;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 171) {
                    {
                    this.state = 2102;
                    this.match(SqlBaseParser.NOT);
                    }
                }

                this.state = 2105;
                this.match(SqlBaseParser.NULL);
                }
                break;
            case 8:
                localContext = new DistinctFromContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2106;
                this.match(SqlBaseParser.IS);
                this.state = 2108;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 171) {
                    {
                    this.state = 2107;
                    this.match(SqlBaseParser.NOT);
                    }
                }

                this.state = 2110;
                this.match(SqlBaseParser.DISTINCT);
                this.state = 2111;
                this.match(SqlBaseParser.FROM);
                this.state = 2112;
                (localContext as DistinctFromContext)._right = this.valueExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public valueExpression(): ValueExpressionContext;
    public valueExpression(_p: number): ValueExpressionContext;
    public valueExpression(_p?: number): ValueExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ValueExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 126;
        this.enterRecursionRule(localContext, 126, SqlBaseParser.RULE_valueExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2119;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 278, this.context) ) {
            case 1:
                {
                localContext = new ValueExpressionDefaultContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2116;
                this.primaryExpression(0);
                }
                break;
            case 2:
                {
                localContext = new ArithmeticUnaryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2117;
                (localContext as ArithmeticUnaryContext)._operator = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 302 || _la === 303)) {
                    (localContext as ArithmeticUnaryContext)._operator = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2118;
                this.valueExpression(4);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2135;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 280, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2133;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 279, this.context) ) {
                    case 1:
                        {
                        localContext = new ArithmeticBinaryContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ArithmeticBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SqlBaseParser.RULE_valueExpression);
                        this.state = 2121;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 2122;
                        (localContext as ArithmeticBinaryContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & 7) !== 0))) {
                            (localContext as ArithmeticBinaryContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2123;
                        (localContext as ArithmeticBinaryContext)._right = this.valueExpression(4);
                        }
                        break;
                    case 2:
                        {
                        localContext = new ArithmeticBinaryContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ArithmeticBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SqlBaseParser.RULE_valueExpression);
                        this.state = 2124;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 2125;
                        (localContext as ArithmeticBinaryContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 302 || _la === 303)) {
                            (localContext as ArithmeticBinaryContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2126;
                        (localContext as ArithmeticBinaryContext)._right = this.valueExpression(3);
                        }
                        break;
                    case 3:
                        {
                        localContext = new ConcatenationContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ConcatenationContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SqlBaseParser.RULE_valueExpression);
                        this.state = 2127;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 2128;
                        this.match(SqlBaseParser.CONCAT);
                        this.state = 2129;
                        (localContext as ConcatenationContext)._right = this.valueExpression(2);
                        }
                        break;
                    case 4:
                        {
                        localContext = new AtTimeZoneContext(new ValueExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, SqlBaseParser.RULE_valueExpression);
                        this.state = 2130;
                        if (!(this.precpred(this.context, 5))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 5)");
                        }
                        this.state = 2131;
                        this.match(SqlBaseParser.AT);
                        this.state = 2132;
                        this.timeZoneSpecifier();
                        }
                        break;
                    }
                    }
                }
                this.state = 2137;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 280, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }

    public primaryExpression(): PrimaryExpressionContext;
    public primaryExpression(_p: number): PrimaryExpressionContext;
    public primaryExpression(_p?: number): PrimaryExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new PrimaryExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 128;
        this.enterRecursionRule(localContext, 128, SqlBaseParser.RULE_primaryExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2588;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 343, this.context) ) {
            case 1:
                {
                localContext = new NullLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2139;
                this.match(SqlBaseParser.NULL);
                }
                break;
            case 2:
                {
                localContext = new IntervalLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2140;
                this.interval();
                }
                break;
            case 3:
                {
                localContext = new TypeConstructorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2141;
                this.identifier();
                this.state = 2142;
                this.string_();
                }
                break;
            case 4:
                {
                localContext = new TypeConstructorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2144;
                this.match(SqlBaseParser.DOUBLE);
                this.state = 2145;
                this.match(SqlBaseParser.PRECISION);
                this.state = 2146;
                this.string_();
                }
                break;
            case 5:
                {
                localContext = new NumericLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2147;
                this.number_();
                }
                break;
            case 6:
                {
                localContext = new BooleanLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2148;
                this.booleanValue();
                }
                break;
            case 7:
                {
                localContext = new StringLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2149;
                this.string_();
                }
                break;
            case 8:
                {
                localContext = new BinaryLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2150;
                this.match(SqlBaseParser.BINARY_LITERAL);
                }
                break;
            case 9:
                {
                localContext = new ParameterContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2151;
                this.match(SqlBaseParser.QUESTION_MARK);
                }
                break;
            case 10:
                {
                localContext = new PositionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2152;
                this.match(SqlBaseParser.POSITION);
                this.state = 2153;
                this.match(SqlBaseParser.T__1);
                this.state = 2154;
                this.valueExpression(0);
                this.state = 2155;
                this.match(SqlBaseParser.IN);
                this.state = 2156;
                this.valueExpression(0);
                this.state = 2157;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 11:
                {
                localContext = new RowConstructorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2159;
                this.match(SqlBaseParser.T__1);
                this.state = 2160;
                this.expression();
                this.state = 2163;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2161;
                    this.match(SqlBaseParser.T__3);
                    this.state = 2162;
                    this.expression();
                    }
                    }
                    this.state = 2165;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 4);
                this.state = 2167;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 12:
                {
                localContext = new RowConstructorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2169;
                this.match(SqlBaseParser.ROW);
                this.state = 2170;
                this.match(SqlBaseParser.T__1);
                this.state = 2171;
                this.expression();
                this.state = 2176;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2172;
                    this.match(SqlBaseParser.T__3);
                    this.state = 2173;
                    this.expression();
                    }
                    }
                    this.state = 2178;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2179;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 13:
                {
                localContext = new ListaggContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2181;
                (localContext as ListaggContext)._name = this.match(SqlBaseParser.LISTAGG);
                this.state = 2182;
                this.match(SqlBaseParser.T__1);
                this.state = 2184;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 283, this.context) ) {
                case 1:
                    {
                    this.state = 2183;
                    this.setQuantifier();
                    }
                    break;
                }
                this.state = 2186;
                this.expression();
                this.state = 2189;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 4) {
                    {
                    this.state = 2187;
                    this.match(SqlBaseParser.T__3);
                    this.state = 2188;
                    this.string_();
                    }
                }

                this.state = 2194;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 179) {
                    {
                    this.state = 2191;
                    this.match(SqlBaseParser.ON);
                    this.state = 2192;
                    this.match(SqlBaseParser.OVERFLOW);
                    this.state = 2193;
                    this.listAggOverflowBehavior();
                    }
                }

                this.state = 2196;
                this.match(SqlBaseParser.T__2);
                {
                this.state = 2197;
                this.match(SqlBaseParser.WITHIN);
                this.state = 2198;
                this.match(SqlBaseParser.GROUP);
                this.state = 2199;
                this.match(SqlBaseParser.T__1);
                this.state = 2200;
                this.match(SqlBaseParser.ORDER);
                this.state = 2201;
                this.match(SqlBaseParser.BY);
                this.state = 2202;
                this.sortItem();
                this.state = 2207;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2203;
                    this.match(SqlBaseParser.T__3);
                    this.state = 2204;
                    this.sortItem();
                    }
                    }
                    this.state = 2209;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2210;
                this.match(SqlBaseParser.T__2);
                }
                }
                break;
            case 14:
                {
                localContext = new FunctionCallContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2213;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 287, this.context) ) {
                case 1:
                    {
                    this.state = 2212;
                    this.processingMode();
                    }
                    break;
                }
                this.state = 2215;
                this.qualifiedName();
                this.state = 2216;
                this.match(SqlBaseParser.T__1);
                this.state = 2220;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326656) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 2152136501) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4065015227) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3031934949) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4293222273) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4271765759) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 3154050559) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4260364031) !== 0) || ((((_la - 260)) & ~0x1F) === 0 && ((1 << (_la - 260)) & 3923736439) !== 0) || ((((_la - 292)) & ~0x1F) === 0 && ((1 << (_la - 292)) & 125829135) !== 0)) {
                    {
                    this.state = 2217;
                    (localContext as FunctionCallContext)._label = this.identifier();
                    this.state = 2218;
                    this.match(SqlBaseParser.T__0);
                    }
                }

                this.state = 2222;
                this.match(SqlBaseParser.ASTERISK);
                this.state = 2223;
                this.match(SqlBaseParser.T__2);
                this.state = 2225;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 289, this.context) ) {
                case 1:
                    {
                    this.state = 2224;
                    this.filter();
                    }
                    break;
                }
                this.state = 2228;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 290, this.context) ) {
                case 1:
                    {
                    this.state = 2227;
                    this.over();
                    }
                    break;
                }
                }
                break;
            case 15:
                {
                localContext = new FunctionCallContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2231;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 291, this.context) ) {
                case 1:
                    {
                    this.state = 2230;
                    this.processingMode();
                    }
                    break;
                }
                this.state = 2233;
                this.qualifiedName();
                this.state = 2234;
                this.match(SqlBaseParser.T__1);
                this.state = 2246;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326660) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4224122869) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4283121083) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3031939045) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294926303) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4271767551) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 3154050559) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4260364031) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 2810043871) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 536621119) !== 0)) {
                    {
                    this.state = 2236;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 292, this.context) ) {
                    case 1:
                        {
                        this.state = 2235;
                        this.setQuantifier();
                        }
                        break;
                    }
                    this.state = 2238;
                    this.expression();
                    this.state = 2243;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2239;
                        this.match(SqlBaseParser.T__3);
                        this.state = 2240;
                        this.expression();
                        }
                        }
                        this.state = 2245;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2258;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 184) {
                    {
                    this.state = 2248;
                    this.match(SqlBaseParser.ORDER);
                    this.state = 2249;
                    this.match(SqlBaseParser.BY);
                    this.state = 2250;
                    this.sortItem();
                    this.state = 2255;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2251;
                        this.match(SqlBaseParser.T__3);
                        this.state = 2252;
                        this.sortItem();
                        }
                        }
                        this.state = 2257;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2260;
                this.match(SqlBaseParser.T__2);
                this.state = 2262;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 297, this.context) ) {
                case 1:
                    {
                    this.state = 2261;
                    this.filter();
                    }
                    break;
                }
                this.state = 2268;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 299, this.context) ) {
                case 1:
                    {
                    this.state = 2265;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 113 || _la === 216) {
                        {
                        this.state = 2264;
                        this.nullTreatment();
                        }
                    }

                    this.state = 2267;
                    this.over();
                    }
                    break;
                }
                }
                break;
            case 16:
                {
                localContext = new MeasureContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2270;
                this.identifier();
                this.state = 2271;
                this.over();
                }
                break;
            case 17:
                {
                localContext = new LambdaContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2273;
                this.identifier();
                this.state = 2274;
                this.match(SqlBaseParser.T__6);
                this.state = 2275;
                this.expression();
                }
                break;
            case 18:
                {
                localContext = new LambdaContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2277;
                this.match(SqlBaseParser.T__1);
                this.state = 2286;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326656) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 2152136501) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4065015227) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3031934949) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4293222273) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4271765759) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 3154050559) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4260364031) !== 0) || ((((_la - 260)) & ~0x1F) === 0 && ((1 << (_la - 260)) & 3923736439) !== 0) || ((((_la - 292)) & ~0x1F) === 0 && ((1 << (_la - 292)) & 125829135) !== 0)) {
                    {
                    this.state = 2278;
                    this.identifier();
                    this.state = 2283;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2279;
                        this.match(SqlBaseParser.T__3);
                        this.state = 2280;
                        this.identifier();
                        }
                        }
                        this.state = 2285;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2288;
                this.match(SqlBaseParser.T__2);
                this.state = 2289;
                this.match(SqlBaseParser.T__6);
                this.state = 2290;
                this.expression();
                }
                break;
            case 19:
                {
                localContext = new SubqueryExpressionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2291;
                this.match(SqlBaseParser.T__1);
                this.state = 2292;
                this.query();
                this.state = 2293;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 20:
                {
                localContext = new ExistsContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2295;
                this.match(SqlBaseParser.EXISTS);
                this.state = 2296;
                this.match(SqlBaseParser.T__1);
                this.state = 2297;
                this.query();
                this.state = 2298;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 21:
                {
                localContext = new SimpleCaseContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2300;
                this.match(SqlBaseParser.CASE);
                this.state = 2301;
                (localContext as SimpleCaseContext)._operand = this.expression();
                this.state = 2303;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2302;
                    this.whenClause();
                    }
                    }
                    this.state = 2305;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 285);
                this.state = 2309;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 79) {
                    {
                    this.state = 2307;
                    this.match(SqlBaseParser.ELSE);
                    this.state = 2308;
                    (localContext as SimpleCaseContext)._elseExpression = this.expression();
                    }
                }

                this.state = 2311;
                this.match(SqlBaseParser.END);
                }
                break;
            case 22:
                {
                localContext = new SearchedCaseContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2313;
                this.match(SqlBaseParser.CASE);
                this.state = 2315;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2314;
                    this.whenClause();
                    }
                    }
                    this.state = 2317;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 285);
                this.state = 2321;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 79) {
                    {
                    this.state = 2319;
                    this.match(SqlBaseParser.ELSE);
                    this.state = 2320;
                    (localContext as SearchedCaseContext)._elseExpression = this.expression();
                    }
                }

                this.state = 2323;
                this.match(SqlBaseParser.END);
                }
                break;
            case 23:
                {
                localContext = new CastContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2325;
                this.match(SqlBaseParser.CAST);
                this.state = 2326;
                this.match(SqlBaseParser.T__1);
                this.state = 2327;
                this.expression();
                this.state = 2328;
                this.match(SqlBaseParser.AS);
                this.state = 2329;
                this.type_(0);
                this.state = 2330;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 24:
                {
                localContext = new CastContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2332;
                this.match(SqlBaseParser.TRY_CAST);
                this.state = 2333;
                this.match(SqlBaseParser.T__1);
                this.state = 2334;
                this.expression();
                this.state = 2335;
                this.match(SqlBaseParser.AS);
                this.state = 2336;
                this.type_(0);
                this.state = 2337;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 25:
                {
                localContext = new ArrayConstructorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2339;
                this.match(SqlBaseParser.ARRAY);
                this.state = 2340;
                this.match(SqlBaseParser.T__7);
                this.state = 2349;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326660) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4224122869) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4283119035) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3031939045) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294926303) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4271767551) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 3154050559) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4260364031) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 2810043871) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 536621119) !== 0)) {
                    {
                    this.state = 2341;
                    this.expression();
                    this.state = 2346;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2342;
                        this.match(SqlBaseParser.T__3);
                        this.state = 2343;
                        this.expression();
                        }
                        }
                        this.state = 2348;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2351;
                this.match(SqlBaseParser.T__8);
                }
                break;
            case 26:
                {
                localContext = new ColumnReferenceContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2352;
                this.identifier();
                }
                break;
            case 27:
                {
                localContext = new SpecialDateTimeFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2353;
                (localContext as SpecialDateTimeFunctionContext)._name = this.match(SqlBaseParser.CURRENT_DATE);
                }
                break;
            case 28:
                {
                localContext = new SpecialDateTimeFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2354;
                (localContext as SpecialDateTimeFunctionContext)._name = this.match(SqlBaseParser.CURRENT_TIME);
                this.state = 2358;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 308, this.context) ) {
                case 1:
                    {
                    this.state = 2355;
                    this.match(SqlBaseParser.T__1);
                    this.state = 2356;
                    (localContext as SpecialDateTimeFunctionContext)._precision = this.match(SqlBaseParser.INTEGER_VALUE);
                    this.state = 2357;
                    this.match(SqlBaseParser.T__2);
                    }
                    break;
                }
                }
                break;
            case 29:
                {
                localContext = new SpecialDateTimeFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2360;
                (localContext as SpecialDateTimeFunctionContext)._name = this.match(SqlBaseParser.CURRENT_TIMESTAMP);
                this.state = 2364;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 309, this.context) ) {
                case 1:
                    {
                    this.state = 2361;
                    this.match(SqlBaseParser.T__1);
                    this.state = 2362;
                    (localContext as SpecialDateTimeFunctionContext)._precision = this.match(SqlBaseParser.INTEGER_VALUE);
                    this.state = 2363;
                    this.match(SqlBaseParser.T__2);
                    }
                    break;
                }
                }
                break;
            case 30:
                {
                localContext = new SpecialDateTimeFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2366;
                (localContext as SpecialDateTimeFunctionContext)._name = this.match(SqlBaseParser.LOCALTIME);
                this.state = 2370;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 310, this.context) ) {
                case 1:
                    {
                    this.state = 2367;
                    this.match(SqlBaseParser.T__1);
                    this.state = 2368;
                    (localContext as SpecialDateTimeFunctionContext)._precision = this.match(SqlBaseParser.INTEGER_VALUE);
                    this.state = 2369;
                    this.match(SqlBaseParser.T__2);
                    }
                    break;
                }
                }
                break;
            case 31:
                {
                localContext = new SpecialDateTimeFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2372;
                (localContext as SpecialDateTimeFunctionContext)._name = this.match(SqlBaseParser.LOCALTIMESTAMP);
                this.state = 2376;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 311, this.context) ) {
                case 1:
                    {
                    this.state = 2373;
                    this.match(SqlBaseParser.T__1);
                    this.state = 2374;
                    (localContext as SpecialDateTimeFunctionContext)._precision = this.match(SqlBaseParser.INTEGER_VALUE);
                    this.state = 2375;
                    this.match(SqlBaseParser.T__2);
                    }
                    break;
                }
                }
                break;
            case 32:
                {
                localContext = new CurrentUserContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2378;
                (localContext as CurrentUserContext)._name = this.match(SqlBaseParser.CURRENT_USER);
                }
                break;
            case 33:
                {
                localContext = new CurrentCatalogContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2379;
                (localContext as CurrentCatalogContext)._name = this.match(SqlBaseParser.CURRENT_CATALOG);
                }
                break;
            case 34:
                {
                localContext = new CurrentSchemaContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2380;
                (localContext as CurrentSchemaContext)._name = this.match(SqlBaseParser.CURRENT_SCHEMA);
                }
                break;
            case 35:
                {
                localContext = new CurrentPathContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2381;
                (localContext as CurrentPathContext)._name = this.match(SqlBaseParser.CURRENT_PATH);
                }
                break;
            case 36:
                {
                localContext = new TrimContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2382;
                this.match(SqlBaseParser.TRIM);
                this.state = 2383;
                this.match(SqlBaseParser.T__1);
                this.state = 2391;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 314, this.context) ) {
                case 1:
                    {
                    this.state = 2385;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 312, this.context) ) {
                    case 1:
                        {
                        this.state = 2384;
                        this.trimsSpecification();
                        }
                        break;
                    }
                    this.state = 2388;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326660) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4224122869) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4283119035) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3031939045) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294926303) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4271767039) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 3154050559) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4260364031) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 2810043871) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 536621119) !== 0)) {
                        {
                        this.state = 2387;
                        (localContext as TrimContext)._trimChar = this.valueExpression(0);
                        }
                    }

                    this.state = 2390;
                    this.match(SqlBaseParser.FROM);
                    }
                    break;
                }
                this.state = 2393;
                (localContext as TrimContext)._trimSource = this.valueExpression(0);
                this.state = 2394;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 37:
                {
                localContext = new TrimContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2396;
                this.match(SqlBaseParser.TRIM);
                this.state = 2397;
                this.match(SqlBaseParser.T__1);
                this.state = 2398;
                (localContext as TrimContext)._trimSource = this.valueExpression(0);
                this.state = 2399;
                this.match(SqlBaseParser.T__3);
                this.state = 2400;
                (localContext as TrimContext)._trimChar = this.valueExpression(0);
                this.state = 2401;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 38:
                {
                localContext = new SubstringContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2403;
                this.match(SqlBaseParser.SUBSTRING);
                this.state = 2404;
                this.match(SqlBaseParser.T__1);
                this.state = 2405;
                this.valueExpression(0);
                this.state = 2406;
                this.match(SqlBaseParser.FROM);
                this.state = 2407;
                this.valueExpression(0);
                this.state = 2410;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 97) {
                    {
                    this.state = 2408;
                    this.match(SqlBaseParser.FOR);
                    this.state = 2409;
                    this.valueExpression(0);
                    }
                }

                this.state = 2412;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 39:
                {
                localContext = new NormalizeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2414;
                this.match(SqlBaseParser.NORMALIZE);
                this.state = 2415;
                this.match(SqlBaseParser.T__1);
                this.state = 2416;
                this.valueExpression(0);
                this.state = 2419;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 4) {
                    {
                    this.state = 2417;
                    this.match(SqlBaseParser.T__3);
                    this.state = 2418;
                    this.normalForm();
                    }
                }

                this.state = 2421;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 40:
                {
                localContext = new ExtractContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2423;
                this.match(SqlBaseParser.EXTRACT);
                this.state = 2424;
                this.match(SqlBaseParser.T__1);
                this.state = 2425;
                this.identifier();
                this.state = 2426;
                this.match(SqlBaseParser.FROM);
                this.state = 2427;
                this.valueExpression(0);
                this.state = 2428;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 41:
                {
                localContext = new ParenthesizedExpressionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2430;
                this.match(SqlBaseParser.T__1);
                this.state = 2431;
                this.expression();
                this.state = 2432;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 42:
                {
                localContext = new GroupingOperationContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2434;
                this.match(SqlBaseParser.GROUPING);
                this.state = 2435;
                this.match(SqlBaseParser.T__1);
                this.state = 2444;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326656) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 2152136501) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4065015227) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3031934949) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4293222273) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4271765759) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 3154050559) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4260364031) !== 0) || ((((_la - 260)) & ~0x1F) === 0 && ((1 << (_la - 260)) & 3923736439) !== 0) || ((((_la - 292)) & ~0x1F) === 0 && ((1 << (_la - 292)) & 125829135) !== 0)) {
                    {
                    this.state = 2436;
                    this.qualifiedName();
                    this.state = 2441;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2437;
                        this.match(SqlBaseParser.T__3);
                        this.state = 2438;
                        this.qualifiedName();
                        }
                        }
                        this.state = 2443;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2446;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 43:
                {
                localContext = new JsonExistsContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2447;
                this.match(SqlBaseParser.JSON_EXISTS);
                this.state = 2448;
                this.match(SqlBaseParser.T__1);
                this.state = 2449;
                this.jsonPathInvocation();
                this.state = 2454;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 83 || _la === 91 || _la === 259 || _la === 269) {
                    {
                    this.state = 2450;
                    this.jsonExistsErrorBehavior();
                    this.state = 2451;
                    this.match(SqlBaseParser.ON);
                    this.state = 2452;
                    this.match(SqlBaseParser.ERROR);
                    }
                }

                this.state = 2456;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 44:
                {
                localContext = new JsonValueContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2458;
                this.match(SqlBaseParser.JSON_VALUE);
                this.state = 2459;
                this.match(SqlBaseParser.T__1);
                this.state = 2460;
                this.jsonPathInvocation();
                this.state = 2463;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 218) {
                    {
                    this.state = 2461;
                    this.match(SqlBaseParser.RETURNING);
                    this.state = 2462;
                    this.type_(0);
                    }
                }

                this.state = 2469;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 321, this.context) ) {
                case 1:
                    {
                    this.state = 2465;
                    (localContext as JsonValueContext)._emptyBehavior = this.jsonValueBehavior();
                    this.state = 2466;
                    this.match(SqlBaseParser.ON);
                    this.state = 2467;
                    this.match(SqlBaseParser.EMPTY);
                    }
                    break;
                }
                this.state = 2475;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 67 || _la === 83 || _la === 172) {
                    {
                    this.state = 2471;
                    (localContext as JsonValueContext)._errorBehavior = this.jsonValueBehavior();
                    this.state = 2472;
                    this.match(SqlBaseParser.ON);
                    this.state = 2473;
                    this.match(SqlBaseParser.ERROR);
                    }
                }

                this.state = 2477;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 45:
                {
                localContext = new JsonQueryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2479;
                this.match(SqlBaseParser.JSON_QUERY);
                this.state = 2480;
                this.match(SqlBaseParser.T__1);
                this.state = 2481;
                this.jsonPathInvocation();
                this.state = 2488;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 218) {
                    {
                    this.state = 2482;
                    this.match(SqlBaseParser.RETURNING);
                    this.state = 2483;
                    this.type_(0);
                    this.state = 2486;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 98) {
                        {
                        this.state = 2484;
                        this.match(SqlBaseParser.FORMAT);
                        this.state = 2485;
                        this.jsonRepresentation();
                        }
                    }

                    }
                }

                this.state = 2493;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288 || _la === 290) {
                    {
                    this.state = 2490;
                    this.jsonQueryWrapperBehavior();
                    this.state = 2491;
                    this.match(SqlBaseParser.WRAPPER);
                    }
                }

                this.state = 2502;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 136 || _la === 178) {
                    {
                    this.state = 2495;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 136 || _la === 178)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2496;
                    this.match(SqlBaseParser.QUOTES);
                    this.state = 2500;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 179) {
                        {
                        this.state = 2497;
                        this.match(SqlBaseParser.ON);
                        this.state = 2498;
                        this.match(SqlBaseParser.SCALAR);
                        this.state = 2499;
                        this.match(SqlBaseParser.TEXT_STRING);
                        }
                    }

                    }
                }

                this.state = 2508;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 328, this.context) ) {
                case 1:
                    {
                    this.state = 2504;
                    (localContext as JsonQueryContext)._emptyBehavior = this.jsonQueryBehavior();
                    this.state = 2505;
                    this.match(SqlBaseParser.ON);
                    this.state = 2506;
                    this.match(SqlBaseParser.EMPTY);
                    }
                    break;
                }
                this.state = 2514;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80 || _la === 83 || _la === 172) {
                    {
                    this.state = 2510;
                    (localContext as JsonQueryContext)._errorBehavior = this.jsonQueryBehavior();
                    this.state = 2511;
                    this.match(SqlBaseParser.ON);
                    this.state = 2512;
                    this.match(SqlBaseParser.ERROR);
                    }
                }

                this.state = 2516;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 46:
                {
                localContext = new JsonObjectContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2518;
                this.match(SqlBaseParser.JSON_OBJECT);
                this.state = 2519;
                this.match(SqlBaseParser.T__1);
                this.state = 2548;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 335, this.context) ) {
                case 1:
                    {
                    this.state = 2520;
                    this.jsonObjectMember();
                    this.state = 2525;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2521;
                        this.match(SqlBaseParser.T__3);
                        this.state = 2522;
                        this.jsonObjectMember();
                        }
                        }
                        this.state = 2527;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2534;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case SqlBaseParser.NULL:
                        {
                        this.state = 2528;
                        this.match(SqlBaseParser.NULL);
                        this.state = 2529;
                        this.match(SqlBaseParser.ON);
                        this.state = 2530;
                        this.match(SqlBaseParser.NULL);
                        }
                        break;
                    case SqlBaseParser.ABSENT:
                        {
                        this.state = 2531;
                        this.match(SqlBaseParser.ABSENT);
                        this.state = 2532;
                        this.match(SqlBaseParser.ON);
                        this.state = 2533;
                        this.match(SqlBaseParser.NULL);
                        }
                        break;
                    case SqlBaseParser.T__2:
                    case SqlBaseParser.RETURNING:
                    case SqlBaseParser.WITH:
                    case SqlBaseParser.WITHOUT:
                        break;
                    default:
                        break;
                    }
                    this.state = 2546;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case SqlBaseParser.WITH:
                        {
                        this.state = 2536;
                        this.match(SqlBaseParser.WITH);
                        this.state = 2537;
                        this.match(SqlBaseParser.UNIQUE);
                        this.state = 2539;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 138) {
                            {
                            this.state = 2538;
                            this.match(SqlBaseParser.KEYS);
                            }
                        }

                        }
                        break;
                    case SqlBaseParser.WITHOUT:
                        {
                        this.state = 2541;
                        this.match(SqlBaseParser.WITHOUT);
                        this.state = 2542;
                        this.match(SqlBaseParser.UNIQUE);
                        this.state = 2544;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 138) {
                            {
                            this.state = 2543;
                            this.match(SqlBaseParser.KEYS);
                            }
                        }

                        }
                        break;
                    case SqlBaseParser.T__2:
                    case SqlBaseParser.RETURNING:
                        break;
                    default:
                        break;
                    }
                    }
                    break;
                }
                this.state = 2556;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 218) {
                    {
                    this.state = 2550;
                    this.match(SqlBaseParser.RETURNING);
                    this.state = 2551;
                    this.type_(0);
                    this.state = 2554;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 98) {
                        {
                        this.state = 2552;
                        this.match(SqlBaseParser.FORMAT);
                        this.state = 2553;
                        this.jsonRepresentation();
                        }
                    }

                    }
                }

                this.state = 2558;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 47:
                {
                localContext = new JsonArrayContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2559;
                this.match(SqlBaseParser.JSON_ARRAY);
                this.state = 2560;
                this.match(SqlBaseParser.T__1);
                this.state = 2577;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 340, this.context) ) {
                case 1:
                    {
                    this.state = 2561;
                    this.jsonValueExpression();
                    this.state = 2566;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2562;
                        this.match(SqlBaseParser.T__3);
                        this.state = 2563;
                        this.jsonValueExpression();
                        }
                        }
                        this.state = 2568;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2575;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case SqlBaseParser.NULL:
                        {
                        this.state = 2569;
                        this.match(SqlBaseParser.NULL);
                        this.state = 2570;
                        this.match(SqlBaseParser.ON);
                        this.state = 2571;
                        this.match(SqlBaseParser.NULL);
                        }
                        break;
                    case SqlBaseParser.ABSENT:
                        {
                        this.state = 2572;
                        this.match(SqlBaseParser.ABSENT);
                        this.state = 2573;
                        this.match(SqlBaseParser.ON);
                        this.state = 2574;
                        this.match(SqlBaseParser.NULL);
                        }
                        break;
                    case SqlBaseParser.T__2:
                    case SqlBaseParser.RETURNING:
                        break;
                    default:
                        break;
                    }
                    }
                    break;
                }
                this.state = 2585;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 218) {
                    {
                    this.state = 2579;
                    this.match(SqlBaseParser.RETURNING);
                    this.state = 2580;
                    this.type_(0);
                    this.state = 2583;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 98) {
                        {
                        this.state = 2581;
                        this.match(SqlBaseParser.FORMAT);
                        this.state = 2582;
                        this.jsonRepresentation();
                        }
                    }

                    }
                }

                this.state = 2587;
                this.match(SqlBaseParser.T__2);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2600;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 345, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2598;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 344, this.context) ) {
                    case 1:
                        {
                        localContext = new SubscriptContext(new PrimaryExpressionContext(parentContext, parentState));
                        (localContext as SubscriptContext)._value = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SqlBaseParser.RULE_primaryExpression);
                        this.state = 2590;
                        if (!(this.precpred(this.context, 24))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 24)");
                        }
                        this.state = 2591;
                        this.match(SqlBaseParser.T__7);
                        this.state = 2592;
                        (localContext as SubscriptContext)._index = this.valueExpression(0);
                        this.state = 2593;
                        this.match(SqlBaseParser.T__8);
                        }
                        break;
                    case 2:
                        {
                        localContext = new DereferenceContext(new PrimaryExpressionContext(parentContext, parentState));
                        (localContext as DereferenceContext)._base = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SqlBaseParser.RULE_primaryExpression);
                        this.state = 2595;
                        if (!(this.precpred(this.context, 22))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 22)");
                        }
                        this.state = 2596;
                        this.match(SqlBaseParser.T__0);
                        this.state = 2597;
                        (localContext as DereferenceContext)._fieldName = this.identifier();
                        }
                        break;
                    }
                    }
                }
                this.state = 2602;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 345, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public jsonPathInvocation(): JsonPathInvocationContext {
        let localContext = new JsonPathInvocationContext(this.context, this.state);
        this.enterRule(localContext, 130, SqlBaseParser.RULE_jsonPathInvocation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2603;
            this.jsonValueExpression();
            this.state = 2604;
            this.match(SqlBaseParser.T__3);
            this.state = 2605;
            localContext._path = this.string_();
            this.state = 2608;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 28) {
                {
                this.state = 2606;
                this.match(SqlBaseParser.AS);
                this.state = 2607;
                localContext._pathName = this.identifier();
                }
            }

            this.state = 2619;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 192) {
                {
                this.state = 2610;
                this.match(SqlBaseParser.PASSING);
                this.state = 2611;
                this.jsonArgument();
                this.state = 2616;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2612;
                    this.match(SqlBaseParser.T__3);
                    this.state = 2613;
                    this.jsonArgument();
                    }
                    }
                    this.state = 2618;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonValueExpression(): JsonValueExpressionContext {
        let localContext = new JsonValueExpressionContext(this.context, this.state);
        this.enterRule(localContext, 132, SqlBaseParser.RULE_jsonValueExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2621;
            this.expression();
            this.state = 2624;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 98) {
                {
                this.state = 2622;
                this.match(SqlBaseParser.FORMAT);
                this.state = 2623;
                this.jsonRepresentation();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonRepresentation(): JsonRepresentationContext {
        let localContext = new JsonRepresentationContext(this.context, this.state);
        this.enterRule(localContext, 134, SqlBaseParser.RULE_jsonRepresentation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2626;
            this.match(SqlBaseParser.JSON);
            this.state = 2629;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 81) {
                {
                this.state = 2627;
                this.match(SqlBaseParser.ENCODING);
                this.state = 2628;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 7) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonArgument(): JsonArgumentContext {
        let localContext = new JsonArgumentContext(this.context, this.state);
        this.enterRule(localContext, 136, SqlBaseParser.RULE_jsonArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2631;
            this.jsonValueExpression();
            this.state = 2632;
            this.match(SqlBaseParser.AS);
            this.state = 2633;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonExistsErrorBehavior(): JsonExistsErrorBehaviorContext {
        let localContext = new JsonExistsErrorBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 138, SqlBaseParser.RULE_jsonExistsErrorBehavior);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2635;
            _la = this.tokenStream.LA(1);
            if(!(_la === 83 || _la === 91 || _la === 259 || _la === 269)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonValueBehavior(): JsonValueBehaviorContext {
        let localContext = new JsonValueBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 140, SqlBaseParser.RULE_jsonValueBehavior);
        try {
            this.state = 2641;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.ERROR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2637;
                this.match(SqlBaseParser.ERROR);
                }
                break;
            case SqlBaseParser.NULL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2638;
                this.match(SqlBaseParser.NULL);
                }
                break;
            case SqlBaseParser.DEFAULT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2639;
                this.match(SqlBaseParser.DEFAULT);
                this.state = 2640;
                this.expression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonQueryWrapperBehavior(): JsonQueryWrapperBehaviorContext {
        let localContext = new JsonQueryWrapperBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 142, SqlBaseParser.RULE_jsonQueryWrapperBehavior);
        let _la: number;
        try {
            this.state = 2654;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.WITHOUT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2643;
                this.match(SqlBaseParser.WITHOUT);
                this.state = 2645;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 27) {
                    {
                    this.state = 2644;
                    this.match(SqlBaseParser.ARRAY);
                    }
                }

                }
                break;
            case SqlBaseParser.WITH:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2647;
                this.match(SqlBaseParser.WITH);
                this.state = 2649;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 47 || _la === 266) {
                    {
                    this.state = 2648;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 47 || _la === 266)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2652;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 27) {
                    {
                    this.state = 2651;
                    this.match(SqlBaseParser.ARRAY);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonQueryBehavior(): JsonQueryBehaviorContext {
        let localContext = new JsonQueryBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 144, SqlBaseParser.RULE_jsonQueryBehavior);
        try {
            this.state = 2662;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 356, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2656;
                this.match(SqlBaseParser.ERROR);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2657;
                this.match(SqlBaseParser.NULL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2658;
                this.match(SqlBaseParser.EMPTY);
                this.state = 2659;
                this.match(SqlBaseParser.ARRAY);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2660;
                this.match(SqlBaseParser.EMPTY);
                this.state = 2661;
                this.match(SqlBaseParser.OBJECT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonObjectMember(): JsonObjectMemberContext {
        let localContext = new JsonObjectMemberContext(this.context, this.state);
        this.enterRule(localContext, 146, SqlBaseParser.RULE_jsonObjectMember);
        try {
            this.state = 2675;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 358, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2665;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 357, this.context) ) {
                case 1:
                    {
                    this.state = 2664;
                    this.match(SqlBaseParser.KEY);
                    }
                    break;
                }
                this.state = 2667;
                this.expression();
                this.state = 2668;
                this.match(SqlBaseParser.VALUE);
                this.state = 2669;
                this.jsonValueExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2671;
                this.expression();
                this.state = 2672;
                this.match(SqlBaseParser.T__9);
                this.state = 2673;
                this.jsonValueExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public processingMode(): ProcessingModeContext {
        let localContext = new ProcessingModeContext(this.context, this.state);
        this.enterRule(localContext, 148, SqlBaseParser.RULE_processingMode);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2677;
            _la = this.tokenStream.LA(1);
            if(!(_la === 94 || _la === 227)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nullTreatment(): NullTreatmentContext {
        let localContext = new NullTreatmentContext(this.context, this.state);
        this.enterRule(localContext, 150, SqlBaseParser.RULE_nullTreatment);
        try {
            this.state = 2683;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.IGNORE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2679;
                this.match(SqlBaseParser.IGNORE);
                this.state = 2680;
                this.match(SqlBaseParser.NULLS);
                }
                break;
            case SqlBaseParser.RESPECT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2681;
                this.match(SqlBaseParser.RESPECT);
                this.state = 2682;
                this.match(SqlBaseParser.NULLS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public string_(): StringContext {
        let localContext = new StringContext(this.context, this.state);
        this.enterRule(localContext, 152, SqlBaseParser.RULE_string);
        try {
            this.state = 2691;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.STRING:
                localContext = new BasicStringLiteralContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2685;
                this.match(SqlBaseParser.STRING);
                }
                break;
            case SqlBaseParser.UNICODE_STRING:
                localContext = new UnicodeStringLiteralContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2686;
                this.match(SqlBaseParser.UNICODE_STRING);
                this.state = 2689;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 360, this.context) ) {
                case 1:
                    {
                    this.state = 2687;
                    this.match(SqlBaseParser.UESCAPE);
                    this.state = 2688;
                    this.match(SqlBaseParser.STRING);
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timeZoneSpecifier(): TimeZoneSpecifierContext {
        let localContext = new TimeZoneSpecifierContext(this.context, this.state);
        this.enterRule(localContext, 154, SqlBaseParser.RULE_timeZoneSpecifier);
        try {
            this.state = 2699;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 362, this.context) ) {
            case 1:
                localContext = new TimeZoneIntervalContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2693;
                this.match(SqlBaseParser.TIME);
                this.state = 2694;
                this.match(SqlBaseParser.ZONE);
                this.state = 2695;
                this.interval();
                }
                break;
            case 2:
                localContext = new TimeZoneStringContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2696;
                this.match(SqlBaseParser.TIME);
                this.state = 2697;
                this.match(SqlBaseParser.ZONE);
                this.state = 2698;
                this.string_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public comparisonOperator(): ComparisonOperatorContext {
        let localContext = new ComparisonOperatorContext(this.context, this.state);
        this.enterRule(localContext, 156, SqlBaseParser.RULE_comparisonOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2701;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 296)) & ~0x1F) === 0 && ((1 << (_la - 296)) & 63) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public comparisonQuantifier(): ComparisonQuantifierContext {
        let localContext = new ComparisonQuantifierContext(this.context, this.state);
        this.enterRule(localContext, 158, SqlBaseParser.RULE_comparisonQuantifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2703;
            _la = this.tokenStream.LA(1);
            if(!(_la === 22 || _la === 26 || _la === 240)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public booleanValue(): BooleanValueContext {
        let localContext = new BooleanValueContext(this.context, this.state);
        this.enterRule(localContext, 160, SqlBaseParser.RULE_booleanValue);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2705;
            _la = this.tokenStream.LA(1);
            if(!(_la === 91 || _la === 259)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public interval(): IntervalContext {
        let localContext = new IntervalContext(this.context, this.state);
        this.enterRule(localContext, 162, SqlBaseParser.RULE_interval);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2707;
            this.match(SqlBaseParser.INTERVAL);
            this.state = 2709;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 302 || _la === 303) {
                {
                this.state = 2708;
                localContext._sign = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 302 || _la === 303)) {
                    localContext._sign = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 2711;
            this.string_();
            this.state = 2712;
            localContext._from_ = this.intervalField();
            this.state = 2715;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 364, this.context) ) {
            case 1:
                {
                this.state = 2713;
                this.match(SqlBaseParser.TO);
                this.state = 2714;
                localContext._to = this.intervalField();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalField(): IntervalFieldContext {
        let localContext = new IntervalFieldContext(this.context, this.state);
        this.enterRule(localContext, 164, SqlBaseParser.RULE_intervalField);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2717;
            _la = this.tokenStream.LA(1);
            if(!(_la === 65 || _la === 111 || _la === 159 || _la === 160 || _la === 231 || _la === 294)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public normalForm(): NormalFormContext {
        let localContext = new NormalFormContext(this.context, this.state);
        this.enterRule(localContext, 166, SqlBaseParser.RULE_normalForm);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2719;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 164)) & ~0x1F) === 0 && ((1 << (_la - 164)) & 15) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public type_(): TypeContext;
    public type_(_p: number): TypeContext;
    public type_(_p?: number): TypeContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new TypeContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 168;
        this.enterRecursionRule(localContext, 168, SqlBaseParser.RULE_type, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2812;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 375, this.context) ) {
            case 1:
                {
                localContext = new RowTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2722;
                this.match(SqlBaseParser.ROW);
                this.state = 2723;
                this.match(SqlBaseParser.T__1);
                this.state = 2724;
                this.rowField();
                this.state = 2729;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2725;
                    this.match(SqlBaseParser.T__3);
                    this.state = 2726;
                    this.rowField();
                    }
                    }
                    this.state = 2731;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2732;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 2:
                {
                localContext = new IntervalTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2734;
                this.match(SqlBaseParser.INTERVAL);
                this.state = 2735;
                (localContext as IntervalTypeContext)._from_ = this.intervalField();
                this.state = 2738;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 366, this.context) ) {
                case 1:
                    {
                    this.state = 2736;
                    this.match(SqlBaseParser.TO);
                    this.state = 2737;
                    (localContext as IntervalTypeContext)._to = this.intervalField();
                    }
                    break;
                }
                }
                break;
            case 3:
                {
                localContext = new DateTimeTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2740;
                (localContext as DateTimeTypeContext)._base = this.match(SqlBaseParser.TIMESTAMP);
                this.state = 2745;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 367, this.context) ) {
                case 1:
                    {
                    this.state = 2741;
                    this.match(SqlBaseParser.T__1);
                    this.state = 2742;
                    (localContext as DateTimeTypeContext)._precision = this.typeParameter();
                    this.state = 2743;
                    this.match(SqlBaseParser.T__2);
                    }
                    break;
                }
                this.state = 2750;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 368, this.context) ) {
                case 1:
                    {
                    this.state = 2747;
                    this.match(SqlBaseParser.WITHOUT);
                    this.state = 2748;
                    this.match(SqlBaseParser.TIME);
                    this.state = 2749;
                    this.match(SqlBaseParser.ZONE);
                    }
                    break;
                }
                }
                break;
            case 4:
                {
                localContext = new DateTimeTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2752;
                (localContext as DateTimeTypeContext)._base = this.match(SqlBaseParser.TIMESTAMP);
                this.state = 2757;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 2753;
                    this.match(SqlBaseParser.T__1);
                    this.state = 2754;
                    (localContext as DateTimeTypeContext)._precision = this.typeParameter();
                    this.state = 2755;
                    this.match(SqlBaseParser.T__2);
                    }
                }

                this.state = 2759;
                this.match(SqlBaseParser.WITH);
                this.state = 2760;
                this.match(SqlBaseParser.TIME);
                this.state = 2761;
                this.match(SqlBaseParser.ZONE);
                }
                break;
            case 5:
                {
                localContext = new DateTimeTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2762;
                (localContext as DateTimeTypeContext)._base = this.match(SqlBaseParser.TIME);
                this.state = 2767;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 370, this.context) ) {
                case 1:
                    {
                    this.state = 2763;
                    this.match(SqlBaseParser.T__1);
                    this.state = 2764;
                    (localContext as DateTimeTypeContext)._precision = this.typeParameter();
                    this.state = 2765;
                    this.match(SqlBaseParser.T__2);
                    }
                    break;
                }
                this.state = 2772;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 371, this.context) ) {
                case 1:
                    {
                    this.state = 2769;
                    this.match(SqlBaseParser.WITHOUT);
                    this.state = 2770;
                    this.match(SqlBaseParser.TIME);
                    this.state = 2771;
                    this.match(SqlBaseParser.ZONE);
                    }
                    break;
                }
                }
                break;
            case 6:
                {
                localContext = new DateTimeTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2774;
                (localContext as DateTimeTypeContext)._base = this.match(SqlBaseParser.TIME);
                this.state = 2779;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 2775;
                    this.match(SqlBaseParser.T__1);
                    this.state = 2776;
                    (localContext as DateTimeTypeContext)._precision = this.typeParameter();
                    this.state = 2777;
                    this.match(SqlBaseParser.T__2);
                    }
                }

                this.state = 2781;
                this.match(SqlBaseParser.WITH);
                this.state = 2782;
                this.match(SqlBaseParser.TIME);
                this.state = 2783;
                this.match(SqlBaseParser.ZONE);
                }
                break;
            case 7:
                {
                localContext = new DoublePrecisionTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2784;
                this.match(SqlBaseParser.DOUBLE);
                this.state = 2785;
                this.match(SqlBaseParser.PRECISION);
                }
                break;
            case 8:
                {
                localContext = new LegacyArrayTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2786;
                this.match(SqlBaseParser.ARRAY);
                this.state = 2787;
                this.match(SqlBaseParser.LT);
                this.state = 2788;
                this.type_(0);
                this.state = 2789;
                this.match(SqlBaseParser.GT);
                }
                break;
            case 9:
                {
                localContext = new LegacyMapTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2791;
                this.match(SqlBaseParser.MAP);
                this.state = 2792;
                this.match(SqlBaseParser.LT);
                this.state = 2793;
                (localContext as LegacyMapTypeContext)._keyType = this.type_(0);
                this.state = 2794;
                this.match(SqlBaseParser.T__3);
                this.state = 2795;
                (localContext as LegacyMapTypeContext)._valueType = this.type_(0);
                this.state = 2796;
                this.match(SqlBaseParser.GT);
                }
                break;
            case 10:
                {
                localContext = new GenericTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2798;
                this.identifier();
                this.state = 2810;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 374, this.context) ) {
                case 1:
                    {
                    this.state = 2799;
                    this.match(SqlBaseParser.T__1);
                    this.state = 2800;
                    this.typeParameter();
                    this.state = 2805;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2801;
                        this.match(SqlBaseParser.T__3);
                        this.state = 2802;
                        this.typeParameter();
                        }
                        }
                        this.state = 2807;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2808;
                    this.match(SqlBaseParser.T__2);
                    }
                    break;
                }
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2823;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 377, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    {
                    localContext = new ArrayTypeContext(new TypeContext(parentContext, parentState));
                    this.pushNewRecursionContext(localContext, _startState, SqlBaseParser.RULE_type);
                    this.state = 2814;
                    if (!(this.precpred(this.context, 2))) {
                        throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                    }
                    this.state = 2815;
                    this.match(SqlBaseParser.ARRAY);
                    this.state = 2819;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 376, this.context) ) {
                    case 1:
                        {
                        this.state = 2816;
                        this.match(SqlBaseParser.T__7);
                        this.state = 2817;
                        this.match(SqlBaseParser.INTEGER_VALUE);
                        this.state = 2818;
                        this.match(SqlBaseParser.T__8);
                        }
                        break;
                    }
                    }
                    }
                }
                this.state = 2825;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 377, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public rowField(): RowFieldContext {
        let localContext = new RowFieldContext(this.context, this.state);
        this.enterRule(localContext, 170, SqlBaseParser.RULE_rowField);
        try {
            this.state = 2830;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 378, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2826;
                this.type_(0);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2827;
                this.identifier();
                this.state = 2828;
                this.type_(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public typeParameter(): TypeParameterContext {
        let localContext = new TypeParameterContext(this.context, this.state);
        this.enterRule(localContext, 172, SqlBaseParser.RULE_typeParameter);
        try {
            this.state = 2834;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.INTEGER_VALUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2832;
                this.match(SqlBaseParser.INTEGER_VALUE);
                }
                break;
            case SqlBaseParser.ABSENT:
            case SqlBaseParser.ADD:
            case SqlBaseParser.ADMIN:
            case SqlBaseParser.AFTER:
            case SqlBaseParser.ALL:
            case SqlBaseParser.ANALYZE:
            case SqlBaseParser.ANY:
            case SqlBaseParser.ARRAY:
            case SqlBaseParser.ASC:
            case SqlBaseParser.AT:
            case SqlBaseParser.AUTHORIZATION:
            case SqlBaseParser.BERNOULLI:
            case SqlBaseParser.BOTH:
            case SqlBaseParser.CALL:
            case SqlBaseParser.CASCADE:
            case SqlBaseParser.CATALOG:
            case SqlBaseParser.CATALOGS:
            case SqlBaseParser.COLUMN:
            case SqlBaseParser.COLUMNS:
            case SqlBaseParser.COMMENT:
            case SqlBaseParser.COMMIT:
            case SqlBaseParser.COMMITTED:
            case SqlBaseParser.CONDITIONAL:
            case SqlBaseParser.COUNT:
            case SqlBaseParser.COPARTITION:
            case SqlBaseParser.CURRENT:
            case SqlBaseParser.DATA:
            case SqlBaseParser.DATE:
            case SqlBaseParser.DAY:
            case SqlBaseParser.DEFAULT:
            case SqlBaseParser.DEFINE:
            case SqlBaseParser.DEFINER:
            case SqlBaseParser.DENY:
            case SqlBaseParser.DESC:
            case SqlBaseParser.DESCRIPTOR:
            case SqlBaseParser.DISTRIBUTED:
            case SqlBaseParser.DOUBLE:
            case SqlBaseParser.EMPTY:
            case SqlBaseParser.ENCODING:
            case SqlBaseParser.ERROR:
            case SqlBaseParser.EXCLUDING:
            case SqlBaseParser.EXPLAIN:
            case SqlBaseParser.FETCH:
            case SqlBaseParser.FILTER:
            case SqlBaseParser.FINAL:
            case SqlBaseParser.FIRST:
            case SqlBaseParser.FOLLOWING:
            case SqlBaseParser.FORMAT:
            case SqlBaseParser.FUNCTIONS:
            case SqlBaseParser.GRACE:
            case SqlBaseParser.GRANT:
            case SqlBaseParser.GRANTED:
            case SqlBaseParser.GRANTS:
            case SqlBaseParser.GRAPHVIZ:
            case SqlBaseParser.GROUPS:
            case SqlBaseParser.HOUR:
            case SqlBaseParser.IF:
            case SqlBaseParser.IGNORE:
            case SqlBaseParser.IMMEDIATE:
            case SqlBaseParser.INCLUDING:
            case SqlBaseParser.INITIAL:
            case SqlBaseParser.INPUT:
            case SqlBaseParser.INTERVAL:
            case SqlBaseParser.INVOKER:
            case SqlBaseParser.IO:
            case SqlBaseParser.ISOLATION:
            case SqlBaseParser.JSON:
            case SqlBaseParser.KEEP:
            case SqlBaseParser.KEY:
            case SqlBaseParser.KEYS:
            case SqlBaseParser.LAST:
            case SqlBaseParser.LATERAL:
            case SqlBaseParser.LEADING:
            case SqlBaseParser.LEVEL:
            case SqlBaseParser.LIMIT:
            case SqlBaseParser.LOCAL:
            case SqlBaseParser.LOGICAL:
            case SqlBaseParser.MAP:
            case SqlBaseParser.MATCH:
            case SqlBaseParser.MATCHED:
            case SqlBaseParser.MATCHES:
            case SqlBaseParser.MATCH_RECOGNIZE:
            case SqlBaseParser.MATERIALIZED:
            case SqlBaseParser.MEASURES:
            case SqlBaseParser.MERGE:
            case SqlBaseParser.MINUTE:
            case SqlBaseParser.MONTH:
            case SqlBaseParser.NESTED:
            case SqlBaseParser.NEXT:
            case SqlBaseParser.NFC:
            case SqlBaseParser.NFD:
            case SqlBaseParser.NFKC:
            case SqlBaseParser.NFKD:
            case SqlBaseParser.NO:
            case SqlBaseParser.NONE:
            case SqlBaseParser.NULLIF:
            case SqlBaseParser.NULLS:
            case SqlBaseParser.OBJECT:
            case SqlBaseParser.OF:
            case SqlBaseParser.OFFSET:
            case SqlBaseParser.OMIT:
            case SqlBaseParser.ONE:
            case SqlBaseParser.ONLY:
            case SqlBaseParser.OPTION:
            case SqlBaseParser.ORDINALITY:
            case SqlBaseParser.OUTPUT:
            case SqlBaseParser.OVER:
            case SqlBaseParser.OVERFLOW:
            case SqlBaseParser.PARTITION:
            case SqlBaseParser.PARTITIONS:
            case SqlBaseParser.PASSING:
            case SqlBaseParser.PAST:
            case SqlBaseParser.PATH:
            case SqlBaseParser.PATTERN:
            case SqlBaseParser.PER:
            case SqlBaseParser.PERIOD:
            case SqlBaseParser.PERMUTE:
            case SqlBaseParser.PLAN:
            case SqlBaseParser.POSITION:
            case SqlBaseParser.PRECEDING:
            case SqlBaseParser.PRECISION:
            case SqlBaseParser.PRIVILEGES:
            case SqlBaseParser.PROPERTIES:
            case SqlBaseParser.PRUNE:
            case SqlBaseParser.QUOTES:
            case SqlBaseParser.RANGE:
            case SqlBaseParser.READ:
            case SqlBaseParser.REFRESH:
            case SqlBaseParser.RENAME:
            case SqlBaseParser.REPEATABLE:
            case SqlBaseParser.REPLACE:
            case SqlBaseParser.RESET:
            case SqlBaseParser.RESPECT:
            case SqlBaseParser.RESTRICT:
            case SqlBaseParser.RETURNING:
            case SqlBaseParser.REVOKE:
            case SqlBaseParser.ROLE:
            case SqlBaseParser.ROLES:
            case SqlBaseParser.ROLLBACK:
            case SqlBaseParser.ROW:
            case SqlBaseParser.ROWS:
            case SqlBaseParser.RUNNING:
            case SqlBaseParser.SCALAR:
            case SqlBaseParser.SCHEMA:
            case SqlBaseParser.SCHEMAS:
            case SqlBaseParser.SECOND:
            case SqlBaseParser.SECURITY:
            case SqlBaseParser.SEEK:
            case SqlBaseParser.SERIALIZABLE:
            case SqlBaseParser.SESSION:
            case SqlBaseParser.SET:
            case SqlBaseParser.SETS:
            case SqlBaseParser.SHOW:
            case SqlBaseParser.SOME:
            case SqlBaseParser.START:
            case SqlBaseParser.STATS:
            case SqlBaseParser.SUBSET:
            case SqlBaseParser.SUBSTRING:
            case SqlBaseParser.SYSTEM:
            case SqlBaseParser.TABLES:
            case SqlBaseParser.TABLESAMPLE:
            case SqlBaseParser.TEXT:
            case SqlBaseParser.TEXT_STRING:
            case SqlBaseParser.TIES:
            case SqlBaseParser.TIME:
            case SqlBaseParser.TIMESTAMP:
            case SqlBaseParser.TO:
            case SqlBaseParser.TRAILING:
            case SqlBaseParser.TRANSACTION:
            case SqlBaseParser.TRUNCATE:
            case SqlBaseParser.TRY_CAST:
            case SqlBaseParser.TYPE:
            case SqlBaseParser.UNBOUNDED:
            case SqlBaseParser.UNCOMMITTED:
            case SqlBaseParser.UNCONDITIONAL:
            case SqlBaseParser.UNIQUE:
            case SqlBaseParser.UNKNOWN:
            case SqlBaseParser.UNMATCHED:
            case SqlBaseParser.UPDATE:
            case SqlBaseParser.USE:
            case SqlBaseParser.USER:
            case SqlBaseParser.UTF16:
            case SqlBaseParser.UTF32:
            case SqlBaseParser.UTF8:
            case SqlBaseParser.VALIDATE:
            case SqlBaseParser.VALUE:
            case SqlBaseParser.VERBOSE:
            case SqlBaseParser.VERSION:
            case SqlBaseParser.VIEW:
            case SqlBaseParser.WINDOW:
            case SqlBaseParser.WITHIN:
            case SqlBaseParser.WITHOUT:
            case SqlBaseParser.WORK:
            case SqlBaseParser.WRAPPER:
            case SqlBaseParser.WRITE:
            case SqlBaseParser.YEAR:
            case SqlBaseParser.ZONE:
            case SqlBaseParser.IDENTIFIER:
            case SqlBaseParser.DIGIT_IDENTIFIER:
            case SqlBaseParser.QUOTED_IDENTIFIER:
            case SqlBaseParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2833;
                this.type_(0);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenClause(): WhenClauseContext {
        let localContext = new WhenClauseContext(this.context, this.state);
        this.enterRule(localContext, 174, SqlBaseParser.RULE_whenClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2836;
            this.match(SqlBaseParser.WHEN);
            this.state = 2837;
            localContext._condition = this.expression();
            this.state = 2838;
            this.match(SqlBaseParser.THEN);
            this.state = 2839;
            localContext._result = this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filter(): FilterContext {
        let localContext = new FilterContext(this.context, this.state);
        this.enterRule(localContext, 176, SqlBaseParser.RULE_filter);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2841;
            this.match(SqlBaseParser.FILTER);
            this.state = 2842;
            this.match(SqlBaseParser.T__1);
            this.state = 2843;
            this.match(SqlBaseParser.WHERE);
            this.state = 2844;
            this.booleanExpression(0);
            this.state = 2845;
            this.match(SqlBaseParser.T__2);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mergeCase(): MergeCaseContext {
        let localContext = new MergeCaseContext(this.context, this.state);
        this.enterRule(localContext, 178, SqlBaseParser.RULE_mergeCase);
        let _la: number;
        try {
            this.state = 2911;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 387, this.context) ) {
            case 1:
                localContext = new MergeUpdateContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2847;
                this.match(SqlBaseParser.WHEN);
                this.state = 2848;
                this.match(SqlBaseParser.MATCHED);
                this.state = 2851;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 2849;
                    this.match(SqlBaseParser.AND);
                    this.state = 2850;
                    (localContext as MergeUpdateContext)._condition = this.expression();
                    }
                }

                this.state = 2853;
                this.match(SqlBaseParser.THEN);
                this.state = 2854;
                this.match(SqlBaseParser.UPDATE);
                this.state = 2855;
                this.match(SqlBaseParser.SET);
                this.state = 2856;
                (localContext as MergeUpdateContext)._identifier = this.identifier();
                (localContext as MergeUpdateContext)._targets.push((localContext as MergeUpdateContext)._identifier!);
                this.state = 2857;
                this.match(SqlBaseParser.EQ);
                this.state = 2858;
                (localContext as MergeUpdateContext)._expression = this.expression();
                (localContext as MergeUpdateContext)._values.push((localContext as MergeUpdateContext)._expression!);
                this.state = 2866;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2859;
                    this.match(SqlBaseParser.T__3);
                    this.state = 2860;
                    (localContext as MergeUpdateContext)._identifier = this.identifier();
                    (localContext as MergeUpdateContext)._targets.push((localContext as MergeUpdateContext)._identifier!);
                    this.state = 2861;
                    this.match(SqlBaseParser.EQ);
                    this.state = 2862;
                    (localContext as MergeUpdateContext)._expression = this.expression();
                    (localContext as MergeUpdateContext)._values.push((localContext as MergeUpdateContext)._expression!);
                    }
                    }
                    this.state = 2868;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                localContext = new MergeDeleteContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2869;
                this.match(SqlBaseParser.WHEN);
                this.state = 2870;
                this.match(SqlBaseParser.MATCHED);
                this.state = 2873;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 2871;
                    this.match(SqlBaseParser.AND);
                    this.state = 2872;
                    (localContext as MergeDeleteContext)._condition = this.expression();
                    }
                }

                this.state = 2875;
                this.match(SqlBaseParser.THEN);
                this.state = 2876;
                this.match(SqlBaseParser.DELETE);
                }
                break;
            case 3:
                localContext = new MergeInsertContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2877;
                this.match(SqlBaseParser.WHEN);
                this.state = 2878;
                this.match(SqlBaseParser.NOT);
                this.state = 2879;
                this.match(SqlBaseParser.MATCHED);
                this.state = 2882;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 2880;
                    this.match(SqlBaseParser.AND);
                    this.state = 2881;
                    (localContext as MergeInsertContext)._condition = this.expression();
                    }
                }

                this.state = 2884;
                this.match(SqlBaseParser.THEN);
                this.state = 2885;
                this.match(SqlBaseParser.INSERT);
                this.state = 2897;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 2886;
                    this.match(SqlBaseParser.T__1);
                    this.state = 2887;
                    (localContext as MergeInsertContext)._identifier = this.identifier();
                    (localContext as MergeInsertContext)._targets.push((localContext as MergeInsertContext)._identifier!);
                    this.state = 2892;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2888;
                        this.match(SqlBaseParser.T__3);
                        this.state = 2889;
                        (localContext as MergeInsertContext)._identifier = this.identifier();
                        (localContext as MergeInsertContext)._targets.push((localContext as MergeInsertContext)._identifier!);
                        }
                        }
                        this.state = 2894;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2895;
                    this.match(SqlBaseParser.T__2);
                    }
                }

                this.state = 2899;
                this.match(SqlBaseParser.VALUES);
                this.state = 2900;
                this.match(SqlBaseParser.T__1);
                this.state = 2901;
                (localContext as MergeInsertContext)._expression = this.expression();
                (localContext as MergeInsertContext)._values.push((localContext as MergeInsertContext)._expression!);
                this.state = 2906;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2902;
                    this.match(SqlBaseParser.T__3);
                    this.state = 2903;
                    (localContext as MergeInsertContext)._expression = this.expression();
                    (localContext as MergeInsertContext)._values.push((localContext as MergeInsertContext)._expression!);
                    }
                    }
                    this.state = 2908;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2909;
                this.match(SqlBaseParser.T__2);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public over(): OverContext {
        let localContext = new OverContext(this.context, this.state);
        this.enterRule(localContext, 180, SqlBaseParser.RULE_over);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2913;
            this.match(SqlBaseParser.OVER);
            this.state = 2919;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.ABSENT:
            case SqlBaseParser.ADD:
            case SqlBaseParser.ADMIN:
            case SqlBaseParser.AFTER:
            case SqlBaseParser.ALL:
            case SqlBaseParser.ANALYZE:
            case SqlBaseParser.ANY:
            case SqlBaseParser.ARRAY:
            case SqlBaseParser.ASC:
            case SqlBaseParser.AT:
            case SqlBaseParser.AUTHORIZATION:
            case SqlBaseParser.BERNOULLI:
            case SqlBaseParser.BOTH:
            case SqlBaseParser.CALL:
            case SqlBaseParser.CASCADE:
            case SqlBaseParser.CATALOG:
            case SqlBaseParser.CATALOGS:
            case SqlBaseParser.COLUMN:
            case SqlBaseParser.COLUMNS:
            case SqlBaseParser.COMMENT:
            case SqlBaseParser.COMMIT:
            case SqlBaseParser.COMMITTED:
            case SqlBaseParser.CONDITIONAL:
            case SqlBaseParser.COUNT:
            case SqlBaseParser.COPARTITION:
            case SqlBaseParser.CURRENT:
            case SqlBaseParser.DATA:
            case SqlBaseParser.DATE:
            case SqlBaseParser.DAY:
            case SqlBaseParser.DEFAULT:
            case SqlBaseParser.DEFINE:
            case SqlBaseParser.DEFINER:
            case SqlBaseParser.DENY:
            case SqlBaseParser.DESC:
            case SqlBaseParser.DESCRIPTOR:
            case SqlBaseParser.DISTRIBUTED:
            case SqlBaseParser.DOUBLE:
            case SqlBaseParser.EMPTY:
            case SqlBaseParser.ENCODING:
            case SqlBaseParser.ERROR:
            case SqlBaseParser.EXCLUDING:
            case SqlBaseParser.EXPLAIN:
            case SqlBaseParser.FETCH:
            case SqlBaseParser.FILTER:
            case SqlBaseParser.FINAL:
            case SqlBaseParser.FIRST:
            case SqlBaseParser.FOLLOWING:
            case SqlBaseParser.FORMAT:
            case SqlBaseParser.FUNCTIONS:
            case SqlBaseParser.GRACE:
            case SqlBaseParser.GRANT:
            case SqlBaseParser.GRANTED:
            case SqlBaseParser.GRANTS:
            case SqlBaseParser.GRAPHVIZ:
            case SqlBaseParser.GROUPS:
            case SqlBaseParser.HOUR:
            case SqlBaseParser.IF:
            case SqlBaseParser.IGNORE:
            case SqlBaseParser.IMMEDIATE:
            case SqlBaseParser.INCLUDING:
            case SqlBaseParser.INITIAL:
            case SqlBaseParser.INPUT:
            case SqlBaseParser.INTERVAL:
            case SqlBaseParser.INVOKER:
            case SqlBaseParser.IO:
            case SqlBaseParser.ISOLATION:
            case SqlBaseParser.JSON:
            case SqlBaseParser.KEEP:
            case SqlBaseParser.KEY:
            case SqlBaseParser.KEYS:
            case SqlBaseParser.LAST:
            case SqlBaseParser.LATERAL:
            case SqlBaseParser.LEADING:
            case SqlBaseParser.LEVEL:
            case SqlBaseParser.LIMIT:
            case SqlBaseParser.LOCAL:
            case SqlBaseParser.LOGICAL:
            case SqlBaseParser.MAP:
            case SqlBaseParser.MATCH:
            case SqlBaseParser.MATCHED:
            case SqlBaseParser.MATCHES:
            case SqlBaseParser.MATCH_RECOGNIZE:
            case SqlBaseParser.MATERIALIZED:
            case SqlBaseParser.MEASURES:
            case SqlBaseParser.MERGE:
            case SqlBaseParser.MINUTE:
            case SqlBaseParser.MONTH:
            case SqlBaseParser.NESTED:
            case SqlBaseParser.NEXT:
            case SqlBaseParser.NFC:
            case SqlBaseParser.NFD:
            case SqlBaseParser.NFKC:
            case SqlBaseParser.NFKD:
            case SqlBaseParser.NO:
            case SqlBaseParser.NONE:
            case SqlBaseParser.NULLIF:
            case SqlBaseParser.NULLS:
            case SqlBaseParser.OBJECT:
            case SqlBaseParser.OF:
            case SqlBaseParser.OFFSET:
            case SqlBaseParser.OMIT:
            case SqlBaseParser.ONE:
            case SqlBaseParser.ONLY:
            case SqlBaseParser.OPTION:
            case SqlBaseParser.ORDINALITY:
            case SqlBaseParser.OUTPUT:
            case SqlBaseParser.OVER:
            case SqlBaseParser.OVERFLOW:
            case SqlBaseParser.PARTITION:
            case SqlBaseParser.PARTITIONS:
            case SqlBaseParser.PASSING:
            case SqlBaseParser.PAST:
            case SqlBaseParser.PATH:
            case SqlBaseParser.PATTERN:
            case SqlBaseParser.PER:
            case SqlBaseParser.PERIOD:
            case SqlBaseParser.PERMUTE:
            case SqlBaseParser.PLAN:
            case SqlBaseParser.POSITION:
            case SqlBaseParser.PRECEDING:
            case SqlBaseParser.PRECISION:
            case SqlBaseParser.PRIVILEGES:
            case SqlBaseParser.PROPERTIES:
            case SqlBaseParser.PRUNE:
            case SqlBaseParser.QUOTES:
            case SqlBaseParser.RANGE:
            case SqlBaseParser.READ:
            case SqlBaseParser.REFRESH:
            case SqlBaseParser.RENAME:
            case SqlBaseParser.REPEATABLE:
            case SqlBaseParser.REPLACE:
            case SqlBaseParser.RESET:
            case SqlBaseParser.RESPECT:
            case SqlBaseParser.RESTRICT:
            case SqlBaseParser.RETURNING:
            case SqlBaseParser.REVOKE:
            case SqlBaseParser.ROLE:
            case SqlBaseParser.ROLES:
            case SqlBaseParser.ROLLBACK:
            case SqlBaseParser.ROW:
            case SqlBaseParser.ROWS:
            case SqlBaseParser.RUNNING:
            case SqlBaseParser.SCALAR:
            case SqlBaseParser.SCHEMA:
            case SqlBaseParser.SCHEMAS:
            case SqlBaseParser.SECOND:
            case SqlBaseParser.SECURITY:
            case SqlBaseParser.SEEK:
            case SqlBaseParser.SERIALIZABLE:
            case SqlBaseParser.SESSION:
            case SqlBaseParser.SET:
            case SqlBaseParser.SETS:
            case SqlBaseParser.SHOW:
            case SqlBaseParser.SOME:
            case SqlBaseParser.START:
            case SqlBaseParser.STATS:
            case SqlBaseParser.SUBSET:
            case SqlBaseParser.SUBSTRING:
            case SqlBaseParser.SYSTEM:
            case SqlBaseParser.TABLES:
            case SqlBaseParser.TABLESAMPLE:
            case SqlBaseParser.TEXT:
            case SqlBaseParser.TEXT_STRING:
            case SqlBaseParser.TIES:
            case SqlBaseParser.TIME:
            case SqlBaseParser.TIMESTAMP:
            case SqlBaseParser.TO:
            case SqlBaseParser.TRAILING:
            case SqlBaseParser.TRANSACTION:
            case SqlBaseParser.TRUNCATE:
            case SqlBaseParser.TRY_CAST:
            case SqlBaseParser.TYPE:
            case SqlBaseParser.UNBOUNDED:
            case SqlBaseParser.UNCOMMITTED:
            case SqlBaseParser.UNCONDITIONAL:
            case SqlBaseParser.UNIQUE:
            case SqlBaseParser.UNKNOWN:
            case SqlBaseParser.UNMATCHED:
            case SqlBaseParser.UPDATE:
            case SqlBaseParser.USE:
            case SqlBaseParser.USER:
            case SqlBaseParser.UTF16:
            case SqlBaseParser.UTF32:
            case SqlBaseParser.UTF8:
            case SqlBaseParser.VALIDATE:
            case SqlBaseParser.VALUE:
            case SqlBaseParser.VERBOSE:
            case SqlBaseParser.VERSION:
            case SqlBaseParser.VIEW:
            case SqlBaseParser.WINDOW:
            case SqlBaseParser.WITHIN:
            case SqlBaseParser.WITHOUT:
            case SqlBaseParser.WORK:
            case SqlBaseParser.WRAPPER:
            case SqlBaseParser.WRITE:
            case SqlBaseParser.YEAR:
            case SqlBaseParser.ZONE:
            case SqlBaseParser.IDENTIFIER:
            case SqlBaseParser.DIGIT_IDENTIFIER:
            case SqlBaseParser.QUOTED_IDENTIFIER:
            case SqlBaseParser.BACKQUOTED_IDENTIFIER:
                {
                this.state = 2914;
                localContext._windowName = this.identifier();
                }
                break;
            case SqlBaseParser.T__1:
                {
                this.state = 2915;
                this.match(SqlBaseParser.T__1);
                this.state = 2916;
                this.windowSpecification();
                this.state = 2917;
                this.match(SqlBaseParser.T__2);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrame(): WindowFrameContext {
        let localContext = new WindowFrameContext(this.context, this.state);
        this.enterRule(localContext, 182, SqlBaseParser.RULE_windowFrame);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2930;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 157) {
                {
                this.state = 2921;
                this.match(SqlBaseParser.MEASURES);
                this.state = 2922;
                this.measureDefinition();
                this.state = 2927;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2923;
                    this.match(SqlBaseParser.T__3);
                    this.state = 2924;
                    this.measureDefinition();
                    }
                    }
                    this.state = 2929;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 2932;
            this.frameExtent();
            this.state = 2936;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 21) {
                {
                this.state = 2933;
                this.match(SqlBaseParser.AFTER);
                this.state = 2934;
                this.match(SqlBaseParser.MATCH);
                this.state = 2935;
                this.skipTo();
                }
            }

            this.state = 2939;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 117 || _la === 233) {
                {
                this.state = 2938;
                _la = this.tokenStream.LA(1);
                if(!(_la === 117 || _la === 233)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 2946;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 195) {
                {
                this.state = 2941;
                this.match(SqlBaseParser.PATTERN);
                this.state = 2942;
                this.match(SqlBaseParser.T__1);
                this.state = 2943;
                this.rowPattern(0);
                this.state = 2944;
                this.match(SqlBaseParser.T__2);
                }
            }

            this.state = 2957;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 243) {
                {
                this.state = 2948;
                this.match(SqlBaseParser.SUBSET);
                this.state = 2949;
                this.subsetDefinition();
                this.state = 2954;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2950;
                    this.match(SqlBaseParser.T__3);
                    this.state = 2951;
                    this.subsetDefinition();
                    }
                    }
                    this.state = 2956;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 2968;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 68) {
                {
                this.state = 2959;
                this.match(SqlBaseParser.DEFINE);
                this.state = 2960;
                this.variableDefinition();
                this.state = 2965;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2961;
                    this.match(SqlBaseParser.T__3);
                    this.state = 2962;
                    this.variableDefinition();
                    }
                    }
                    this.state = 2967;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frameExtent(): FrameExtentContext {
        let localContext = new FrameExtentContext(this.context, this.state);
        this.enterRule(localContext, 184, SqlBaseParser.RULE_frameExtent);
        try {
            this.state = 2994;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 398, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2970;
                localContext._frameType = this.match(SqlBaseParser.RANGE);
                this.state = 2971;
                localContext._start = this.frameBound();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2972;
                localContext._frameType = this.match(SqlBaseParser.ROWS);
                this.state = 2973;
                localContext._start = this.frameBound();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2974;
                localContext._frameType = this.match(SqlBaseParser.GROUPS);
                this.state = 2975;
                localContext._start = this.frameBound();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2976;
                localContext._frameType = this.match(SqlBaseParser.RANGE);
                this.state = 2977;
                this.match(SqlBaseParser.BETWEEN);
                this.state = 2978;
                localContext._start = this.frameBound();
                this.state = 2979;
                this.match(SqlBaseParser.AND);
                this.state = 2980;
                localContext._end = this.frameBound();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2982;
                localContext._frameType = this.match(SqlBaseParser.ROWS);
                this.state = 2983;
                this.match(SqlBaseParser.BETWEEN);
                this.state = 2984;
                localContext._start = this.frameBound();
                this.state = 2985;
                this.match(SqlBaseParser.AND);
                this.state = 2986;
                localContext._end = this.frameBound();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2988;
                localContext._frameType = this.match(SqlBaseParser.GROUPS);
                this.state = 2989;
                this.match(SqlBaseParser.BETWEEN);
                this.state = 2990;
                localContext._start = this.frameBound();
                this.state = 2991;
                this.match(SqlBaseParser.AND);
                this.state = 2992;
                localContext._end = this.frameBound();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frameBound(): FrameBoundContext {
        let localContext = new FrameBoundContext(this.context, this.state);
        this.enterRule(localContext, 186, SqlBaseParser.RULE_frameBound);
        let _la: number;
        try {
            this.state = 3005;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 399, this.context) ) {
            case 1:
                localContext = new UnboundedFrameContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2996;
                this.match(SqlBaseParser.UNBOUNDED);
                this.state = 2997;
                (localContext as UnboundedFrameContext)._boundType = this.match(SqlBaseParser.PRECEDING);
                }
                break;
            case 2:
                localContext = new UnboundedFrameContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2998;
                this.match(SqlBaseParser.UNBOUNDED);
                this.state = 2999;
                (localContext as UnboundedFrameContext)._boundType = this.match(SqlBaseParser.FOLLOWING);
                }
                break;
            case 3:
                localContext = new CurrentRowBoundContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3000;
                this.match(SqlBaseParser.CURRENT);
                this.state = 3001;
                this.match(SqlBaseParser.ROW);
                }
                break;
            case 4:
                localContext = new BoundedFrameContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3002;
                this.expression();
                this.state = 3003;
                (localContext as BoundedFrameContext)._boundType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 96 || _la === 201)) {
                    (localContext as BoundedFrameContext)._boundType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public rowPattern(): RowPatternContext;
    public rowPattern(_p: number): RowPatternContext;
    public rowPattern(_p?: number): RowPatternContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new RowPatternContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 188;
        this.enterRecursionRule(localContext, 188, SqlBaseParser.RULE_rowPattern, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            localContext = new QuantifiedPrimaryContext(localContext);
            this.context = localContext;
            previousContext = localContext;

            this.state = 3008;
            this.patternPrimary();
            this.state = 3010;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 400, this.context) ) {
            case 1:
                {
                this.state = 3009;
                this.patternQuantifier();
                }
                break;
            }
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 3019;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 402, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 3017;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 401, this.context) ) {
                    case 1:
                        {
                        localContext = new PatternConcatenationContext(new RowPatternContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, SqlBaseParser.RULE_rowPattern);
                        this.state = 3012;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 3013;
                        this.rowPattern(3);
                        }
                        break;
                    case 2:
                        {
                        localContext = new PatternAlternationContext(new RowPatternContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, SqlBaseParser.RULE_rowPattern);
                        this.state = 3014;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 3015;
                        this.match(SqlBaseParser.T__10);
                        this.state = 3016;
                        this.rowPattern(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 3021;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 402, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public patternPrimary(): PatternPrimaryContext {
        let localContext = new PatternPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 190, SqlBaseParser.RULE_patternPrimary);
        let _la: number;
        try {
            this.state = 3047;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 404, this.context) ) {
            case 1:
                localContext = new PatternVariableContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3022;
                this.identifier();
                }
                break;
            case 2:
                localContext = new EmptyPatternContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3023;
                this.match(SqlBaseParser.T__1);
                this.state = 3024;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 3:
                localContext = new PatternPermutationContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3025;
                this.match(SqlBaseParser.PERMUTE);
                this.state = 3026;
                this.match(SqlBaseParser.T__1);
                this.state = 3027;
                this.rowPattern(0);
                this.state = 3032;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 3028;
                    this.match(SqlBaseParser.T__3);
                    this.state = 3029;
                    this.rowPattern(0);
                    }
                    }
                    this.state = 3034;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3035;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 4:
                localContext = new GroupedPatternContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3037;
                this.match(SqlBaseParser.T__1);
                this.state = 3038;
                this.rowPattern(0);
                this.state = 3039;
                this.match(SqlBaseParser.T__2);
                }
                break;
            case 5:
                localContext = new PartitionStartAnchorContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3041;
                this.match(SqlBaseParser.T__11);
                }
                break;
            case 6:
                localContext = new PartitionEndAnchorContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3042;
                this.match(SqlBaseParser.T__12);
                }
                break;
            case 7:
                localContext = new ExcludedPatternContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3043;
                this.match(SqlBaseParser.T__13);
                this.state = 3044;
                this.rowPattern(0);
                this.state = 3045;
                this.match(SqlBaseParser.T__14);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public patternQuantifier(): PatternQuantifierContext {
        let localContext = new PatternQuantifierContext(this.context, this.state);
        this.enterRule(localContext, 192, SqlBaseParser.RULE_patternQuantifier);
        let _la: number;
        try {
            this.state = 3079;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 412, this.context) ) {
            case 1:
                localContext = new ZeroOrMoreQuantifierContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3049;
                this.match(SqlBaseParser.ASTERISK);
                this.state = 3051;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 405, this.context) ) {
                case 1:
                    {
                    this.state = 3050;
                    (localContext as ZeroOrMoreQuantifierContext)._reluctant = this.match(SqlBaseParser.QUESTION_MARK);
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new OneOrMoreQuantifierContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3053;
                this.match(SqlBaseParser.PLUS);
                this.state = 3055;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 406, this.context) ) {
                case 1:
                    {
                    this.state = 3054;
                    (localContext as OneOrMoreQuantifierContext)._reluctant = this.match(SqlBaseParser.QUESTION_MARK);
                    }
                    break;
                }
                }
                break;
            case 3:
                localContext = new ZeroOrOneQuantifierContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3057;
                this.match(SqlBaseParser.QUESTION_MARK);
                this.state = 3059;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 407, this.context) ) {
                case 1:
                    {
                    this.state = 3058;
                    (localContext as ZeroOrOneQuantifierContext)._reluctant = this.match(SqlBaseParser.QUESTION_MARK);
                    }
                    break;
                }
                }
                break;
            case 4:
                localContext = new RangeQuantifierContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3061;
                this.match(SqlBaseParser.T__15);
                this.state = 3062;
                (localContext as RangeQuantifierContext)._exactly = this.match(SqlBaseParser.INTEGER_VALUE);
                this.state = 3063;
                this.match(SqlBaseParser.T__16);
                this.state = 3065;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 408, this.context) ) {
                case 1:
                    {
                    this.state = 3064;
                    (localContext as RangeQuantifierContext)._reluctant = this.match(SqlBaseParser.QUESTION_MARK);
                    }
                    break;
                }
                }
                break;
            case 5:
                localContext = new RangeQuantifierContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3067;
                this.match(SqlBaseParser.T__15);
                this.state = 3069;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 312) {
                    {
                    this.state = 3068;
                    (localContext as RangeQuantifierContext)._atLeast = this.match(SqlBaseParser.INTEGER_VALUE);
                    }
                }

                this.state = 3071;
                this.match(SqlBaseParser.T__3);
                this.state = 3073;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 312) {
                    {
                    this.state = 3072;
                    (localContext as RangeQuantifierContext)._atMost = this.match(SqlBaseParser.INTEGER_VALUE);
                    }
                }

                this.state = 3075;
                this.match(SqlBaseParser.T__16);
                this.state = 3077;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 411, this.context) ) {
                case 1:
                    {
                    this.state = 3076;
                    (localContext as RangeQuantifierContext)._reluctant = this.match(SqlBaseParser.QUESTION_MARK);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updateAssignment(): UpdateAssignmentContext {
        let localContext = new UpdateAssignmentContext(this.context, this.state);
        this.enterRule(localContext, 194, SqlBaseParser.RULE_updateAssignment);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3081;
            this.identifier();
            this.state = 3082;
            this.match(SqlBaseParser.EQ);
            this.state = 3083;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainOption(): ExplainOptionContext {
        let localContext = new ExplainOptionContext(this.context, this.state);
        this.enterRule(localContext, 196, SqlBaseParser.RULE_explainOption);
        let _la: number;
        try {
            this.state = 3089;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.FORMAT:
                localContext = new ExplainFormatContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3085;
                this.match(SqlBaseParser.FORMAT);
                this.state = 3086;
                (localContext as ExplainFormatContext)._value = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 106 || _la === 129 || _la === 249)) {
                    (localContext as ExplainFormatContext)._value = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case SqlBaseParser.TYPE:
                localContext = new ExplainTypeContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3087;
                this.match(SqlBaseParser.TYPE);
                this.state = 3088;
                (localContext as ExplainTypeContext)._value = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 76 || _la === 125 || _la === 150 || _la === 279)) {
                    (localContext as ExplainTypeContext)._value = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionMode(): TransactionModeContext {
        let localContext = new TransactionModeContext(this.context, this.state);
        this.enterRule(localContext, 198, SqlBaseParser.RULE_transactionMode);
        let _la: number;
        try {
            this.state = 3096;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.ISOLATION:
                localContext = new IsolationLevelContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3091;
                this.match(SqlBaseParser.ISOLATION);
                this.state = 3092;
                this.match(SqlBaseParser.LEVEL);
                this.state = 3093;
                this.levelOfIsolation();
                }
                break;
            case SqlBaseParser.READ:
                localContext = new TransactionAccessModeContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3094;
                this.match(SqlBaseParser.READ);
                this.state = 3095;
                (localContext as TransactionAccessModeContext)._accessMode = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 181 || _la === 293)) {
                    (localContext as TransactionAccessModeContext)._accessMode = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public levelOfIsolation(): LevelOfIsolationContext {
        let localContext = new LevelOfIsolationContext(this.context, this.state);
        this.enterRule(localContext, 200, SqlBaseParser.RULE_levelOfIsolation);
        try {
            this.state = 3105;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 415, this.context) ) {
            case 1:
                localContext = new ReadUncommittedContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3098;
                this.match(SqlBaseParser.READ);
                this.state = 3099;
                this.match(SqlBaseParser.UNCOMMITTED);
                }
                break;
            case 2:
                localContext = new ReadCommittedContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3100;
                this.match(SqlBaseParser.READ);
                this.state = 3101;
                this.match(SqlBaseParser.COMMITTED);
                }
                break;
            case 3:
                localContext = new RepeatableReadContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3102;
                this.match(SqlBaseParser.REPEATABLE);
                this.state = 3103;
                this.match(SqlBaseParser.READ);
                }
                break;
            case 4:
                localContext = new SerializableContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3104;
                this.match(SqlBaseParser.SERIALIZABLE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public callArgument(): CallArgumentContext {
        let localContext = new CallArgumentContext(this.context, this.state);
        this.enterRule(localContext, 202, SqlBaseParser.RULE_callArgument);
        try {
            this.state = 3112;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 416, this.context) ) {
            case 1:
                localContext = new PositionalArgumentContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3107;
                this.expression();
                }
                break;
            case 2:
                localContext = new NamedArgumentContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3108;
                this.identifier();
                this.state = 3109;
                this.match(SqlBaseParser.T__5);
                this.state = 3110;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathElement(): PathElementContext {
        let localContext = new PathElementContext(this.context, this.state);
        this.enterRule(localContext, 204, SqlBaseParser.RULE_pathElement);
        try {
            this.state = 3119;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 417, this.context) ) {
            case 1:
                localContext = new QualifiedArgumentContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3114;
                this.identifier();
                this.state = 3115;
                this.match(SqlBaseParser.T__0);
                this.state = 3116;
                this.identifier();
                }
                break;
            case 2:
                localContext = new UnqualifiedArgumentContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3118;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathSpecification(): PathSpecificationContext {
        let localContext = new PathSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 206, SqlBaseParser.RULE_pathSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3121;
            this.pathElement();
            this.state = 3126;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3122;
                this.match(SqlBaseParser.T__3);
                this.state = 3123;
                this.pathElement();
                }
                }
                this.state = 3128;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilege(): PrivilegeContext {
        let localContext = new PrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 208, SqlBaseParser.RULE_privilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3129;
            _la = this.tokenStream.LA(1);
            if(!(_la === 51 || _la === 70 || _la === 120 || _la === 234 || _la === 272)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedName(): QualifiedNameContext {
        let localContext = new QualifiedNameContext(this.context, this.state);
        this.enterRule(localContext, 210, SqlBaseParser.RULE_qualifiedName);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3131;
            this.identifier();
            this.state = 3136;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 419, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3132;
                    this.match(SqlBaseParser.T__0);
                    this.state = 3133;
                    this.identifier();
                    }
                    }
                }
                this.state = 3138;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 419, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryPeriod(): QueryPeriodContext {
        let localContext = new QueryPeriodContext(this.context, this.state);
        this.enterRule(localContext, 212, SqlBaseParser.RULE_queryPeriod);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3139;
            this.match(SqlBaseParser.FOR);
            this.state = 3140;
            this.rangeType();
            this.state = 3141;
            this.match(SqlBaseParser.AS);
            this.state = 3142;
            this.match(SqlBaseParser.OF);
            this.state = 3143;
            localContext._end = this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rangeType(): RangeTypeContext {
        let localContext = new RangeTypeContext(this.context, this.state);
        this.enterRule(localContext, 214, SqlBaseParser.RULE_rangeType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3145;
            _la = this.tokenStream.LA(1);
            if(!(_la === 254 || _la === 283)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantor(): GrantorContext {
        let localContext = new GrantorContext(this.context, this.state);
        this.enterRule(localContext, 216, SqlBaseParser.RULE_grantor);
        try {
            this.state = 3150;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.ABSENT:
            case SqlBaseParser.ADD:
            case SqlBaseParser.ADMIN:
            case SqlBaseParser.AFTER:
            case SqlBaseParser.ALL:
            case SqlBaseParser.ANALYZE:
            case SqlBaseParser.ANY:
            case SqlBaseParser.ARRAY:
            case SqlBaseParser.ASC:
            case SqlBaseParser.AT:
            case SqlBaseParser.AUTHORIZATION:
            case SqlBaseParser.BERNOULLI:
            case SqlBaseParser.BOTH:
            case SqlBaseParser.CALL:
            case SqlBaseParser.CASCADE:
            case SqlBaseParser.CATALOG:
            case SqlBaseParser.CATALOGS:
            case SqlBaseParser.COLUMN:
            case SqlBaseParser.COLUMNS:
            case SqlBaseParser.COMMENT:
            case SqlBaseParser.COMMIT:
            case SqlBaseParser.COMMITTED:
            case SqlBaseParser.CONDITIONAL:
            case SqlBaseParser.COUNT:
            case SqlBaseParser.COPARTITION:
            case SqlBaseParser.CURRENT:
            case SqlBaseParser.DATA:
            case SqlBaseParser.DATE:
            case SqlBaseParser.DAY:
            case SqlBaseParser.DEFAULT:
            case SqlBaseParser.DEFINE:
            case SqlBaseParser.DEFINER:
            case SqlBaseParser.DENY:
            case SqlBaseParser.DESC:
            case SqlBaseParser.DESCRIPTOR:
            case SqlBaseParser.DISTRIBUTED:
            case SqlBaseParser.DOUBLE:
            case SqlBaseParser.EMPTY:
            case SqlBaseParser.ENCODING:
            case SqlBaseParser.ERROR:
            case SqlBaseParser.EXCLUDING:
            case SqlBaseParser.EXPLAIN:
            case SqlBaseParser.FETCH:
            case SqlBaseParser.FILTER:
            case SqlBaseParser.FINAL:
            case SqlBaseParser.FIRST:
            case SqlBaseParser.FOLLOWING:
            case SqlBaseParser.FORMAT:
            case SqlBaseParser.FUNCTIONS:
            case SqlBaseParser.GRACE:
            case SqlBaseParser.GRANT:
            case SqlBaseParser.GRANTED:
            case SqlBaseParser.GRANTS:
            case SqlBaseParser.GRAPHVIZ:
            case SqlBaseParser.GROUPS:
            case SqlBaseParser.HOUR:
            case SqlBaseParser.IF:
            case SqlBaseParser.IGNORE:
            case SqlBaseParser.IMMEDIATE:
            case SqlBaseParser.INCLUDING:
            case SqlBaseParser.INITIAL:
            case SqlBaseParser.INPUT:
            case SqlBaseParser.INTERVAL:
            case SqlBaseParser.INVOKER:
            case SqlBaseParser.IO:
            case SqlBaseParser.ISOLATION:
            case SqlBaseParser.JSON:
            case SqlBaseParser.KEEP:
            case SqlBaseParser.KEY:
            case SqlBaseParser.KEYS:
            case SqlBaseParser.LAST:
            case SqlBaseParser.LATERAL:
            case SqlBaseParser.LEADING:
            case SqlBaseParser.LEVEL:
            case SqlBaseParser.LIMIT:
            case SqlBaseParser.LOCAL:
            case SqlBaseParser.LOGICAL:
            case SqlBaseParser.MAP:
            case SqlBaseParser.MATCH:
            case SqlBaseParser.MATCHED:
            case SqlBaseParser.MATCHES:
            case SqlBaseParser.MATCH_RECOGNIZE:
            case SqlBaseParser.MATERIALIZED:
            case SqlBaseParser.MEASURES:
            case SqlBaseParser.MERGE:
            case SqlBaseParser.MINUTE:
            case SqlBaseParser.MONTH:
            case SqlBaseParser.NESTED:
            case SqlBaseParser.NEXT:
            case SqlBaseParser.NFC:
            case SqlBaseParser.NFD:
            case SqlBaseParser.NFKC:
            case SqlBaseParser.NFKD:
            case SqlBaseParser.NO:
            case SqlBaseParser.NONE:
            case SqlBaseParser.NULLIF:
            case SqlBaseParser.NULLS:
            case SqlBaseParser.OBJECT:
            case SqlBaseParser.OF:
            case SqlBaseParser.OFFSET:
            case SqlBaseParser.OMIT:
            case SqlBaseParser.ONE:
            case SqlBaseParser.ONLY:
            case SqlBaseParser.OPTION:
            case SqlBaseParser.ORDINALITY:
            case SqlBaseParser.OUTPUT:
            case SqlBaseParser.OVER:
            case SqlBaseParser.OVERFLOW:
            case SqlBaseParser.PARTITION:
            case SqlBaseParser.PARTITIONS:
            case SqlBaseParser.PASSING:
            case SqlBaseParser.PAST:
            case SqlBaseParser.PATH:
            case SqlBaseParser.PATTERN:
            case SqlBaseParser.PER:
            case SqlBaseParser.PERIOD:
            case SqlBaseParser.PERMUTE:
            case SqlBaseParser.PLAN:
            case SqlBaseParser.POSITION:
            case SqlBaseParser.PRECEDING:
            case SqlBaseParser.PRECISION:
            case SqlBaseParser.PRIVILEGES:
            case SqlBaseParser.PROPERTIES:
            case SqlBaseParser.PRUNE:
            case SqlBaseParser.QUOTES:
            case SqlBaseParser.RANGE:
            case SqlBaseParser.READ:
            case SqlBaseParser.REFRESH:
            case SqlBaseParser.RENAME:
            case SqlBaseParser.REPEATABLE:
            case SqlBaseParser.REPLACE:
            case SqlBaseParser.RESET:
            case SqlBaseParser.RESPECT:
            case SqlBaseParser.RESTRICT:
            case SqlBaseParser.RETURNING:
            case SqlBaseParser.REVOKE:
            case SqlBaseParser.ROLE:
            case SqlBaseParser.ROLES:
            case SqlBaseParser.ROLLBACK:
            case SqlBaseParser.ROW:
            case SqlBaseParser.ROWS:
            case SqlBaseParser.RUNNING:
            case SqlBaseParser.SCALAR:
            case SqlBaseParser.SCHEMA:
            case SqlBaseParser.SCHEMAS:
            case SqlBaseParser.SECOND:
            case SqlBaseParser.SECURITY:
            case SqlBaseParser.SEEK:
            case SqlBaseParser.SERIALIZABLE:
            case SqlBaseParser.SESSION:
            case SqlBaseParser.SET:
            case SqlBaseParser.SETS:
            case SqlBaseParser.SHOW:
            case SqlBaseParser.SOME:
            case SqlBaseParser.START:
            case SqlBaseParser.STATS:
            case SqlBaseParser.SUBSET:
            case SqlBaseParser.SUBSTRING:
            case SqlBaseParser.SYSTEM:
            case SqlBaseParser.TABLES:
            case SqlBaseParser.TABLESAMPLE:
            case SqlBaseParser.TEXT:
            case SqlBaseParser.TEXT_STRING:
            case SqlBaseParser.TIES:
            case SqlBaseParser.TIME:
            case SqlBaseParser.TIMESTAMP:
            case SqlBaseParser.TO:
            case SqlBaseParser.TRAILING:
            case SqlBaseParser.TRANSACTION:
            case SqlBaseParser.TRUNCATE:
            case SqlBaseParser.TRY_CAST:
            case SqlBaseParser.TYPE:
            case SqlBaseParser.UNBOUNDED:
            case SqlBaseParser.UNCOMMITTED:
            case SqlBaseParser.UNCONDITIONAL:
            case SqlBaseParser.UNIQUE:
            case SqlBaseParser.UNKNOWN:
            case SqlBaseParser.UNMATCHED:
            case SqlBaseParser.UPDATE:
            case SqlBaseParser.USE:
            case SqlBaseParser.USER:
            case SqlBaseParser.UTF16:
            case SqlBaseParser.UTF32:
            case SqlBaseParser.UTF8:
            case SqlBaseParser.VALIDATE:
            case SqlBaseParser.VALUE:
            case SqlBaseParser.VERBOSE:
            case SqlBaseParser.VERSION:
            case SqlBaseParser.VIEW:
            case SqlBaseParser.WINDOW:
            case SqlBaseParser.WITHIN:
            case SqlBaseParser.WITHOUT:
            case SqlBaseParser.WORK:
            case SqlBaseParser.WRAPPER:
            case SqlBaseParser.WRITE:
            case SqlBaseParser.YEAR:
            case SqlBaseParser.ZONE:
            case SqlBaseParser.IDENTIFIER:
            case SqlBaseParser.DIGIT_IDENTIFIER:
            case SqlBaseParser.QUOTED_IDENTIFIER:
            case SqlBaseParser.BACKQUOTED_IDENTIFIER:
                localContext = new SpecifiedPrincipalContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3147;
                this.principal();
                }
                break;
            case SqlBaseParser.CURRENT_USER:
                localContext = new CurrentUserGrantorContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3148;
                this.match(SqlBaseParser.CURRENT_USER);
                }
                break;
            case SqlBaseParser.CURRENT_ROLE:
                localContext = new CurrentRoleGrantorContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3149;
                this.match(SqlBaseParser.CURRENT_ROLE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public principal(): PrincipalContext {
        let localContext = new PrincipalContext(this.context, this.state);
        this.enterRule(localContext, 218, SqlBaseParser.RULE_principal);
        try {
            this.state = 3157;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 421, this.context) ) {
            case 1:
                localContext = new UnspecifiedPrincipalContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3152;
                this.identifier();
                }
                break;
            case 2:
                localContext = new UserPrincipalContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3153;
                this.match(SqlBaseParser.USER);
                this.state = 3154;
                this.identifier();
                }
                break;
            case 3:
                localContext = new RolePrincipalContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3155;
                this.match(SqlBaseParser.ROLE);
                this.state = 3156;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public roles(): RolesContext {
        let localContext = new RolesContext(this.context, this.state);
        this.enterRule(localContext, 220, SqlBaseParser.RULE_roles);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3159;
            this.identifier();
            this.state = 3164;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3160;
                this.match(SqlBaseParser.T__3);
                this.state = 3161;
                this.identifier();
                }
                }
                this.state = 3166;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 222, SqlBaseParser.RULE_identifier);
        try {
            this.state = 3172;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.IDENTIFIER:
                localContext = new UnquotedIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3167;
                this.match(SqlBaseParser.IDENTIFIER);
                }
                break;
            case SqlBaseParser.QUOTED_IDENTIFIER:
                localContext = new QuotedIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3168;
                this.match(SqlBaseParser.QUOTED_IDENTIFIER);
                }
                break;
            case SqlBaseParser.ABSENT:
            case SqlBaseParser.ADD:
            case SqlBaseParser.ADMIN:
            case SqlBaseParser.AFTER:
            case SqlBaseParser.ALL:
            case SqlBaseParser.ANALYZE:
            case SqlBaseParser.ANY:
            case SqlBaseParser.ARRAY:
            case SqlBaseParser.ASC:
            case SqlBaseParser.AT:
            case SqlBaseParser.AUTHORIZATION:
            case SqlBaseParser.BERNOULLI:
            case SqlBaseParser.BOTH:
            case SqlBaseParser.CALL:
            case SqlBaseParser.CASCADE:
            case SqlBaseParser.CATALOG:
            case SqlBaseParser.CATALOGS:
            case SqlBaseParser.COLUMN:
            case SqlBaseParser.COLUMNS:
            case SqlBaseParser.COMMENT:
            case SqlBaseParser.COMMIT:
            case SqlBaseParser.COMMITTED:
            case SqlBaseParser.CONDITIONAL:
            case SqlBaseParser.COUNT:
            case SqlBaseParser.COPARTITION:
            case SqlBaseParser.CURRENT:
            case SqlBaseParser.DATA:
            case SqlBaseParser.DATE:
            case SqlBaseParser.DAY:
            case SqlBaseParser.DEFAULT:
            case SqlBaseParser.DEFINE:
            case SqlBaseParser.DEFINER:
            case SqlBaseParser.DENY:
            case SqlBaseParser.DESC:
            case SqlBaseParser.DESCRIPTOR:
            case SqlBaseParser.DISTRIBUTED:
            case SqlBaseParser.DOUBLE:
            case SqlBaseParser.EMPTY:
            case SqlBaseParser.ENCODING:
            case SqlBaseParser.ERROR:
            case SqlBaseParser.EXCLUDING:
            case SqlBaseParser.EXPLAIN:
            case SqlBaseParser.FETCH:
            case SqlBaseParser.FILTER:
            case SqlBaseParser.FINAL:
            case SqlBaseParser.FIRST:
            case SqlBaseParser.FOLLOWING:
            case SqlBaseParser.FORMAT:
            case SqlBaseParser.FUNCTIONS:
            case SqlBaseParser.GRACE:
            case SqlBaseParser.GRANT:
            case SqlBaseParser.GRANTED:
            case SqlBaseParser.GRANTS:
            case SqlBaseParser.GRAPHVIZ:
            case SqlBaseParser.GROUPS:
            case SqlBaseParser.HOUR:
            case SqlBaseParser.IF:
            case SqlBaseParser.IGNORE:
            case SqlBaseParser.IMMEDIATE:
            case SqlBaseParser.INCLUDING:
            case SqlBaseParser.INITIAL:
            case SqlBaseParser.INPUT:
            case SqlBaseParser.INTERVAL:
            case SqlBaseParser.INVOKER:
            case SqlBaseParser.IO:
            case SqlBaseParser.ISOLATION:
            case SqlBaseParser.JSON:
            case SqlBaseParser.KEEP:
            case SqlBaseParser.KEY:
            case SqlBaseParser.KEYS:
            case SqlBaseParser.LAST:
            case SqlBaseParser.LATERAL:
            case SqlBaseParser.LEADING:
            case SqlBaseParser.LEVEL:
            case SqlBaseParser.LIMIT:
            case SqlBaseParser.LOCAL:
            case SqlBaseParser.LOGICAL:
            case SqlBaseParser.MAP:
            case SqlBaseParser.MATCH:
            case SqlBaseParser.MATCHED:
            case SqlBaseParser.MATCHES:
            case SqlBaseParser.MATCH_RECOGNIZE:
            case SqlBaseParser.MATERIALIZED:
            case SqlBaseParser.MEASURES:
            case SqlBaseParser.MERGE:
            case SqlBaseParser.MINUTE:
            case SqlBaseParser.MONTH:
            case SqlBaseParser.NESTED:
            case SqlBaseParser.NEXT:
            case SqlBaseParser.NFC:
            case SqlBaseParser.NFD:
            case SqlBaseParser.NFKC:
            case SqlBaseParser.NFKD:
            case SqlBaseParser.NO:
            case SqlBaseParser.NONE:
            case SqlBaseParser.NULLIF:
            case SqlBaseParser.NULLS:
            case SqlBaseParser.OBJECT:
            case SqlBaseParser.OF:
            case SqlBaseParser.OFFSET:
            case SqlBaseParser.OMIT:
            case SqlBaseParser.ONE:
            case SqlBaseParser.ONLY:
            case SqlBaseParser.OPTION:
            case SqlBaseParser.ORDINALITY:
            case SqlBaseParser.OUTPUT:
            case SqlBaseParser.OVER:
            case SqlBaseParser.OVERFLOW:
            case SqlBaseParser.PARTITION:
            case SqlBaseParser.PARTITIONS:
            case SqlBaseParser.PASSING:
            case SqlBaseParser.PAST:
            case SqlBaseParser.PATH:
            case SqlBaseParser.PATTERN:
            case SqlBaseParser.PER:
            case SqlBaseParser.PERIOD:
            case SqlBaseParser.PERMUTE:
            case SqlBaseParser.PLAN:
            case SqlBaseParser.POSITION:
            case SqlBaseParser.PRECEDING:
            case SqlBaseParser.PRECISION:
            case SqlBaseParser.PRIVILEGES:
            case SqlBaseParser.PROPERTIES:
            case SqlBaseParser.PRUNE:
            case SqlBaseParser.QUOTES:
            case SqlBaseParser.RANGE:
            case SqlBaseParser.READ:
            case SqlBaseParser.REFRESH:
            case SqlBaseParser.RENAME:
            case SqlBaseParser.REPEATABLE:
            case SqlBaseParser.REPLACE:
            case SqlBaseParser.RESET:
            case SqlBaseParser.RESPECT:
            case SqlBaseParser.RESTRICT:
            case SqlBaseParser.RETURNING:
            case SqlBaseParser.REVOKE:
            case SqlBaseParser.ROLE:
            case SqlBaseParser.ROLES:
            case SqlBaseParser.ROLLBACK:
            case SqlBaseParser.ROW:
            case SqlBaseParser.ROWS:
            case SqlBaseParser.RUNNING:
            case SqlBaseParser.SCALAR:
            case SqlBaseParser.SCHEMA:
            case SqlBaseParser.SCHEMAS:
            case SqlBaseParser.SECOND:
            case SqlBaseParser.SECURITY:
            case SqlBaseParser.SEEK:
            case SqlBaseParser.SERIALIZABLE:
            case SqlBaseParser.SESSION:
            case SqlBaseParser.SET:
            case SqlBaseParser.SETS:
            case SqlBaseParser.SHOW:
            case SqlBaseParser.SOME:
            case SqlBaseParser.START:
            case SqlBaseParser.STATS:
            case SqlBaseParser.SUBSET:
            case SqlBaseParser.SUBSTRING:
            case SqlBaseParser.SYSTEM:
            case SqlBaseParser.TABLES:
            case SqlBaseParser.TABLESAMPLE:
            case SqlBaseParser.TEXT:
            case SqlBaseParser.TEXT_STRING:
            case SqlBaseParser.TIES:
            case SqlBaseParser.TIME:
            case SqlBaseParser.TIMESTAMP:
            case SqlBaseParser.TO:
            case SqlBaseParser.TRAILING:
            case SqlBaseParser.TRANSACTION:
            case SqlBaseParser.TRUNCATE:
            case SqlBaseParser.TRY_CAST:
            case SqlBaseParser.TYPE:
            case SqlBaseParser.UNBOUNDED:
            case SqlBaseParser.UNCOMMITTED:
            case SqlBaseParser.UNCONDITIONAL:
            case SqlBaseParser.UNIQUE:
            case SqlBaseParser.UNKNOWN:
            case SqlBaseParser.UNMATCHED:
            case SqlBaseParser.UPDATE:
            case SqlBaseParser.USE:
            case SqlBaseParser.USER:
            case SqlBaseParser.UTF16:
            case SqlBaseParser.UTF32:
            case SqlBaseParser.UTF8:
            case SqlBaseParser.VALIDATE:
            case SqlBaseParser.VALUE:
            case SqlBaseParser.VERBOSE:
            case SqlBaseParser.VERSION:
            case SqlBaseParser.VIEW:
            case SqlBaseParser.WINDOW:
            case SqlBaseParser.WITHIN:
            case SqlBaseParser.WITHOUT:
            case SqlBaseParser.WORK:
            case SqlBaseParser.WRAPPER:
            case SqlBaseParser.WRITE:
            case SqlBaseParser.YEAR:
            case SqlBaseParser.ZONE:
                localContext = new UnquotedIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3169;
                this.nonReserved();
                }
                break;
            case SqlBaseParser.BACKQUOTED_IDENTIFIER:
                localContext = new BackQuotedIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3170;
                this.match(SqlBaseParser.BACKQUOTED_IDENTIFIER);
                }
                break;
            case SqlBaseParser.DIGIT_IDENTIFIER:
                localContext = new DigitIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3171;
                this.match(SqlBaseParser.DIGIT_IDENTIFIER);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public number_(): NumberContext {
        let localContext = new NumberContext(this.context, this.state);
        this.enterRule(localContext, 224, SqlBaseParser.RULE_number);
        let _la: number;
        try {
            this.state = 3186;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 427, this.context) ) {
            case 1:
                localContext = new DecimalLiteralContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3175;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 303) {
                    {
                    this.state = 3174;
                    this.match(SqlBaseParser.MINUS);
                    }
                }

                this.state = 3177;
                this.match(SqlBaseParser.DECIMAL_VALUE);
                }
                break;
            case 2:
                localContext = new DoubleLiteralContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3179;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 303) {
                    {
                    this.state = 3178;
                    this.match(SqlBaseParser.MINUS);
                    }
                }

                this.state = 3181;
                this.match(SqlBaseParser.DOUBLE_VALUE);
                }
                break;
            case 3:
                localContext = new IntegerLiteralContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3183;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 303) {
                    {
                    this.state = 3182;
                    this.match(SqlBaseParser.MINUS);
                    }
                }

                this.state = 3185;
                this.match(SqlBaseParser.INTEGER_VALUE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public authorizationUser(): AuthorizationUserContext {
        let localContext = new AuthorizationUserContext(this.context, this.state);
        this.enterRule(localContext, 226, SqlBaseParser.RULE_authorizationUser);
        try {
            this.state = 3190;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlBaseParser.ABSENT:
            case SqlBaseParser.ADD:
            case SqlBaseParser.ADMIN:
            case SqlBaseParser.AFTER:
            case SqlBaseParser.ALL:
            case SqlBaseParser.ANALYZE:
            case SqlBaseParser.ANY:
            case SqlBaseParser.ARRAY:
            case SqlBaseParser.ASC:
            case SqlBaseParser.AT:
            case SqlBaseParser.AUTHORIZATION:
            case SqlBaseParser.BERNOULLI:
            case SqlBaseParser.BOTH:
            case SqlBaseParser.CALL:
            case SqlBaseParser.CASCADE:
            case SqlBaseParser.CATALOG:
            case SqlBaseParser.CATALOGS:
            case SqlBaseParser.COLUMN:
            case SqlBaseParser.COLUMNS:
            case SqlBaseParser.COMMENT:
            case SqlBaseParser.COMMIT:
            case SqlBaseParser.COMMITTED:
            case SqlBaseParser.CONDITIONAL:
            case SqlBaseParser.COUNT:
            case SqlBaseParser.COPARTITION:
            case SqlBaseParser.CURRENT:
            case SqlBaseParser.DATA:
            case SqlBaseParser.DATE:
            case SqlBaseParser.DAY:
            case SqlBaseParser.DEFAULT:
            case SqlBaseParser.DEFINE:
            case SqlBaseParser.DEFINER:
            case SqlBaseParser.DENY:
            case SqlBaseParser.DESC:
            case SqlBaseParser.DESCRIPTOR:
            case SqlBaseParser.DISTRIBUTED:
            case SqlBaseParser.DOUBLE:
            case SqlBaseParser.EMPTY:
            case SqlBaseParser.ENCODING:
            case SqlBaseParser.ERROR:
            case SqlBaseParser.EXCLUDING:
            case SqlBaseParser.EXPLAIN:
            case SqlBaseParser.FETCH:
            case SqlBaseParser.FILTER:
            case SqlBaseParser.FINAL:
            case SqlBaseParser.FIRST:
            case SqlBaseParser.FOLLOWING:
            case SqlBaseParser.FORMAT:
            case SqlBaseParser.FUNCTIONS:
            case SqlBaseParser.GRACE:
            case SqlBaseParser.GRANT:
            case SqlBaseParser.GRANTED:
            case SqlBaseParser.GRANTS:
            case SqlBaseParser.GRAPHVIZ:
            case SqlBaseParser.GROUPS:
            case SqlBaseParser.HOUR:
            case SqlBaseParser.IF:
            case SqlBaseParser.IGNORE:
            case SqlBaseParser.IMMEDIATE:
            case SqlBaseParser.INCLUDING:
            case SqlBaseParser.INITIAL:
            case SqlBaseParser.INPUT:
            case SqlBaseParser.INTERVAL:
            case SqlBaseParser.INVOKER:
            case SqlBaseParser.IO:
            case SqlBaseParser.ISOLATION:
            case SqlBaseParser.JSON:
            case SqlBaseParser.KEEP:
            case SqlBaseParser.KEY:
            case SqlBaseParser.KEYS:
            case SqlBaseParser.LAST:
            case SqlBaseParser.LATERAL:
            case SqlBaseParser.LEADING:
            case SqlBaseParser.LEVEL:
            case SqlBaseParser.LIMIT:
            case SqlBaseParser.LOCAL:
            case SqlBaseParser.LOGICAL:
            case SqlBaseParser.MAP:
            case SqlBaseParser.MATCH:
            case SqlBaseParser.MATCHED:
            case SqlBaseParser.MATCHES:
            case SqlBaseParser.MATCH_RECOGNIZE:
            case SqlBaseParser.MATERIALIZED:
            case SqlBaseParser.MEASURES:
            case SqlBaseParser.MERGE:
            case SqlBaseParser.MINUTE:
            case SqlBaseParser.MONTH:
            case SqlBaseParser.NESTED:
            case SqlBaseParser.NEXT:
            case SqlBaseParser.NFC:
            case SqlBaseParser.NFD:
            case SqlBaseParser.NFKC:
            case SqlBaseParser.NFKD:
            case SqlBaseParser.NO:
            case SqlBaseParser.NONE:
            case SqlBaseParser.NULLIF:
            case SqlBaseParser.NULLS:
            case SqlBaseParser.OBJECT:
            case SqlBaseParser.OF:
            case SqlBaseParser.OFFSET:
            case SqlBaseParser.OMIT:
            case SqlBaseParser.ONE:
            case SqlBaseParser.ONLY:
            case SqlBaseParser.OPTION:
            case SqlBaseParser.ORDINALITY:
            case SqlBaseParser.OUTPUT:
            case SqlBaseParser.OVER:
            case SqlBaseParser.OVERFLOW:
            case SqlBaseParser.PARTITION:
            case SqlBaseParser.PARTITIONS:
            case SqlBaseParser.PASSING:
            case SqlBaseParser.PAST:
            case SqlBaseParser.PATH:
            case SqlBaseParser.PATTERN:
            case SqlBaseParser.PER:
            case SqlBaseParser.PERIOD:
            case SqlBaseParser.PERMUTE:
            case SqlBaseParser.PLAN:
            case SqlBaseParser.POSITION:
            case SqlBaseParser.PRECEDING:
            case SqlBaseParser.PRECISION:
            case SqlBaseParser.PRIVILEGES:
            case SqlBaseParser.PROPERTIES:
            case SqlBaseParser.PRUNE:
            case SqlBaseParser.QUOTES:
            case SqlBaseParser.RANGE:
            case SqlBaseParser.READ:
            case SqlBaseParser.REFRESH:
            case SqlBaseParser.RENAME:
            case SqlBaseParser.REPEATABLE:
            case SqlBaseParser.REPLACE:
            case SqlBaseParser.RESET:
            case SqlBaseParser.RESPECT:
            case SqlBaseParser.RESTRICT:
            case SqlBaseParser.RETURNING:
            case SqlBaseParser.REVOKE:
            case SqlBaseParser.ROLE:
            case SqlBaseParser.ROLES:
            case SqlBaseParser.ROLLBACK:
            case SqlBaseParser.ROW:
            case SqlBaseParser.ROWS:
            case SqlBaseParser.RUNNING:
            case SqlBaseParser.SCALAR:
            case SqlBaseParser.SCHEMA:
            case SqlBaseParser.SCHEMAS:
            case SqlBaseParser.SECOND:
            case SqlBaseParser.SECURITY:
            case SqlBaseParser.SEEK:
            case SqlBaseParser.SERIALIZABLE:
            case SqlBaseParser.SESSION:
            case SqlBaseParser.SET:
            case SqlBaseParser.SETS:
            case SqlBaseParser.SHOW:
            case SqlBaseParser.SOME:
            case SqlBaseParser.START:
            case SqlBaseParser.STATS:
            case SqlBaseParser.SUBSET:
            case SqlBaseParser.SUBSTRING:
            case SqlBaseParser.SYSTEM:
            case SqlBaseParser.TABLES:
            case SqlBaseParser.TABLESAMPLE:
            case SqlBaseParser.TEXT:
            case SqlBaseParser.TEXT_STRING:
            case SqlBaseParser.TIES:
            case SqlBaseParser.TIME:
            case SqlBaseParser.TIMESTAMP:
            case SqlBaseParser.TO:
            case SqlBaseParser.TRAILING:
            case SqlBaseParser.TRANSACTION:
            case SqlBaseParser.TRUNCATE:
            case SqlBaseParser.TRY_CAST:
            case SqlBaseParser.TYPE:
            case SqlBaseParser.UNBOUNDED:
            case SqlBaseParser.UNCOMMITTED:
            case SqlBaseParser.UNCONDITIONAL:
            case SqlBaseParser.UNIQUE:
            case SqlBaseParser.UNKNOWN:
            case SqlBaseParser.UNMATCHED:
            case SqlBaseParser.UPDATE:
            case SqlBaseParser.USE:
            case SqlBaseParser.USER:
            case SqlBaseParser.UTF16:
            case SqlBaseParser.UTF32:
            case SqlBaseParser.UTF8:
            case SqlBaseParser.VALIDATE:
            case SqlBaseParser.VALUE:
            case SqlBaseParser.VERBOSE:
            case SqlBaseParser.VERSION:
            case SqlBaseParser.VIEW:
            case SqlBaseParser.WINDOW:
            case SqlBaseParser.WITHIN:
            case SqlBaseParser.WITHOUT:
            case SqlBaseParser.WORK:
            case SqlBaseParser.WRAPPER:
            case SqlBaseParser.WRITE:
            case SqlBaseParser.YEAR:
            case SqlBaseParser.ZONE:
            case SqlBaseParser.IDENTIFIER:
            case SqlBaseParser.DIGIT_IDENTIFIER:
            case SqlBaseParser.QUOTED_IDENTIFIER:
            case SqlBaseParser.BACKQUOTED_IDENTIFIER:
                localContext = new IdentifierUserContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3188;
                this.identifier();
                }
                break;
            case SqlBaseParser.STRING:
            case SqlBaseParser.UNICODE_STRING:
                localContext = new StringUserContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3189;
                this.string_();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonReserved(): NonReservedContext {
        let localContext = new NonReservedContext(this.context, this.state);
        this.enterRule(localContext, 228, SqlBaseParser.RULE_nonReserved);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3192;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & 3217914719) !== 0) || ((((_la - 50)) & ~0x1F) === 0 && ((1 << (_la - 50)) & 3446595601) !== 0) || ((((_la - 83)) & ~0x1F) === 0 && ((1 << (_la - 83)) & 4110204489) !== 0) || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 2884643659) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 3750754303) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & 4024434665) !== 0) || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & 4293917631) !== 0) || ((((_la - 247)) & ~0x1F) === 0 && ((1 << (_la - 247)) & 4008634351) !== 0) || ((((_la - 279)) & ~0x1F) === 0 && ((1 << (_la - 279)) & 130363) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public override sempred(localContext: antlr.ParserRuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 18:
            return this.queryTerm_sempred(localContext as QueryTermContext, predIndex);
        case 30:
            return this.relation_sempred(localContext as RelationContext, predIndex);
        case 61:
            return this.booleanExpression_sempred(localContext as BooleanExpressionContext, predIndex);
        case 63:
            return this.valueExpression_sempred(localContext as ValueExpressionContext, predIndex);
        case 64:
            return this.primaryExpression_sempred(localContext as PrimaryExpressionContext, predIndex);
        case 84:
            return this.type_sempred(localContext as TypeContext, predIndex);
        case 94:
            return this.rowPattern_sempred(localContext as RowPatternContext, predIndex);
        }
        return true;
    }
    private queryTerm_sempred(localContext: QueryTermContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return this.precpred(this.context, 2);
        case 1:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private relation_sempred(localContext: RelationContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 2:
            return this.precpred(this.context, 2);
        }
        return true;
    }
    private booleanExpression_sempred(localContext: BooleanExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 3:
            return this.precpred(this.context, 2);
        case 4:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private valueExpression_sempred(localContext: ValueExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 5:
            return this.precpred(this.context, 3);
        case 6:
            return this.precpred(this.context, 2);
        case 7:
            return this.precpred(this.context, 1);
        case 8:
            return this.precpred(this.context, 5);
        }
        return true;
    }
    private primaryExpression_sempred(localContext: PrimaryExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 9:
            return this.precpred(this.context, 24);
        case 10:
            return this.precpred(this.context, 22);
        }
        return true;
    }
    private type_sempred(localContext: TypeContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 11:
            return this.precpred(this.context, 2);
        }
        return true;
    }
    private rowPattern_sempred(localContext: RowPatternContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 12:
            return this.precpred(this.context, 2);
        case 13:
            return this.precpred(this.context, 1);
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,1,323,3195,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,259,8,5,1,5,
        1,5,1,5,1,5,1,5,3,5,266,8,5,1,5,1,5,3,5,270,8,5,1,5,1,5,3,5,274,
        8,5,1,5,1,5,1,5,1,5,3,5,280,8,5,1,5,1,5,3,5,284,8,5,1,5,1,5,1,5,
        1,5,1,5,3,5,291,8,5,1,5,1,5,1,5,3,5,296,8,5,1,5,1,5,3,5,300,8,5,
        1,5,1,5,1,5,1,5,3,5,306,8,5,1,5,1,5,3,5,310,8,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,329,8,5,
        1,5,1,5,1,5,1,5,3,5,335,8,5,1,5,1,5,3,5,339,8,5,1,5,1,5,3,5,343,
        8,5,1,5,1,5,3,5,347,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,355,8,5,1,5,
        1,5,3,5,359,8,5,1,5,3,5,362,8,5,1,5,1,5,1,5,3,5,367,8,5,1,5,1,5,
        1,5,1,5,3,5,373,8,5,1,5,1,5,1,5,1,5,1,5,5,5,380,8,5,10,5,12,5,383,
        9,5,1,5,1,5,1,5,3,5,388,8,5,1,5,1,5,3,5,392,8,5,1,5,1,5,1,5,1,5,
        3,5,398,8,5,1,5,1,5,1,5,1,5,1,5,3,5,405,8,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,3,5,414,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,
        426,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,435,8,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,3,5,444,8,5,1,5,1,5,1,5,1,5,3,5,450,8,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,3,5,461,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,
        469,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,477,8,5,1,5,1,5,1,5,1,5,1,5,
        3,5,484,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,494,8,5,1,5,1,5,
        1,5,1,5,1,5,3,5,501,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,509,8,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,
        543,8,5,10,5,12,5,546,9,5,3,5,548,8,5,1,5,3,5,551,8,5,1,5,1,5,3,
        5,555,8,5,1,5,1,5,1,5,1,5,3,5,561,8,5,1,5,1,5,1,5,3,5,566,8,5,1,
        5,1,5,1,5,1,5,1,5,3,5,573,8,5,1,5,1,5,1,5,1,5,3,5,579,8,5,1,5,1,
        5,3,5,583,8,5,1,5,1,5,3,5,587,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,595,
        8,5,1,5,1,5,1,5,1,5,3,5,601,8,5,1,5,1,5,3,5,605,8,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,619,8,5,1,5,1,5,1,5,1,5,
        1,5,1,5,3,5,627,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,3,5,646,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,669,
        8,5,10,5,12,5,672,9,5,3,5,674,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,3,5,684,8,5,1,5,1,5,3,5,688,8,5,1,5,1,5,1,5,1,5,1,5,3,5,695,8,
        5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,703,8,5,10,5,12,5,706,9,5,1,5,1,5,
        1,5,3,5,711,8,5,1,5,1,5,1,5,3,5,716,8,5,1,5,1,5,3,5,720,8,5,1,5,
        1,5,1,5,1,5,3,5,726,8,5,1,5,1,5,1,5,1,5,1,5,5,5,733,8,5,10,5,12,
        5,736,9,5,1,5,1,5,1,5,3,5,741,8,5,1,5,1,5,3,5,745,8,5,1,5,1,5,1,
        5,1,5,1,5,3,5,752,8,5,1,5,1,5,3,5,756,8,5,1,5,1,5,1,5,1,5,5,5,762,
        8,5,10,5,12,5,765,9,5,1,5,1,5,3,5,769,8,5,1,5,1,5,3,5,773,8,5,1,
        5,1,5,1,5,1,5,1,5,1,5,3,5,781,8,5,1,5,1,5,1,5,1,5,5,5,787,8,5,10,
        5,12,5,790,9,5,1,5,1,5,3,5,794,8,5,1,5,1,5,3,5,798,8,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,3,5,808,8,5,1,5,1,5,1,5,5,5,813,8,5,10,5,12,
        5,816,9,5,1,5,1,5,3,5,820,8,5,1,5,1,5,3,5,824,8,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,3,5,834,8,5,1,5,3,5,837,8,5,1,5,1,5,1,5,1,5,1,
        5,5,5,844,8,5,10,5,12,5,847,9,5,1,5,1,5,3,5,851,8,5,1,5,1,5,1,5,
        1,5,3,5,857,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,881,8,5,1,5,1,5,1,5,
        1,5,3,5,887,8,5,3,5,889,8,5,1,5,1,5,1,5,1,5,3,5,895,8,5,1,5,1,5,
        1,5,1,5,3,5,901,8,5,3,5,903,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,911,
        8,5,3,5,913,8,5,1,5,1,5,1,5,1,5,3,5,919,8,5,1,5,1,5,1,5,1,5,3,5,
        925,8,5,3,5,927,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,3,5,942,8,5,1,5,1,5,1,5,3,5,947,8,5,1,5,1,5,1,5,1,5,1,5,
        3,5,954,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,966,8,5,
        3,5,968,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,976,8,5,3,5,978,8,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,5,5,1001,8,5,10,5,12,5,1004,9,5,3,5,1006,8,5,1,5,
        1,5,3,5,1010,8,5,1,5,1,5,3,5,1014,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,1030,8,5,10,5,12,5,1033,9,5,3,
        5,1035,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,1044,8,5,10,5,12,5,1047,
        9,5,3,5,1049,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,3,5,1065,8,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,1073,8,5,10,5,12,
        5,1076,9,5,1,5,1,5,3,5,1080,8,5,1,5,1,5,1,5,1,5,3,5,1086,8,5,1,5,
        3,5,1089,8,5,1,5,1,5,1,5,1,5,1,5,4,5,1096,8,5,11,5,12,5,1097,3,5,
        1100,8,5,1,6,3,6,1103,8,6,1,6,1,6,1,7,1,7,3,7,1109,8,7,1,7,1,7,1,
        7,5,7,1114,8,7,10,7,12,7,1117,9,7,1,8,1,8,3,8,1121,8,8,1,9,1,9,1,
        9,1,9,3,9,1127,8,9,1,9,1,9,3,9,1131,8,9,1,9,1,9,3,9,1135,8,9,1,10,
        1,10,1,10,1,10,3,10,1141,8,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
        5,12,1150,8,12,10,12,12,12,1153,9,12,1,13,1,13,1,13,1,13,1,14,1,
        14,3,14,1161,8,14,1,15,1,15,1,15,1,15,1,15,1,15,5,15,1169,8,15,10,
        15,12,15,1172,9,15,3,15,1174,8,15,1,15,1,15,1,15,3,15,1179,8,15,
        3,15,1181,8,15,1,15,1,15,1,15,1,15,1,15,3,15,1188,8,15,1,15,1,15,
        1,15,1,15,3,15,1194,8,15,3,15,1196,8,15,1,16,1,16,3,16,1200,8,16,
        1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,3,18,1210,8,18,1,18,1,18,
        1,18,1,18,3,18,1216,8,18,1,18,5,18,1219,8,18,10,18,12,18,1222,9,
        18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,5,19,1231,8,19,10,19,12,19,
        1234,9,19,1,19,1,19,1,19,1,19,3,19,1240,8,19,1,20,1,20,3,20,1244,
        8,20,1,20,1,20,3,20,1248,8,20,1,21,1,21,3,21,1252,8,21,1,21,1,21,
        1,21,5,21,1257,8,21,10,21,12,21,1260,9,21,1,21,1,21,1,21,1,21,5,
        21,1266,8,21,10,21,12,21,1269,9,21,3,21,1271,8,21,1,21,1,21,3,21,
        1275,8,21,1,21,1,21,1,21,3,21,1280,8,21,1,21,1,21,3,21,1284,8,21,
        1,21,1,21,1,21,1,21,5,21,1290,8,21,10,21,12,21,1293,9,21,3,21,1295,
        8,21,1,22,3,22,1298,8,22,1,22,1,22,1,22,5,22,1303,8,22,10,22,12,
        22,1306,9,22,1,23,1,23,1,23,1,23,1,23,1,23,5,23,1314,8,23,10,23,
        12,23,1317,9,23,3,23,1319,8,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,
        1327,8,23,10,23,12,23,1330,9,23,3,23,1332,8,23,1,23,1,23,1,23,1,
        23,1,23,1,23,1,23,5,23,1341,8,23,10,23,12,23,1344,9,23,1,23,1,23,
        3,23,1348,8,23,1,24,1,24,1,24,1,24,5,24,1354,8,24,10,24,12,24,1357,
        9,24,3,24,1359,8,24,1,24,1,24,3,24,1363,8,24,1,25,1,25,1,25,1,25,
        1,25,1,25,1,26,3,26,1372,8,26,1,26,1,26,1,26,1,26,1,26,5,26,1379,
        8,26,10,26,12,26,1382,9,26,3,26,1384,8,26,1,26,1,26,1,26,1,26,1,
        26,5,26,1391,8,26,10,26,12,26,1394,9,26,3,26,1396,8,26,1,26,3,26,
        1399,8,26,1,27,1,27,3,27,1403,8,27,1,27,1,27,1,27,1,27,1,27,1,28,
        1,28,1,29,1,29,3,29,1414,8,29,1,29,3,29,1417,8,29,1,29,1,29,1,29,
        1,29,1,29,3,29,1424,8,29,1,29,3,29,1427,8,29,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        3,30,1446,8,30,5,30,1448,8,30,10,30,12,30,1451,9,30,1,31,3,31,1454,
        8,31,1,31,1,31,3,31,1458,8,31,1,31,1,31,3,31,1462,8,31,1,31,1,31,
        3,31,1466,8,31,3,31,1468,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        5,32,1477,8,32,10,32,12,32,1480,9,32,1,32,1,32,3,32,1484,8,32,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,1493,8,33,1,34,1,34,1,35,1,
        35,1,36,1,36,1,36,3,36,1502,8,36,1,36,3,36,1505,8,36,1,37,1,37,1,
        37,1,37,3,37,1511,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,5,
        38,1521,8,38,10,38,12,38,1524,9,38,3,38,1526,8,38,1,38,1,38,1,38,
        1,38,1,38,5,38,1533,8,38,10,38,12,38,1536,9,38,3,38,1538,8,38,1,
        38,1,38,1,38,1,38,5,38,1544,8,38,10,38,12,38,1547,9,38,3,38,1549,
        8,38,1,38,3,38,1552,8,38,1,38,1,38,1,38,3,38,1557,8,38,1,38,3,38,
        1560,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,5,38,1570,8,38,
        10,38,12,38,1573,9,38,3,38,1575,8,38,1,38,1,38,1,38,1,38,5,38,1581,
        8,38,10,38,12,38,1584,9,38,1,38,1,38,3,38,1588,8,38,1,38,1,38,3,
        38,1592,8,38,3,38,1594,8,38,3,38,1596,8,38,1,39,1,39,1,39,1,39,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,1611,8,40,3,40,1613,
        8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,1624,8,41,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,3,42,1645,8,42,1,43,1,43,1,43,1,43,
        1,43,1,43,5,43,1653,8,43,10,43,12,43,1656,9,43,1,43,1,43,1,44,1,
        44,1,44,1,44,1,45,1,45,3,45,1666,8,45,1,45,1,45,3,45,1670,8,45,3,
        45,1672,8,45,1,46,1,46,1,46,1,46,5,46,1678,8,46,10,46,12,46,1681,
        9,46,1,46,1,46,1,47,1,47,3,47,1687,8,47,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,1,47,1,47,5,47,1698,8,47,10,47,12,47,1701,9,47,1,47,1,
        47,1,47,3,47,1706,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
        47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
        47,5,47,1730,8,47,10,47,12,47,1733,9,47,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1747,8,47,1,47,1,47,1,47,
        3,47,1752,8,47,1,47,1,47,3,47,1756,8,47,1,48,1,48,1,48,1,48,1,48,
        1,48,1,48,1,48,3,48,1766,8,48,1,48,1,48,1,48,1,48,3,48,1772,8,48,
        1,48,1,48,1,48,1,48,3,48,1778,8,48,1,48,1,48,1,48,1,48,1,48,1,48,
        3,48,1786,8,48,1,48,1,48,1,48,3,48,1791,8,48,1,48,1,48,1,48,1,48,
        1,48,3,48,1798,8,48,3,48,1800,8,48,1,48,1,48,1,48,1,48,3,48,1806,
        8,48,1,48,1,48,1,48,1,48,3,48,1812,8,48,1,48,1,48,3,48,1816,8,48,
        1,48,1,48,1,48,3,48,1821,8,48,1,48,1,48,1,48,1,48,1,48,5,48,1828,
        8,48,10,48,12,48,1831,9,48,1,48,1,48,3,48,1835,8,48,1,49,1,49,1,
        49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,5,49,1847,8,49,10,49,12,49,
        1850,9,49,1,49,1,49,1,49,1,49,1,49,5,49,1857,8,49,10,49,12,49,1860,
        9,49,3,49,1862,8,49,1,50,1,50,1,51,1,51,1,51,1,51,1,51,3,51,1871,
        8,51,1,52,1,52,1,52,3,52,1876,8,52,1,52,1,52,1,52,3,52,1881,8,52,
        3,52,1883,8,52,1,53,1,53,1,53,1,53,1,53,5,53,1890,8,53,10,53,12,
        53,1893,9,53,3,53,1895,8,53,1,53,1,53,1,53,1,53,5,53,1901,8,53,10,
        53,12,53,1904,9,53,3,53,1906,8,53,1,53,1,53,1,54,1,54,1,54,3,54,
        1913,8,54,1,54,1,54,1,54,3,54,1918,8,54,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,5,55,1927,8,55,10,55,12,55,1930,9,55,3,55,1932,8,55,1,
        55,1,55,3,55,1936,8,55,3,55,1938,8,55,1,55,1,55,1,55,1,55,1,55,1,
        55,3,55,1946,8,55,1,55,1,55,1,55,1,55,1,55,1,55,5,55,1954,8,55,10,
        55,12,55,1957,9,55,1,55,1,55,1,55,3,55,1962,8,55,3,55,1964,8,55,
        1,56,1,56,1,56,1,56,1,56,3,56,1971,8,56,1,56,1,56,3,56,1975,8,56,
        3,56,1977,8,56,1,56,1,56,1,56,1,56,1,56,3,56,1984,8,56,1,56,1,56,
        3,56,1988,8,56,3,56,1990,8,56,3,56,1992,8,56,1,57,1,57,1,57,1,57,
        1,57,5,57,1999,8,57,10,57,12,57,2002,9,57,1,57,1,57,1,57,1,57,1,
        57,1,57,1,57,1,57,3,57,2012,8,57,1,58,1,58,3,58,2016,8,58,1,59,1,
        59,1,59,1,59,1,59,1,59,5,59,2024,8,59,10,59,12,59,2027,9,59,1,59,
        1,59,1,60,1,60,1,61,1,61,1,61,3,61,2036,8,61,1,61,1,61,3,61,2040,
        8,61,1,61,1,61,1,61,1,61,1,61,1,61,5,61,2048,8,61,10,61,12,61,2051,
        9,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,2063,
        8,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,2071,8,62,1,62,1,62,1,62,
        1,62,1,62,5,62,2078,8,62,10,62,12,62,2081,9,62,1,62,1,62,1,62,3,
        62,2086,8,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,2094,8,62,1,62,1,
        62,1,62,1,62,3,62,2100,8,62,1,62,1,62,3,62,2104,8,62,1,62,1,62,1,
        62,3,62,2109,8,62,1,62,1,62,1,62,3,62,2114,8,62,1,63,1,63,1,63,1,
        63,3,63,2120,8,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,
        63,1,63,1,63,5,63,2134,8,63,10,63,12,63,2137,9,63,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,4,64,2164,8,64,11,64,
        12,64,2165,1,64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,2175,8,64,10,
        64,12,64,2178,9,64,1,64,1,64,1,64,1,64,1,64,3,64,2185,8,64,1,64,
        1,64,1,64,3,64,2190,8,64,1,64,1,64,1,64,3,64,2195,8,64,1,64,1,64,
        1,64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,2206,8,64,10,64,12,64,2209,
        9,64,1,64,1,64,1,64,3,64,2214,8,64,1,64,1,64,1,64,1,64,1,64,3,64,
        2221,8,64,1,64,1,64,1,64,3,64,2226,8,64,1,64,3,64,2229,8,64,1,64,
        3,64,2232,8,64,1,64,1,64,1,64,3,64,2237,8,64,1,64,1,64,1,64,5,64,
        2242,8,64,10,64,12,64,2245,9,64,3,64,2247,8,64,1,64,1,64,1,64,1,
        64,1,64,5,64,2254,8,64,10,64,12,64,2257,9,64,3,64,2259,8,64,1,64,
        1,64,3,64,2263,8,64,1,64,3,64,2266,8,64,1,64,3,64,2269,8,64,1,64,
        1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,2282,8,64,
        10,64,12,64,2285,9,64,3,64,2287,8,64,1,64,1,64,1,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,4,64,2304,8,64,11,
        64,12,64,2305,1,64,1,64,3,64,2310,8,64,1,64,1,64,1,64,1,64,4,64,
        2316,8,64,11,64,12,64,2317,1,64,1,64,3,64,2322,8,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,5,64,2345,8,64,10,64,12,64,2348,9,64,
        3,64,2350,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,2359,8,64,
        1,64,1,64,1,64,1,64,3,64,2365,8,64,1,64,1,64,1,64,1,64,3,64,2371,
        8,64,1,64,1,64,1,64,1,64,3,64,2377,8,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,3,64,2386,8,64,1,64,3,64,2389,8,64,1,64,3,64,2392,8,64,
        1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,3,64,2411,8,64,1,64,1,64,1,64,1,64,1,64,1,64,
        1,64,3,64,2420,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,2440,8,64,10,64,
        12,64,2443,9,64,3,64,2445,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        1,64,3,64,2455,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,2464,
        8,64,1,64,1,64,1,64,1,64,3,64,2470,8,64,1,64,1,64,1,64,1,64,3,64,
        2476,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,2487,
        8,64,3,64,2489,8,64,1,64,1,64,1,64,3,64,2494,8,64,1,64,1,64,1,64,
        1,64,1,64,3,64,2501,8,64,3,64,2503,8,64,1,64,1,64,1,64,1,64,3,64,
        2509,8,64,1,64,1,64,1,64,1,64,3,64,2515,8,64,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,5,64,2524,8,64,10,64,12,64,2527,9,64,1,64,1,64,1,
        64,1,64,1,64,1,64,3,64,2535,8,64,1,64,1,64,1,64,3,64,2540,8,64,1,
        64,1,64,1,64,3,64,2545,8,64,3,64,2547,8,64,3,64,2549,8,64,1,64,1,
        64,1,64,1,64,3,64,2555,8,64,3,64,2557,8,64,1,64,1,64,1,64,1,64,1,
        64,1,64,5,64,2565,8,64,10,64,12,64,2568,9,64,1,64,1,64,1,64,1,64,
        1,64,1,64,3,64,2576,8,64,3,64,2578,8,64,1,64,1,64,1,64,1,64,3,64,
        2584,8,64,3,64,2586,8,64,1,64,3,64,2589,8,64,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,5,64,2599,8,64,10,64,12,64,2602,9,64,1,65,1,
        65,1,65,1,65,1,65,3,65,2609,8,65,1,65,1,65,1,65,1,65,5,65,2615,8,
        65,10,65,12,65,2618,9,65,3,65,2620,8,65,1,66,1,66,1,66,3,66,2625,
        8,66,1,67,1,67,1,67,3,67,2630,8,67,1,68,1,68,1,68,1,68,1,69,1,69,
        1,70,1,70,1,70,1,70,3,70,2642,8,70,1,71,1,71,3,71,2646,8,71,1,71,
        1,71,3,71,2650,8,71,1,71,3,71,2653,8,71,3,71,2655,8,71,1,72,1,72,
        1,72,1,72,1,72,1,72,3,72,2663,8,72,1,73,3,73,2666,8,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,3,73,2676,8,73,1,74,1,74,1,75,1,75,
        1,75,1,75,3,75,2684,8,75,1,76,1,76,1,76,1,76,3,76,2690,8,76,3,76,
        2692,8,76,1,77,1,77,1,77,1,77,1,77,1,77,3,77,2700,8,77,1,78,1,78,
        1,79,1,79,1,80,1,80,1,81,1,81,3,81,2710,8,81,1,81,1,81,1,81,1,81,
        3,81,2716,8,81,1,82,1,82,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,
        5,84,2728,8,84,10,84,12,84,2731,9,84,1,84,1,84,1,84,1,84,1,84,1,
        84,3,84,2739,8,84,1,84,1,84,1,84,1,84,1,84,3,84,2746,8,84,1,84,1,
        84,1,84,3,84,2751,8,84,1,84,1,84,1,84,1,84,1,84,3,84,2758,8,84,1,
        84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,2768,8,84,1,84,1,84,1,
        84,3,84,2773,8,84,1,84,1,84,1,84,1,84,1,84,3,84,2780,8,84,1,84,1,
        84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,
        84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,5,84,2804,8,84,10,84,12,84,
        2807,9,84,1,84,1,84,3,84,2811,8,84,3,84,2813,8,84,1,84,1,84,1,84,
        1,84,1,84,3,84,2820,8,84,5,84,2822,8,84,10,84,12,84,2825,9,84,1,
        85,1,85,1,85,1,85,3,85,2831,8,85,1,86,1,86,3,86,2835,8,86,1,87,1,
        87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,
        89,3,89,2852,8,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,
        89,1,89,5,89,2865,8,89,10,89,12,89,2868,9,89,1,89,1,89,1,89,1,89,
        3,89,2874,8,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,2883,8,89,
        1,89,1,89,1,89,1,89,1,89,1,89,5,89,2891,8,89,10,89,12,89,2894,9,
        89,1,89,1,89,3,89,2898,8,89,1,89,1,89,1,89,1,89,1,89,5,89,2905,8,
        89,10,89,12,89,2908,9,89,1,89,1,89,3,89,2912,8,89,1,90,1,90,1,90,
        1,90,1,90,1,90,3,90,2920,8,90,1,91,1,91,1,91,1,91,5,91,2926,8,91,
        10,91,12,91,2929,9,91,3,91,2931,8,91,1,91,1,91,1,91,1,91,3,91,2937,
        8,91,1,91,3,91,2940,8,91,1,91,1,91,1,91,1,91,1,91,3,91,2947,8,91,
        1,91,1,91,1,91,1,91,5,91,2953,8,91,10,91,12,91,2956,9,91,3,91,2958,
        8,91,1,91,1,91,1,91,1,91,5,91,2964,8,91,10,91,12,91,2967,9,91,3,
        91,2969,8,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,
        92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,
        92,3,92,2995,8,92,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,
        93,3006,8,93,1,94,1,94,1,94,3,94,3011,8,94,1,94,1,94,1,94,1,94,1,
        94,5,94,3018,8,94,10,94,12,94,3021,9,94,1,95,1,95,1,95,1,95,1,95,
        1,95,1,95,1,95,5,95,3031,8,95,10,95,12,95,3034,9,95,1,95,1,95,1,
        95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,3048,8,95,1,
        96,1,96,3,96,3052,8,96,1,96,1,96,3,96,3056,8,96,1,96,1,96,3,96,3060,
        8,96,1,96,1,96,1,96,1,96,3,96,3066,8,96,1,96,1,96,3,96,3070,8,96,
        1,96,1,96,3,96,3074,8,96,1,96,1,96,3,96,3078,8,96,3,96,3080,8,96,
        1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,3,98,3090,8,98,1,99,1,99,
        1,99,1,99,1,99,3,99,3097,8,99,1,100,1,100,1,100,1,100,1,100,1,100,
        1,100,3,100,3106,8,100,1,101,1,101,1,101,1,101,1,101,3,101,3113,
        8,101,1,102,1,102,1,102,1,102,1,102,3,102,3120,8,102,1,103,1,103,
        1,103,5,103,3125,8,103,10,103,12,103,3128,9,103,1,104,1,104,1,105,
        1,105,1,105,5,105,3135,8,105,10,105,12,105,3138,9,105,1,106,1,106,
        1,106,1,106,1,106,1,106,1,107,1,107,1,108,1,108,1,108,3,108,3151,
        8,108,1,109,1,109,1,109,1,109,1,109,3,109,3158,8,109,1,110,1,110,
        1,110,5,110,3163,8,110,10,110,12,110,3166,9,110,1,111,1,111,1,111,
        1,111,1,111,3,111,3173,8,111,1,112,3,112,3176,8,112,1,112,1,112,
        3,112,3180,8,112,1,112,1,112,3,112,3184,8,112,1,112,3,112,3187,8,
        112,1,113,1,113,3,113,3191,8,113,1,114,1,114,1,114,0,7,36,60,122,
        126,128,168,188,115,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
        34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
        78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
        116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
        148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
        180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,
        212,214,216,218,220,222,224,226,228,0,37,2,0,37,37,217,217,2,0,69,
        69,124,124,2,0,229,229,246,246,2,0,99,99,115,115,2,0,86,86,116,116,
        1,0,225,226,2,0,95,95,163,163,2,0,308,308,312,312,2,0,85,85,267,
        267,2,0,29,29,72,72,2,0,95,95,139,139,2,0,22,22,75,75,2,0,32,32,
        245,245,3,0,34,34,141,141,256,256,2,0,117,117,233,233,2,0,80,80,
        83,83,2,0,136,136,178,178,2,0,118,118,186,186,2,0,52,52,267,267,
        1,0,302,303,1,0,304,306,1,0,276,278,4,0,83,83,91,91,259,259,269,
        269,2,0,47,47,266,266,2,0,94,94,227,227,1,0,296,301,3,0,22,22,26,
        26,240,240,2,0,91,91,259,259,5,0,65,65,111,111,159,160,231,231,294,
        294,1,0,164,167,2,0,96,96,201,201,3,0,106,106,129,129,249,249,4,
        0,76,76,125,125,150,150,279,279,2,0,181,181,293,293,5,0,51,51,70,
        70,120,120,234,234,272,272,2,0,254,254,283,283,54,0,18,22,24,24,
        26,27,29,32,34,34,36,37,40,47,49,50,54,54,63,65,67,69,71,72,74,74,
        76,77,80,81,83,83,86,86,89,89,92,96,98,98,101,106,109,109,111,114,
        116,117,119,119,122,122,124,125,127,127,129,129,136,141,143,143,
        145,145,147,147,150,160,162,169,173,178,180,182,185,185,187,202,
        204,209,211,219,221,223,225,233,235,245,247,250,252,257,260,262,
        264,266,268,270,272,274,276,280,282,284,287,287,289,295,3703,0,230,
        1,0,0,0,2,233,1,0,0,0,4,236,1,0,0,0,6,239,1,0,0,0,8,242,1,0,0,0,
        10,1099,1,0,0,0,12,1102,1,0,0,0,14,1106,1,0,0,0,16,1120,1,0,0,0,
        18,1122,1,0,0,0,20,1136,1,0,0,0,22,1142,1,0,0,0,24,1146,1,0,0,0,
        26,1154,1,0,0,0,28,1160,1,0,0,0,30,1162,1,0,0,0,32,1199,1,0,0,0,
        34,1201,1,0,0,0,36,1203,1,0,0,0,38,1239,1,0,0,0,40,1241,1,0,0,0,
        42,1249,1,0,0,0,44,1297,1,0,0,0,46,1347,1,0,0,0,48,1362,1,0,0,0,
        50,1364,1,0,0,0,52,1371,1,0,0,0,54,1400,1,0,0,0,56,1409,1,0,0,0,
        58,1426,1,0,0,0,60,1428,1,0,0,0,62,1467,1,0,0,0,64,1483,1,0,0,0,
        66,1485,1,0,0,0,68,1494,1,0,0,0,70,1496,1,0,0,0,72,1504,1,0,0,0,
        74,1510,1,0,0,0,76,1512,1,0,0,0,78,1597,1,0,0,0,80,1612,1,0,0,0,
        82,1623,1,0,0,0,84,1644,1,0,0,0,86,1646,1,0,0,0,88,1659,1,0,0,0,
        90,1663,1,0,0,0,92,1673,1,0,0,0,94,1755,1,0,0,0,96,1834,1,0,0,0,
        98,1861,1,0,0,0,100,1863,1,0,0,0,102,1870,1,0,0,0,104,1882,1,0,0,
        0,106,1884,1,0,0,0,108,1912,1,0,0,0,110,1919,1,0,0,0,112,1991,1,
        0,0,0,114,2011,1,0,0,0,116,2013,1,0,0,0,118,2017,1,0,0,0,120,2030,
        1,0,0,0,122,2039,1,0,0,0,124,2113,1,0,0,0,126,2119,1,0,0,0,128,2588,
        1,0,0,0,130,2603,1,0,0,0,132,2621,1,0,0,0,134,2626,1,0,0,0,136,2631,
        1,0,0,0,138,2635,1,0,0,0,140,2641,1,0,0,0,142,2654,1,0,0,0,144,2662,
        1,0,0,0,146,2675,1,0,0,0,148,2677,1,0,0,0,150,2683,1,0,0,0,152,2691,
        1,0,0,0,154,2699,1,0,0,0,156,2701,1,0,0,0,158,2703,1,0,0,0,160,2705,
        1,0,0,0,162,2707,1,0,0,0,164,2717,1,0,0,0,166,2719,1,0,0,0,168,2812,
        1,0,0,0,170,2830,1,0,0,0,172,2834,1,0,0,0,174,2836,1,0,0,0,176,2841,
        1,0,0,0,178,2911,1,0,0,0,180,2913,1,0,0,0,182,2930,1,0,0,0,184,2994,
        1,0,0,0,186,3005,1,0,0,0,188,3007,1,0,0,0,190,3047,1,0,0,0,192,3079,
        1,0,0,0,194,3081,1,0,0,0,196,3089,1,0,0,0,198,3096,1,0,0,0,200,3105,
        1,0,0,0,202,3112,1,0,0,0,204,3119,1,0,0,0,206,3121,1,0,0,0,208,3129,
        1,0,0,0,210,3131,1,0,0,0,212,3139,1,0,0,0,214,3145,1,0,0,0,216,3150,
        1,0,0,0,218,3157,1,0,0,0,220,3159,1,0,0,0,222,3172,1,0,0,0,224,3186,
        1,0,0,0,226,3190,1,0,0,0,228,3192,1,0,0,0,230,231,3,10,5,0,231,232,
        5,0,0,1,232,1,1,0,0,0,233,234,3,120,60,0,234,235,5,0,0,1,235,3,1,
        0,0,0,236,237,3,206,103,0,237,238,5,0,0,1,238,5,1,0,0,0,239,240,
        3,168,84,0,240,241,5,0,0,1,241,7,1,0,0,0,242,243,3,188,94,0,243,
        244,5,0,0,1,244,9,1,0,0,0,245,1100,3,12,6,0,246,247,5,273,0,0,247,
        1100,3,222,111,0,248,249,5,273,0,0,249,250,3,222,111,0,250,251,5,
        1,0,0,251,252,3,222,111,0,252,1100,1,0,0,0,253,254,5,51,0,0,254,
        258,5,40,0,0,255,256,5,112,0,0,256,257,5,171,0,0,257,259,5,88,0,
        0,258,255,1,0,0,0,258,259,1,0,0,0,259,260,1,0,0,0,260,261,3,222,
        111,0,261,262,5,275,0,0,262,265,3,222,111,0,263,264,5,44,0,0,264,
        266,3,152,76,0,265,263,1,0,0,0,265,266,1,0,0,0,266,269,1,0,0,0,267,
        268,5,31,0,0,268,270,3,218,109,0,269,267,1,0,0,0,269,270,1,0,0,0,
        270,273,1,0,0,0,271,272,5,288,0,0,272,274,3,22,11,0,273,271,1,0,
        0,0,273,274,1,0,0,0,274,1100,1,0,0,0,275,276,5,78,0,0,276,279,5,
        40,0,0,277,278,5,112,0,0,278,280,5,88,0,0,279,277,1,0,0,0,279,280,
        1,0,0,0,280,281,1,0,0,0,281,283,3,222,111,0,282,284,7,0,0,0,283,
        282,1,0,0,0,283,284,1,0,0,0,284,1100,1,0,0,0,285,286,5,51,0,0,286,
        290,5,229,0,0,287,288,5,112,0,0,288,289,5,171,0,0,289,291,5,88,0,
        0,290,287,1,0,0,0,290,291,1,0,0,0,291,292,1,0,0,0,292,295,3,210,
        105,0,293,294,5,31,0,0,294,296,3,218,109,0,295,293,1,0,0,0,295,296,
        1,0,0,0,296,299,1,0,0,0,297,298,5,288,0,0,298,300,3,22,11,0,299,
        297,1,0,0,0,299,300,1,0,0,0,300,1100,1,0,0,0,301,302,5,78,0,0,302,
        305,5,229,0,0,303,304,5,112,0,0,304,306,5,88,0,0,305,303,1,0,0,0,
        305,306,1,0,0,0,306,307,1,0,0,0,307,309,3,210,105,0,308,310,7,0,
        0,0,309,308,1,0,0,0,309,310,1,0,0,0,310,1100,1,0,0,0,311,312,5,23,
        0,0,312,313,5,229,0,0,313,314,3,210,105,0,314,315,5,212,0,0,315,
        316,5,255,0,0,316,317,3,222,111,0,317,1100,1,0,0,0,318,319,5,23,
        0,0,319,320,5,229,0,0,320,321,3,210,105,0,321,322,5,237,0,0,322,
        323,5,31,0,0,323,324,3,218,109,0,324,1100,1,0,0,0,325,328,5,51,0,
        0,326,327,5,183,0,0,327,329,5,214,0,0,328,326,1,0,0,0,328,329,1,
        0,0,0,329,330,1,0,0,0,330,334,5,246,0,0,331,332,5,112,0,0,332,333,
        5,171,0,0,333,335,5,88,0,0,334,331,1,0,0,0,334,335,1,0,0,0,335,336,
        1,0,0,0,336,338,3,210,105,0,337,339,3,92,46,0,338,337,1,0,0,0,338,
        339,1,0,0,0,339,342,1,0,0,0,340,341,5,44,0,0,341,343,3,152,76,0,
        342,340,1,0,0,0,342,343,1,0,0,0,343,346,1,0,0,0,344,345,5,288,0,
        0,345,347,3,22,11,0,346,344,1,0,0,0,346,347,1,0,0,0,347,348,1,0,
        0,0,348,354,5,28,0,0,349,355,3,12,6,0,350,351,5,2,0,0,351,352,3,
        12,6,0,352,353,5,3,0,0,353,355,1,0,0,0,354,349,1,0,0,0,354,350,1,
        0,0,0,355,361,1,0,0,0,356,358,5,288,0,0,357,359,5,168,0,0,358,357,
        1,0,0,0,358,359,1,0,0,0,359,360,1,0,0,0,360,362,5,63,0,0,361,356,
        1,0,0,0,361,362,1,0,0,0,362,1100,1,0,0,0,363,366,5,51,0,0,364,365,
        5,183,0,0,365,367,5,214,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,
        368,1,0,0,0,368,372,5,246,0,0,369,370,5,112,0,0,370,371,5,171,0,
        0,371,373,5,88,0,0,372,369,1,0,0,0,372,373,1,0,0,0,373,374,1,0,0,
        0,374,375,3,210,105,0,375,376,5,2,0,0,376,381,3,16,8,0,377,378,5,
        4,0,0,378,380,3,16,8,0,379,377,1,0,0,0,380,383,1,0,0,0,381,379,1,
        0,0,0,381,382,1,0,0,0,382,384,1,0,0,0,383,381,1,0,0,0,384,387,5,
        3,0,0,385,386,5,44,0,0,386,388,3,152,76,0,387,385,1,0,0,0,387,388,
        1,0,0,0,388,391,1,0,0,0,389,390,5,288,0,0,390,392,3,22,11,0,391,
        389,1,0,0,0,391,392,1,0,0,0,392,1100,1,0,0,0,393,394,5,78,0,0,394,
        397,5,246,0,0,395,396,5,112,0,0,396,398,5,88,0,0,397,395,1,0,0,0,
        397,398,1,0,0,0,398,399,1,0,0,0,399,1100,3,210,105,0,400,401,5,120,
        0,0,401,402,5,123,0,0,402,404,3,210,105,0,403,405,3,92,46,0,404,
        403,1,0,0,0,404,405,1,0,0,0,405,406,1,0,0,0,406,407,3,12,6,0,407,
        1100,1,0,0,0,408,409,5,70,0,0,409,410,5,99,0,0,410,413,3,210,105,
        0,411,412,5,286,0,0,412,414,3,122,61,0,413,411,1,0,0,0,413,414,1,
        0,0,0,414,1100,1,0,0,0,415,416,5,260,0,0,416,417,5,246,0,0,417,1100,
        3,210,105,0,418,419,5,44,0,0,419,420,5,179,0,0,420,421,5,246,0,0,
        421,422,3,210,105,0,422,425,5,126,0,0,423,426,3,152,76,0,424,426,
        5,172,0,0,425,423,1,0,0,0,425,424,1,0,0,0,426,1100,1,0,0,0,427,428,
        5,44,0,0,428,429,5,179,0,0,429,430,5,284,0,0,430,431,3,210,105,0,
        431,434,5,126,0,0,432,435,3,152,76,0,433,435,5,172,0,0,434,432,1,
        0,0,0,434,433,1,0,0,0,435,1100,1,0,0,0,436,437,5,44,0,0,437,438,
        5,179,0,0,438,439,5,42,0,0,439,440,3,210,105,0,440,443,5,126,0,0,
        441,444,3,152,76,0,442,444,5,172,0,0,443,441,1,0,0,0,443,442,1,0,
        0,0,444,1100,1,0,0,0,445,446,5,23,0,0,446,449,5,246,0,0,447,448,
        5,112,0,0,448,450,5,88,0,0,449,447,1,0,0,0,449,450,1,0,0,0,450,451,
        1,0,0,0,451,452,3,210,105,0,452,453,5,212,0,0,453,454,5,255,0,0,
        454,455,3,210,105,0,455,1100,1,0,0,0,456,457,5,23,0,0,457,460,5,
        246,0,0,458,459,5,112,0,0,459,461,5,88,0,0,460,458,1,0,0,0,460,461,
        1,0,0,0,461,462,1,0,0,0,462,463,3,210,105,0,463,464,5,19,0,0,464,
        468,5,42,0,0,465,466,5,112,0,0,466,467,5,171,0,0,467,469,5,88,0,
        0,468,465,1,0,0,0,468,469,1,0,0,0,469,470,1,0,0,0,470,471,3,18,9,
        0,471,1100,1,0,0,0,472,473,5,23,0,0,473,476,5,246,0,0,474,475,5,
        112,0,0,475,477,5,88,0,0,476,474,1,0,0,0,476,477,1,0,0,0,477,478,
        1,0,0,0,478,479,3,210,105,0,479,480,5,212,0,0,480,483,5,42,0,0,481,
        482,5,112,0,0,482,484,5,88,0,0,483,481,1,0,0,0,483,484,1,0,0,0,484,
        485,1,0,0,0,485,486,3,210,105,0,486,487,5,255,0,0,487,488,3,222,
        111,0,488,1100,1,0,0,0,489,490,5,23,0,0,490,493,5,246,0,0,491,492,
        5,112,0,0,492,494,5,88,0,0,493,491,1,0,0,0,493,494,1,0,0,0,494,495,
        1,0,0,0,495,496,3,210,105,0,496,497,5,78,0,0,497,500,5,42,0,0,498,
        499,5,112,0,0,499,501,5,88,0,0,500,498,1,0,0,0,500,501,1,0,0,0,501,
        502,1,0,0,0,502,503,3,210,105,0,503,1100,1,0,0,0,504,505,5,23,0,
        0,505,508,5,246,0,0,506,507,5,112,0,0,507,509,5,88,0,0,508,506,1,
        0,0,0,508,509,1,0,0,0,509,510,1,0,0,0,510,511,3,210,105,0,511,512,
        5,23,0,0,512,513,5,42,0,0,513,514,3,210,105,0,514,515,5,237,0,0,
        515,516,5,63,0,0,516,517,5,262,0,0,517,518,3,168,84,0,518,1100,1,
        0,0,0,519,520,5,23,0,0,520,521,5,246,0,0,521,522,3,210,105,0,522,
        523,5,237,0,0,523,524,5,31,0,0,524,525,3,218,109,0,525,1100,1,0,
        0,0,526,527,5,23,0,0,527,528,5,246,0,0,528,529,3,210,105,0,529,530,
        5,237,0,0,530,531,5,205,0,0,531,532,3,24,12,0,532,1100,1,0,0,0,533,
        534,5,23,0,0,534,535,5,246,0,0,535,536,3,210,105,0,536,537,5,87,
        0,0,537,550,3,222,111,0,538,547,5,2,0,0,539,544,3,202,101,0,540,
        541,5,4,0,0,541,543,3,202,101,0,542,540,1,0,0,0,543,546,1,0,0,0,
        544,542,1,0,0,0,544,545,1,0,0,0,545,548,1,0,0,0,546,544,1,0,0,0,
        547,539,1,0,0,0,547,548,1,0,0,0,548,549,1,0,0,0,549,551,5,3,0,0,
        550,538,1,0,0,0,550,551,1,0,0,0,551,554,1,0,0,0,552,553,5,286,0,
        0,553,555,3,122,61,0,554,552,1,0,0,0,554,555,1,0,0,0,555,1100,1,
        0,0,0,556,557,5,24,0,0,557,560,3,210,105,0,558,559,5,288,0,0,559,
        561,3,22,11,0,560,558,1,0,0,0,560,561,1,0,0,0,561,1100,1,0,0,0,562,
        565,5,51,0,0,563,564,5,183,0,0,564,566,5,214,0,0,565,563,1,0,0,0,
        565,566,1,0,0,0,566,567,1,0,0,0,567,568,5,156,0,0,568,572,5,284,
        0,0,569,570,5,112,0,0,570,571,5,171,0,0,571,573,5,88,0,0,572,569,
        1,0,0,0,572,573,1,0,0,0,573,574,1,0,0,0,574,578,3,210,105,0,575,
        576,5,102,0,0,576,577,5,197,0,0,577,579,3,162,81,0,578,575,1,0,0,
        0,578,579,1,0,0,0,579,582,1,0,0,0,580,581,5,44,0,0,581,583,3,152,
        76,0,582,580,1,0,0,0,582,583,1,0,0,0,583,586,1,0,0,0,584,585,5,288,
        0,0,585,587,3,22,11,0,586,584,1,0,0,0,586,587,1,0,0,0,587,588,1,
        0,0,0,588,589,5,28,0,0,589,590,3,12,6,0,590,1100,1,0,0,0,591,594,
        5,51,0,0,592,593,5,183,0,0,593,595,5,214,0,0,594,592,1,0,0,0,594,
        595,1,0,0,0,595,596,1,0,0,0,596,597,5,284,0,0,597,600,3,210,105,
        0,598,599,5,44,0,0,599,601,3,152,76,0,600,598,1,0,0,0,600,601,1,
        0,0,0,601,604,1,0,0,0,602,603,5,232,0,0,603,605,7,1,0,0,604,602,
        1,0,0,0,604,605,1,0,0,0,605,606,1,0,0,0,606,607,5,28,0,0,607,608,
        3,12,6,0,608,1100,1,0,0,0,609,610,5,211,0,0,610,611,5,156,0,0,611,
        612,5,284,0,0,612,1100,3,210,105,0,613,614,5,78,0,0,614,615,5,156,
        0,0,615,618,5,284,0,0,616,617,5,112,0,0,617,619,5,88,0,0,618,616,
        1,0,0,0,618,619,1,0,0,0,619,620,1,0,0,0,620,1100,3,210,105,0,621,
        622,5,23,0,0,622,623,5,156,0,0,623,626,5,284,0,0,624,625,5,112,0,
        0,625,627,5,88,0,0,626,624,1,0,0,0,626,627,1,0,0,0,627,628,1,0,0,
        0,628,629,3,210,105,0,629,630,5,212,0,0,630,631,5,255,0,0,631,632,
        3,210,105,0,632,1100,1,0,0,0,633,634,5,23,0,0,634,635,5,156,0,0,
        635,636,5,284,0,0,636,637,3,210,105,0,637,638,5,237,0,0,638,639,
        5,205,0,0,639,640,3,24,12,0,640,1100,1,0,0,0,641,642,5,78,0,0,642,
        645,5,284,0,0,643,644,5,112,0,0,644,646,5,88,0,0,645,643,1,0,0,0,
        645,646,1,0,0,0,646,647,1,0,0,0,647,1100,3,210,105,0,648,649,5,23,
        0,0,649,650,5,284,0,0,650,651,3,210,105,0,651,652,5,212,0,0,652,
        653,5,255,0,0,653,654,3,210,105,0,654,1100,1,0,0,0,655,656,5,23,
        0,0,656,657,5,284,0,0,657,658,3,210,105,0,658,659,5,237,0,0,659,
        660,5,31,0,0,660,661,3,218,109,0,661,1100,1,0,0,0,662,663,5,36,0,
        0,663,664,3,210,105,0,664,673,5,2,0,0,665,670,3,202,101,0,666,667,
        5,4,0,0,667,669,3,202,101,0,668,666,1,0,0,0,669,672,1,0,0,0,670,
        668,1,0,0,0,670,671,1,0,0,0,671,674,1,0,0,0,672,670,1,0,0,0,673,
        665,1,0,0,0,673,674,1,0,0,0,674,675,1,0,0,0,675,676,5,3,0,0,676,
        1100,1,0,0,0,677,678,5,51,0,0,678,679,5,221,0,0,679,683,3,222,111,
        0,680,681,5,288,0,0,681,682,5,20,0,0,682,684,3,216,108,0,683,680,
        1,0,0,0,683,684,1,0,0,0,684,687,1,0,0,0,685,686,5,115,0,0,686,688,
        3,222,111,0,687,685,1,0,0,0,687,688,1,0,0,0,688,1100,1,0,0,0,689,
        690,5,78,0,0,690,691,5,221,0,0,691,694,3,222,111,0,692,693,5,115,
        0,0,693,695,3,222,111,0,694,692,1,0,0,0,694,695,1,0,0,0,695,1100,
        1,0,0,0,696,697,5,103,0,0,697,698,3,220,110,0,698,699,5,255,0,0,
        699,704,3,218,109,0,700,701,5,4,0,0,701,703,3,218,109,0,702,700,
        1,0,0,0,703,706,1,0,0,0,704,702,1,0,0,0,704,705,1,0,0,0,705,710,
        1,0,0,0,706,704,1,0,0,0,707,708,5,288,0,0,708,709,5,20,0,0,709,711,
        5,182,0,0,710,707,1,0,0,0,710,711,1,0,0,0,711,715,1,0,0,0,712,713,
        5,104,0,0,713,714,5,35,0,0,714,716,3,216,108,0,715,712,1,0,0,0,715,
        716,1,0,0,0,716,719,1,0,0,0,717,718,5,115,0,0,718,720,3,222,111,
        0,719,717,1,0,0,0,719,720,1,0,0,0,720,1100,1,0,0,0,721,725,5,219,
        0,0,722,723,5,20,0,0,723,724,5,182,0,0,724,726,5,97,0,0,725,722,
        1,0,0,0,725,726,1,0,0,0,726,727,1,0,0,0,727,728,3,220,110,0,728,
        729,5,99,0,0,729,734,3,218,109,0,730,731,5,4,0,0,731,733,3,218,109,
        0,732,730,1,0,0,0,733,736,1,0,0,0,734,732,1,0,0,0,734,735,1,0,0,
        0,735,740,1,0,0,0,736,734,1,0,0,0,737,738,5,104,0,0,738,739,5,35,
        0,0,739,741,3,216,108,0,740,737,1,0,0,0,740,741,1,0,0,0,741,744,
        1,0,0,0,742,743,5,115,0,0,743,745,3,222,111,0,744,742,1,0,0,0,744,
        745,1,0,0,0,745,1100,1,0,0,0,746,747,5,237,0,0,747,751,5,221,0,0,
        748,752,5,22,0,0,749,752,5,169,0,0,750,752,3,222,111,0,751,748,1,
        0,0,0,751,749,1,0,0,0,751,750,1,0,0,0,752,755,1,0,0,0,753,754,5,
        115,0,0,754,756,3,222,111,0,755,753,1,0,0,0,755,756,1,0,0,0,756,
        1100,1,0,0,0,757,768,5,103,0,0,758,763,3,208,104,0,759,760,5,4,0,
        0,760,762,3,208,104,0,761,759,1,0,0,0,762,765,1,0,0,0,763,761,1,
        0,0,0,763,764,1,0,0,0,764,769,1,0,0,0,765,763,1,0,0,0,766,767,5,
        22,0,0,767,769,5,204,0,0,768,758,1,0,0,0,768,766,1,0,0,0,769,770,
        1,0,0,0,770,772,5,179,0,0,771,773,7,2,0,0,772,771,1,0,0,0,772,773,
        1,0,0,0,773,774,1,0,0,0,774,775,3,210,105,0,775,776,5,255,0,0,776,
        780,3,218,109,0,777,778,5,288,0,0,778,779,5,103,0,0,779,781,5,182,
        0,0,780,777,1,0,0,0,780,781,1,0,0,0,781,1100,1,0,0,0,782,793,5,71,
        0,0,783,788,3,208,104,0,784,785,5,4,0,0,785,787,3,208,104,0,786,
        784,1,0,0,0,787,790,1,0,0,0,788,786,1,0,0,0,788,789,1,0,0,0,789,
        794,1,0,0,0,790,788,1,0,0,0,791,792,5,22,0,0,792,794,5,204,0,0,793,
        783,1,0,0,0,793,791,1,0,0,0,794,795,1,0,0,0,795,797,5,179,0,0,796,
        798,7,2,0,0,797,796,1,0,0,0,797,798,1,0,0,0,798,799,1,0,0,0,799,
        800,3,210,105,0,800,801,5,255,0,0,801,802,3,218,109,0,802,1100,1,
        0,0,0,803,807,5,219,0,0,804,805,5,103,0,0,805,806,5,182,0,0,806,
        808,5,97,0,0,807,804,1,0,0,0,807,808,1,0,0,0,808,819,1,0,0,0,809,
        814,3,208,104,0,810,811,5,4,0,0,811,813,3,208,104,0,812,810,1,0,
        0,0,813,816,1,0,0,0,814,812,1,0,0,0,814,815,1,0,0,0,815,820,1,0,
        0,0,816,814,1,0,0,0,817,818,5,22,0,0,818,820,5,204,0,0,819,809,1,
        0,0,0,819,817,1,0,0,0,820,821,1,0,0,0,821,823,5,179,0,0,822,824,
        7,2,0,0,823,822,1,0,0,0,823,824,1,0,0,0,824,825,1,0,0,0,825,826,
        3,210,105,0,826,827,5,99,0,0,827,828,3,218,109,0,828,1100,1,0,0,
        0,829,830,5,239,0,0,830,836,5,105,0,0,831,833,5,179,0,0,832,834,
        5,246,0,0,833,832,1,0,0,0,833,834,1,0,0,0,834,835,1,0,0,0,835,837,
        3,210,105,0,836,831,1,0,0,0,836,837,1,0,0,0,837,1100,1,0,0,0,838,
        850,5,89,0,0,839,840,5,2,0,0,840,845,3,196,98,0,841,842,5,4,0,0,
        842,844,3,196,98,0,843,841,1,0,0,0,844,847,1,0,0,0,845,843,1,0,0,
        0,845,846,1,0,0,0,846,848,1,0,0,0,847,845,1,0,0,0,848,849,5,3,0,
        0,849,851,1,0,0,0,850,839,1,0,0,0,850,851,1,0,0,0,851,852,1,0,0,
        0,852,1100,3,10,5,0,853,854,5,89,0,0,854,856,5,24,0,0,855,857,5,
        282,0,0,856,855,1,0,0,0,856,857,1,0,0,0,857,858,1,0,0,0,858,1100,
        3,10,5,0,859,860,5,239,0,0,860,861,5,51,0,0,861,862,5,246,0,0,862,
        1100,3,210,105,0,863,864,5,239,0,0,864,865,5,51,0,0,865,866,5,229,
        0,0,866,1100,3,210,105,0,867,868,5,239,0,0,868,869,5,51,0,0,869,
        870,5,284,0,0,870,1100,3,210,105,0,871,872,5,239,0,0,872,873,5,51,
        0,0,873,874,5,156,0,0,874,875,5,284,0,0,875,1100,3,210,105,0,876,
        877,5,239,0,0,877,880,5,247,0,0,878,879,7,3,0,0,879,881,3,210,105,
        0,880,878,1,0,0,0,880,881,1,0,0,0,881,888,1,0,0,0,882,883,5,144,
        0,0,883,886,3,152,76,0,884,885,5,84,0,0,885,887,3,152,76,0,886,884,
        1,0,0,0,886,887,1,0,0,0,887,889,1,0,0,0,888,882,1,0,0,0,888,889,
        1,0,0,0,889,1100,1,0,0,0,890,891,5,239,0,0,891,894,5,230,0,0,892,
        893,7,3,0,0,893,895,3,222,111,0,894,892,1,0,0,0,894,895,1,0,0,0,
        895,902,1,0,0,0,896,897,5,144,0,0,897,900,3,152,76,0,898,899,5,84,
        0,0,899,901,3,152,76,0,900,898,1,0,0,0,900,901,1,0,0,0,901,903,1,
        0,0,0,902,896,1,0,0,0,902,903,1,0,0,0,903,1100,1,0,0,0,904,905,5,
        239,0,0,905,912,5,41,0,0,906,907,5,144,0,0,907,910,3,152,76,0,908,
        909,5,84,0,0,909,911,3,152,76,0,910,908,1,0,0,0,910,911,1,0,0,0,
        911,913,1,0,0,0,912,906,1,0,0,0,912,913,1,0,0,0,913,1100,1,0,0,0,
        914,915,5,239,0,0,915,916,5,43,0,0,916,918,7,3,0,0,917,919,3,210,
        105,0,918,917,1,0,0,0,918,919,1,0,0,0,919,926,1,0,0,0,920,921,5,
        144,0,0,921,924,3,152,76,0,922,923,5,84,0,0,923,925,3,152,76,0,924,
        922,1,0,0,0,924,925,1,0,0,0,925,927,1,0,0,0,926,920,1,0,0,0,926,
        927,1,0,0,0,927,1100,1,0,0,0,928,929,5,239,0,0,929,930,5,242,0,0,
        930,931,5,97,0,0,931,1100,3,210,105,0,932,933,5,239,0,0,933,934,
        5,242,0,0,934,935,5,97,0,0,935,936,5,2,0,0,936,937,3,12,6,0,937,
        938,5,3,0,0,938,1100,1,0,0,0,939,941,5,239,0,0,940,942,5,54,0,0,
        941,940,1,0,0,0,941,942,1,0,0,0,942,943,1,0,0,0,943,946,5,222,0,
        0,944,945,7,3,0,0,945,947,3,222,111,0,946,944,1,0,0,0,946,947,1,
        0,0,0,947,1100,1,0,0,0,948,949,5,239,0,0,949,950,5,221,0,0,950,953,
        5,105,0,0,951,952,7,3,0,0,952,954,3,222,111,0,953,951,1,0,0,0,953,
        954,1,0,0,0,954,1100,1,0,0,0,955,956,5,73,0,0,956,1100,3,210,105,
        0,957,958,5,72,0,0,958,1100,3,210,105,0,959,960,5,239,0,0,960,967,
        5,101,0,0,961,962,5,144,0,0,962,965,3,152,76,0,963,964,5,84,0,0,
        964,966,3,152,76,0,965,963,1,0,0,0,965,966,1,0,0,0,966,968,1,0,0,
        0,967,961,1,0,0,0,967,968,1,0,0,0,968,1100,1,0,0,0,969,970,5,239,
        0,0,970,977,5,236,0,0,971,972,5,144,0,0,972,975,3,152,76,0,973,974,
        5,84,0,0,974,976,3,152,76,0,975,973,1,0,0,0,975,976,1,0,0,0,976,
        978,1,0,0,0,977,971,1,0,0,0,977,978,1,0,0,0,978,1100,1,0,0,0,979,
        980,5,237,0,0,980,981,5,236,0,0,981,982,5,31,0,0,982,1100,3,226,
        113,0,983,984,5,215,0,0,984,985,5,236,0,0,985,1100,5,31,0,0,986,
        987,5,237,0,0,987,988,5,236,0,0,988,989,3,210,105,0,989,990,5,296,
        0,0,990,991,3,120,60,0,991,1100,1,0,0,0,992,993,5,215,0,0,993,994,
        5,236,0,0,994,1100,3,210,105,0,995,996,5,241,0,0,996,1005,5,257,
        0,0,997,1002,3,198,99,0,998,999,5,4,0,0,999,1001,3,198,99,0,1000,
        998,1,0,0,0,1001,1004,1,0,0,0,1002,1000,1,0,0,0,1002,1003,1,0,0,
        0,1003,1006,1,0,0,0,1004,1002,1,0,0,0,1005,997,1,0,0,0,1005,1006,
        1,0,0,0,1006,1100,1,0,0,0,1007,1009,5,45,0,0,1008,1010,5,291,0,0,
        1009,1008,1,0,0,0,1009,1010,1,0,0,0,1010,1100,1,0,0,0,1011,1013,
        5,223,0,0,1012,1014,5,291,0,0,1013,1012,1,0,0,0,1013,1014,1,0,0,
        0,1014,1100,1,0,0,0,1015,1016,5,203,0,0,1016,1017,3,222,111,0,1017,
        1018,5,99,0,0,1018,1019,3,10,5,0,1019,1100,1,0,0,0,1020,1021,5,66,
        0,0,1021,1022,5,203,0,0,1022,1100,3,222,111,0,1023,1024,5,87,0,0,
        1024,1034,3,222,111,0,1025,1026,5,275,0,0,1026,1031,3,120,60,0,1027,
        1028,5,4,0,0,1028,1030,3,120,60,0,1029,1027,1,0,0,0,1030,1033,1,
        0,0,0,1031,1029,1,0,0,0,1031,1032,1,0,0,0,1032,1035,1,0,0,0,1033,
        1031,1,0,0,0,1034,1025,1,0,0,0,1034,1035,1,0,0,0,1035,1100,1,0,0,
        0,1036,1037,5,87,0,0,1037,1038,5,114,0,0,1038,1048,3,152,76,0,1039,
        1040,5,275,0,0,1040,1045,3,120,60,0,1041,1042,5,4,0,0,1042,1044,
        3,120,60,0,1043,1041,1,0,0,0,1044,1047,1,0,0,0,1045,1043,1,0,0,0,
        1045,1046,1,0,0,0,1046,1049,1,0,0,0,1047,1045,1,0,0,0,1048,1039,
        1,0,0,0,1048,1049,1,0,0,0,1049,1100,1,0,0,0,1050,1051,5,73,0,0,1051,
        1052,5,119,0,0,1052,1100,3,222,111,0,1053,1054,5,73,0,0,1054,1055,
        5,187,0,0,1055,1100,3,222,111,0,1056,1057,5,237,0,0,1057,1058,5,
        194,0,0,1058,1100,3,206,103,0,1059,1060,5,237,0,0,1060,1061,5,253,
        0,0,1061,1064,5,295,0,0,1062,1065,5,147,0,0,1063,1065,3,120,60,0,
        1064,1062,1,0,0,0,1064,1063,1,0,0,0,1065,1100,1,0,0,0,1066,1067,
        5,272,0,0,1067,1068,3,210,105,0,1068,1069,5,237,0,0,1069,1074,3,
        194,97,0,1070,1071,5,4,0,0,1071,1073,3,194,97,0,1072,1070,1,0,0,
        0,1073,1076,1,0,0,0,1074,1072,1,0,0,0,1074,1075,1,0,0,0,1075,1079,
        1,0,0,0,1076,1074,1,0,0,0,1077,1078,5,286,0,0,1078,1080,3,122,61,
        0,1079,1077,1,0,0,0,1079,1080,1,0,0,0,1080,1100,1,0,0,0,1081,1082,
        5,158,0,0,1082,1083,5,123,0,0,1083,1088,3,210,105,0,1084,1086,5,
        28,0,0,1085,1084,1,0,0,0,1085,1086,1,0,0,0,1086,1087,1,0,0,0,1087,
        1089,3,222,111,0,1088,1085,1,0,0,0,1088,1089,1,0,0,0,1089,1090,1,
        0,0,0,1090,1091,5,275,0,0,1091,1092,3,60,30,0,1092,1093,5,179,0,
        0,1093,1095,3,120,60,0,1094,1096,3,178,89,0,1095,1094,1,0,0,0,1096,
        1097,1,0,0,0,1097,1095,1,0,0,0,1097,1098,1,0,0,0,1098,1100,1,0,0,
        0,1099,245,1,0,0,0,1099,246,1,0,0,0,1099,248,1,0,0,0,1099,253,1,
        0,0,0,1099,275,1,0,0,0,1099,285,1,0,0,0,1099,301,1,0,0,0,1099,311,
        1,0,0,0,1099,318,1,0,0,0,1099,325,1,0,0,0,1099,363,1,0,0,0,1099,
        393,1,0,0,0,1099,400,1,0,0,0,1099,408,1,0,0,0,1099,415,1,0,0,0,1099,
        418,1,0,0,0,1099,427,1,0,0,0,1099,436,1,0,0,0,1099,445,1,0,0,0,1099,
        456,1,0,0,0,1099,472,1,0,0,0,1099,489,1,0,0,0,1099,504,1,0,0,0,1099,
        519,1,0,0,0,1099,526,1,0,0,0,1099,533,1,0,0,0,1099,556,1,0,0,0,1099,
        562,1,0,0,0,1099,591,1,0,0,0,1099,609,1,0,0,0,1099,613,1,0,0,0,1099,
        621,1,0,0,0,1099,633,1,0,0,0,1099,641,1,0,0,0,1099,648,1,0,0,0,1099,
        655,1,0,0,0,1099,662,1,0,0,0,1099,677,1,0,0,0,1099,689,1,0,0,0,1099,
        696,1,0,0,0,1099,721,1,0,0,0,1099,746,1,0,0,0,1099,757,1,0,0,0,1099,
        782,1,0,0,0,1099,803,1,0,0,0,1099,829,1,0,0,0,1099,838,1,0,0,0,1099,
        853,1,0,0,0,1099,859,1,0,0,0,1099,863,1,0,0,0,1099,867,1,0,0,0,1099,
        871,1,0,0,0,1099,876,1,0,0,0,1099,890,1,0,0,0,1099,904,1,0,0,0,1099,
        914,1,0,0,0,1099,928,1,0,0,0,1099,932,1,0,0,0,1099,939,1,0,0,0,1099,
        948,1,0,0,0,1099,955,1,0,0,0,1099,957,1,0,0,0,1099,959,1,0,0,0,1099,
        969,1,0,0,0,1099,979,1,0,0,0,1099,983,1,0,0,0,1099,986,1,0,0,0,1099,
        992,1,0,0,0,1099,995,1,0,0,0,1099,1007,1,0,0,0,1099,1011,1,0,0,0,
        1099,1015,1,0,0,0,1099,1020,1,0,0,0,1099,1023,1,0,0,0,1099,1036,
        1,0,0,0,1099,1050,1,0,0,0,1099,1053,1,0,0,0,1099,1056,1,0,0,0,1099,
        1059,1,0,0,0,1099,1066,1,0,0,0,1099,1081,1,0,0,0,1100,11,1,0,0,0,
        1101,1103,3,14,7,0,1102,1101,1,0,0,0,1102,1103,1,0,0,0,1103,1104,
        1,0,0,0,1104,1105,3,30,15,0,1105,13,1,0,0,0,1106,1108,5,288,0,0,
        1107,1109,5,210,0,0,1108,1107,1,0,0,0,1108,1109,1,0,0,0,1109,1110,
        1,0,0,0,1110,1115,3,54,27,0,1111,1112,5,4,0,0,1112,1114,3,54,27,
        0,1113,1111,1,0,0,0,1114,1117,1,0,0,0,1115,1113,1,0,0,0,1115,1116,
        1,0,0,0,1116,15,1,0,0,0,1117,1115,1,0,0,0,1118,1121,3,18,9,0,1119,
        1121,3,20,10,0,1120,1118,1,0,0,0,1120,1119,1,0,0,0,1121,17,1,0,0,
        0,1122,1123,3,210,105,0,1123,1126,3,168,84,0,1124,1125,5,171,0,0,
        1125,1127,5,172,0,0,1126,1124,1,0,0,0,1126,1127,1,0,0,0,1127,1130,
        1,0,0,0,1128,1129,5,44,0,0,1129,1131,3,152,76,0,1130,1128,1,0,0,
        0,1130,1131,1,0,0,0,1131,1134,1,0,0,0,1132,1133,5,288,0,0,1133,1135,
        3,22,11,0,1134,1132,1,0,0,0,1134,1135,1,0,0,0,1135,19,1,0,0,0,1136,
        1137,5,144,0,0,1137,1140,3,210,105,0,1138,1139,7,4,0,0,1139,1141,
        5,205,0,0,1140,1138,1,0,0,0,1140,1141,1,0,0,0,1141,21,1,0,0,0,1142,
        1143,5,2,0,0,1143,1144,3,24,12,0,1144,1145,5,3,0,0,1145,23,1,0,0,
        0,1146,1151,3,26,13,0,1147,1148,5,4,0,0,1148,1150,3,26,13,0,1149,
        1147,1,0,0,0,1150,1153,1,0,0,0,1151,1149,1,0,0,0,1151,1152,1,0,0,
        0,1152,25,1,0,0,0,1153,1151,1,0,0,0,1154,1155,3,222,111,0,1155,1156,
        5,296,0,0,1156,1157,3,28,14,0,1157,27,1,0,0,0,1158,1161,5,67,0,0,
        1159,1161,3,120,60,0,1160,1158,1,0,0,0,1160,1159,1,0,0,0,1161,29,
        1,0,0,0,1162,1173,3,36,18,0,1163,1164,5,184,0,0,1164,1165,5,35,0,
        0,1165,1170,3,40,20,0,1166,1167,5,4,0,0,1167,1169,3,40,20,0,1168,
        1166,1,0,0,0,1169,1172,1,0,0,0,1170,1168,1,0,0,0,1170,1171,1,0,0,
        0,1171,1174,1,0,0,0,1172,1170,1,0,0,0,1173,1163,1,0,0,0,1173,1174,
        1,0,0,0,1174,1180,1,0,0,0,1175,1176,5,177,0,0,1176,1178,3,34,17,
        0,1177,1179,7,5,0,0,1178,1177,1,0,0,0,1178,1179,1,0,0,0,1179,1181,
        1,0,0,0,1180,1175,1,0,0,0,1180,1181,1,0,0,0,1181,1195,1,0,0,0,1182,
        1183,5,145,0,0,1183,1196,3,32,16,0,1184,1185,5,92,0,0,1185,1187,
        7,6,0,0,1186,1188,3,34,17,0,1187,1186,1,0,0,0,1187,1188,1,0,0,0,
        1188,1189,1,0,0,0,1189,1193,7,5,0,0,1190,1194,5,181,0,0,1191,1192,
        5,288,0,0,1192,1194,5,252,0,0,1193,1190,1,0,0,0,1193,1191,1,0,0,
        0,1194,1196,1,0,0,0,1195,1182,1,0,0,0,1195,1184,1,0,0,0,1195,1196,
        1,0,0,0,1196,31,1,0,0,0,1197,1200,5,22,0,0,1198,1200,3,34,17,0,1199,
        1197,1,0,0,0,1199,1198,1,0,0,0,1200,33,1,0,0,0,1201,1202,7,7,0,0,
        1202,35,1,0,0,0,1203,1204,6,18,-1,0,1204,1205,3,38,19,0,1205,1220,
        1,0,0,0,1206,1207,10,2,0,0,1207,1209,5,121,0,0,1208,1210,3,56,28,
        0,1209,1208,1,0,0,0,1209,1210,1,0,0,0,1210,1211,1,0,0,0,1211,1219,
        3,36,18,3,1212,1213,10,1,0,0,1213,1215,7,8,0,0,1214,1216,3,56,28,
        0,1215,1214,1,0,0,0,1215,1216,1,0,0,0,1216,1217,1,0,0,0,1217,1219,
        3,36,18,2,1218,1206,1,0,0,0,1218,1212,1,0,0,0,1219,1222,1,0,0,0,
        1220,1218,1,0,0,0,1220,1221,1,0,0,0,1221,37,1,0,0,0,1222,1220,1,
        0,0,0,1223,1240,3,42,21,0,1224,1225,5,246,0,0,1225,1240,3,210,105,
        0,1226,1227,5,281,0,0,1227,1232,3,120,60,0,1228,1229,5,4,0,0,1229,
        1231,3,120,60,0,1230,1228,1,0,0,0,1231,1234,1,0,0,0,1232,1230,1,
        0,0,0,1232,1233,1,0,0,0,1233,1240,1,0,0,0,1234,1232,1,0,0,0,1235,
        1236,5,2,0,0,1236,1237,3,30,15,0,1237,1238,5,3,0,0,1238,1240,1,0,
        0,0,1239,1223,1,0,0,0,1239,1224,1,0,0,0,1239,1226,1,0,0,0,1239,1235,
        1,0,0,0,1240,39,1,0,0,0,1241,1243,3,120,60,0,1242,1244,7,9,0,0,1243,
        1242,1,0,0,0,1243,1244,1,0,0,0,1244,1247,1,0,0,0,1245,1246,5,174,
        0,0,1246,1248,7,10,0,0,1247,1245,1,0,0,0,1247,1248,1,0,0,0,1248,
        41,1,0,0,0,1249,1251,5,234,0,0,1250,1252,3,56,28,0,1251,1250,1,0,
        0,0,1251,1252,1,0,0,0,1252,1253,1,0,0,0,1253,1258,3,58,29,0,1254,
        1255,5,4,0,0,1255,1257,3,58,29,0,1256,1254,1,0,0,0,1257,1260,1,0,
        0,0,1258,1256,1,0,0,0,1258,1259,1,0,0,0,1259,1270,1,0,0,0,1260,1258,
        1,0,0,0,1261,1262,5,99,0,0,1262,1267,3,60,30,0,1263,1264,5,4,0,0,
        1264,1266,3,60,30,0,1265,1263,1,0,0,0,1266,1269,1,0,0,0,1267,1265,
        1,0,0,0,1267,1268,1,0,0,0,1268,1271,1,0,0,0,1269,1267,1,0,0,0,1270,
        1261,1,0,0,0,1270,1271,1,0,0,0,1271,1274,1,0,0,0,1272,1273,5,286,
        0,0,1273,1275,3,122,61,0,1274,1272,1,0,0,0,1274,1275,1,0,0,0,1275,
        1279,1,0,0,0,1276,1277,5,107,0,0,1277,1278,5,35,0,0,1278,1280,3,
        44,22,0,1279,1276,1,0,0,0,1279,1280,1,0,0,0,1280,1283,1,0,0,0,1281,
        1282,5,110,0,0,1282,1284,3,122,61,0,1283,1281,1,0,0,0,1283,1284,
        1,0,0,0,1284,1294,1,0,0,0,1285,1286,5,287,0,0,1286,1291,3,50,25,
        0,1287,1288,5,4,0,0,1288,1290,3,50,25,0,1289,1287,1,0,0,0,1290,1293,
        1,0,0,0,1291,1289,1,0,0,0,1291,1292,1,0,0,0,1292,1295,1,0,0,0,1293,
        1291,1,0,0,0,1294,1285,1,0,0,0,1294,1295,1,0,0,0,1295,43,1,0,0,0,
        1296,1298,3,56,28,0,1297,1296,1,0,0,0,1297,1298,1,0,0,0,1298,1299,
        1,0,0,0,1299,1304,3,46,23,0,1300,1301,5,4,0,0,1301,1303,3,46,23,
        0,1302,1300,1,0,0,0,1303,1306,1,0,0,0,1304,1302,1,0,0,0,1304,1305,
        1,0,0,0,1305,45,1,0,0,0,1306,1304,1,0,0,0,1307,1348,3,48,24,0,1308,
        1309,5,224,0,0,1309,1318,5,2,0,0,1310,1315,3,48,24,0,1311,1312,5,
        4,0,0,1312,1314,3,48,24,0,1313,1311,1,0,0,0,1314,1317,1,0,0,0,1315,
        1313,1,0,0,0,1315,1316,1,0,0,0,1316,1319,1,0,0,0,1317,1315,1,0,0,
        0,1318,1310,1,0,0,0,1318,1319,1,0,0,0,1319,1320,1,0,0,0,1320,1348,
        5,3,0,0,1321,1322,5,53,0,0,1322,1331,5,2,0,0,1323,1328,3,48,24,0,
        1324,1325,5,4,0,0,1325,1327,3,48,24,0,1326,1324,1,0,0,0,1327,1330,
        1,0,0,0,1328,1326,1,0,0,0,1328,1329,1,0,0,0,1329,1332,1,0,0,0,1330,
        1328,1,0,0,0,1331,1323,1,0,0,0,1331,1332,1,0,0,0,1332,1333,1,0,0,
        0,1333,1348,5,3,0,0,1334,1335,5,108,0,0,1335,1336,5,238,0,0,1336,
        1337,5,2,0,0,1337,1342,3,48,24,0,1338,1339,5,4,0,0,1339,1341,3,48,
        24,0,1340,1338,1,0,0,0,1341,1344,1,0,0,0,1342,1340,1,0,0,0,1342,
        1343,1,0,0,0,1343,1345,1,0,0,0,1344,1342,1,0,0,0,1345,1346,5,3,0,
        0,1346,1348,1,0,0,0,1347,1307,1,0,0,0,1347,1308,1,0,0,0,1347,1321,
        1,0,0,0,1347,1334,1,0,0,0,1348,47,1,0,0,0,1349,1358,5,2,0,0,1350,
        1355,3,120,60,0,1351,1352,5,4,0,0,1352,1354,3,120,60,0,1353,1351,
        1,0,0,0,1354,1357,1,0,0,0,1355,1353,1,0,0,0,1355,1356,1,0,0,0,1356,
        1359,1,0,0,0,1357,1355,1,0,0,0,1358,1350,1,0,0,0,1358,1359,1,0,0,
        0,1359,1360,1,0,0,0,1360,1363,5,3,0,0,1361,1363,3,120,60,0,1362,
        1349,1,0,0,0,1362,1361,1,0,0,0,1363,49,1,0,0,0,1364,1365,3,222,111,
        0,1365,1366,5,28,0,0,1366,1367,5,2,0,0,1367,1368,3,52,26,0,1368,
        1369,5,3,0,0,1369,51,1,0,0,0,1370,1372,3,222,111,0,1371,1370,1,0,
        0,0,1371,1372,1,0,0,0,1372,1383,1,0,0,0,1373,1374,5,190,0,0,1374,
        1375,5,35,0,0,1375,1380,3,120,60,0,1376,1377,5,4,0,0,1377,1379,3,
        120,60,0,1378,1376,1,0,0,0,1379,1382,1,0,0,0,1380,1378,1,0,0,0,1380,
        1381,1,0,0,0,1381,1384,1,0,0,0,1382,1380,1,0,0,0,1383,1373,1,0,0,
        0,1383,1384,1,0,0,0,1384,1395,1,0,0,0,1385,1386,5,184,0,0,1386,1387,
        5,35,0,0,1387,1392,3,40,20,0,1388,1389,5,4,0,0,1389,1391,3,40,20,
        0,1390,1388,1,0,0,0,1391,1394,1,0,0,0,1392,1390,1,0,0,0,1392,1393,
        1,0,0,0,1393,1396,1,0,0,0,1394,1392,1,0,0,0,1395,1385,1,0,0,0,1395,
        1396,1,0,0,0,1396,1398,1,0,0,0,1397,1399,3,182,91,0,1398,1397,1,
        0,0,0,1398,1399,1,0,0,0,1399,53,1,0,0,0,1400,1402,3,222,111,0,1401,
        1403,3,92,46,0,1402,1401,1,0,0,0,1402,1403,1,0,0,0,1403,1404,1,0,
        0,0,1404,1405,5,28,0,0,1405,1406,5,2,0,0,1406,1407,3,12,6,0,1407,
        1408,5,3,0,0,1408,55,1,0,0,0,1409,1410,7,11,0,0,1410,57,1,0,0,0,
        1411,1416,3,120,60,0,1412,1414,5,28,0,0,1413,1412,1,0,0,0,1413,1414,
        1,0,0,0,1414,1415,1,0,0,0,1415,1417,3,222,111,0,1416,1413,1,0,0,
        0,1416,1417,1,0,0,0,1417,1427,1,0,0,0,1418,1419,3,128,64,0,1419,
        1420,5,1,0,0,1420,1423,5,304,0,0,1421,1422,5,28,0,0,1422,1424,3,
        92,46,0,1423,1421,1,0,0,0,1423,1424,1,0,0,0,1424,1427,1,0,0,0,1425,
        1427,5,304,0,0,1426,1411,1,0,0,0,1426,1418,1,0,0,0,1426,1425,1,0,
        0,0,1427,59,1,0,0,0,1428,1429,6,30,-1,0,1429,1430,3,66,33,0,1430,
        1449,1,0,0,0,1431,1445,10,2,0,0,1432,1433,5,52,0,0,1433,1434,5,128,
        0,0,1434,1446,3,66,33,0,1435,1436,3,62,31,0,1436,1437,5,128,0,0,
        1437,1438,3,60,30,0,1438,1439,3,64,32,0,1439,1446,1,0,0,0,1440,1441,
        5,161,0,0,1441,1442,3,62,31,0,1442,1443,5,128,0,0,1443,1444,3,66,
        33,0,1444,1446,1,0,0,0,1445,1432,1,0,0,0,1445,1435,1,0,0,0,1445,
        1440,1,0,0,0,1446,1448,1,0,0,0,1447,1431,1,0,0,0,1448,1451,1,0,0,
        0,1449,1447,1,0,0,0,1449,1450,1,0,0,0,1450,61,1,0,0,0,1451,1449,
        1,0,0,0,1452,1454,5,118,0,0,1453,1452,1,0,0,0,1453,1454,1,0,0,0,
        1454,1468,1,0,0,0,1455,1457,5,142,0,0,1456,1458,5,186,0,0,1457,1456,
        1,0,0,0,1457,1458,1,0,0,0,1458,1468,1,0,0,0,1459,1461,5,220,0,0,
        1460,1462,5,186,0,0,1461,1460,1,0,0,0,1461,1462,1,0,0,0,1462,1468,
        1,0,0,0,1463,1465,5,100,0,0,1464,1466,5,186,0,0,1465,1464,1,0,0,
        0,1465,1466,1,0,0,0,1466,1468,1,0,0,0,1467,1453,1,0,0,0,1467,1455,
        1,0,0,0,1467,1459,1,0,0,0,1467,1463,1,0,0,0,1468,63,1,0,0,0,1469,
        1470,5,179,0,0,1470,1484,3,122,61,0,1471,1472,5,275,0,0,1472,1473,
        5,2,0,0,1473,1478,3,222,111,0,1474,1475,5,4,0,0,1475,1477,3,222,
        111,0,1476,1474,1,0,0,0,1477,1480,1,0,0,0,1478,1476,1,0,0,0,1478,
        1479,1,0,0,0,1479,1481,1,0,0,0,1480,1478,1,0,0,0,1481,1482,5,3,0,
        0,1482,1484,1,0,0,0,1483,1469,1,0,0,0,1483,1471,1,0,0,0,1484,65,
        1,0,0,0,1485,1492,3,76,38,0,1486,1487,5,248,0,0,1487,1488,3,68,34,
        0,1488,1489,5,2,0,0,1489,1490,3,120,60,0,1490,1491,5,3,0,0,1491,
        1493,1,0,0,0,1492,1486,1,0,0,0,1492,1493,1,0,0,0,1493,67,1,0,0,0,
        1494,1495,7,12,0,0,1495,69,1,0,0,0,1496,1497,7,13,0,0,1497,71,1,
        0,0,0,1498,1505,5,83,0,0,1499,1501,5,260,0,0,1500,1502,3,152,76,
        0,1501,1500,1,0,0,0,1501,1502,1,0,0,0,1502,1503,1,0,0,0,1503,1505,
        3,74,37,0,1504,1498,1,0,0,0,1504,1499,1,0,0,0,1505,73,1,0,0,0,1506,
        1507,5,288,0,0,1507,1511,5,49,0,0,1508,1509,5,290,0,0,1509,1511,
        5,49,0,0,1510,1506,1,0,0,0,1510,1508,1,0,0,0,1511,75,1,0,0,0,1512,
        1595,3,90,45,0,1513,1514,5,155,0,0,1514,1525,5,2,0,0,1515,1516,5,
        190,0,0,1516,1517,5,35,0,0,1517,1522,3,120,60,0,1518,1519,5,4,0,
        0,1519,1521,3,120,60,0,1520,1518,1,0,0,0,1521,1524,1,0,0,0,1522,
        1520,1,0,0,0,1522,1523,1,0,0,0,1523,1526,1,0,0,0,1524,1522,1,0,0,
        0,1525,1515,1,0,0,0,1525,1526,1,0,0,0,1526,1537,1,0,0,0,1527,1528,
        5,184,0,0,1528,1529,5,35,0,0,1529,1534,3,40,20,0,1530,1531,5,4,0,
        0,1531,1533,3,40,20,0,1532,1530,1,0,0,0,1533,1536,1,0,0,0,1534,1532,
        1,0,0,0,1534,1535,1,0,0,0,1535,1538,1,0,0,0,1536,1534,1,0,0,0,1537,
        1527,1,0,0,0,1537,1538,1,0,0,0,1538,1548,1,0,0,0,1539,1540,5,157,
        0,0,1540,1545,3,78,39,0,1541,1542,5,4,0,0,1542,1544,3,78,39,0,1543,
        1541,1,0,0,0,1544,1547,1,0,0,0,1545,1543,1,0,0,0,1545,1546,1,0,0,
        0,1546,1549,1,0,0,0,1547,1545,1,0,0,0,1548,1539,1,0,0,0,1548,1549,
        1,0,0,0,1549,1551,1,0,0,0,1550,1552,3,80,40,0,1551,1550,1,0,0,0,
        1551,1552,1,0,0,0,1552,1556,1,0,0,0,1553,1554,5,21,0,0,1554,1555,
        5,152,0,0,1555,1557,3,84,42,0,1556,1553,1,0,0,0,1556,1557,1,0,0,
        0,1557,1559,1,0,0,0,1558,1560,7,14,0,0,1559,1558,1,0,0,0,1559,1560,
        1,0,0,0,1560,1561,1,0,0,0,1561,1562,5,195,0,0,1562,1563,5,2,0,0,
        1563,1564,3,188,94,0,1564,1574,5,3,0,0,1565,1566,5,243,0,0,1566,
        1571,3,86,43,0,1567,1568,5,4,0,0,1568,1570,3,86,43,0,1569,1567,1,
        0,0,0,1570,1573,1,0,0,0,1571,1569,1,0,0,0,1571,1572,1,0,0,0,1572,
        1575,1,0,0,0,1573,1571,1,0,0,0,1574,1565,1,0,0,0,1574,1575,1,0,0,
        0,1575,1576,1,0,0,0,1576,1577,5,68,0,0,1577,1582,3,88,44,0,1578,
        1579,5,4,0,0,1579,1581,3,88,44,0,1580,1578,1,0,0,0,1581,1584,1,0,
        0,0,1582,1580,1,0,0,0,1582,1583,1,0,0,0,1583,1585,1,0,0,0,1584,1582,
        1,0,0,0,1585,1593,5,3,0,0,1586,1588,5,28,0,0,1587,1586,1,0,0,0,1587,
        1588,1,0,0,0,1588,1589,1,0,0,0,1589,1591,3,222,111,0,1590,1592,3,
        92,46,0,1591,1590,1,0,0,0,1591,1592,1,0,0,0,1592,1594,1,0,0,0,1593,
        1587,1,0,0,0,1593,1594,1,0,0,0,1594,1596,1,0,0,0,1595,1513,1,0,0,
        0,1595,1596,1,0,0,0,1596,77,1,0,0,0,1597,1598,3,120,60,0,1598,1599,
        5,28,0,0,1599,1600,3,222,111,0,1600,79,1,0,0,0,1601,1602,5,180,0,
        0,1602,1603,5,225,0,0,1603,1604,5,196,0,0,1604,1613,5,152,0,0,1605,
        1606,5,22,0,0,1606,1607,5,226,0,0,1607,1608,5,196,0,0,1608,1610,
        5,152,0,0,1609,1611,3,82,41,0,1610,1609,1,0,0,0,1610,1611,1,0,0,
        0,1611,1613,1,0,0,0,1612,1601,1,0,0,0,1612,1605,1,0,0,0,1613,81,
        1,0,0,0,1614,1615,5,239,0,0,1615,1616,5,80,0,0,1616,1624,5,154,0,
        0,1617,1618,5,178,0,0,1618,1619,5,80,0,0,1619,1624,5,154,0,0,1620,
        1621,5,288,0,0,1621,1622,5,270,0,0,1622,1624,5,226,0,0,1623,1614,
        1,0,0,0,1623,1617,1,0,0,0,1623,1620,1,0,0,0,1624,83,1,0,0,0,1625,
        1626,5,5,0,0,1626,1627,5,255,0,0,1627,1628,5,163,0,0,1628,1645,5,
        225,0,0,1629,1630,5,5,0,0,1630,1631,5,193,0,0,1631,1632,5,139,0,
        0,1632,1645,5,225,0,0,1633,1634,5,5,0,0,1634,1635,5,255,0,0,1635,
        1636,5,95,0,0,1636,1645,3,222,111,0,1637,1638,5,5,0,0,1638,1639,
        5,255,0,0,1639,1640,5,139,0,0,1640,1645,3,222,111,0,1641,1642,5,
        5,0,0,1642,1643,5,255,0,0,1643,1645,3,222,111,0,1644,1625,1,0,0,
        0,1644,1629,1,0,0,0,1644,1633,1,0,0,0,1644,1637,1,0,0,0,1644,1641,
        1,0,0,0,1645,85,1,0,0,0,1646,1647,3,222,111,0,1647,1648,5,296,0,
        0,1648,1649,5,2,0,0,1649,1654,3,222,111,0,1650,1651,5,4,0,0,1651,
        1653,3,222,111,0,1652,1650,1,0,0,0,1653,1656,1,0,0,0,1654,1652,1,
        0,0,0,1654,1655,1,0,0,0,1655,1657,1,0,0,0,1656,1654,1,0,0,0,1657,
        1658,5,3,0,0,1658,87,1,0,0,0,1659,1660,3,222,111,0,1660,1661,5,28,
        0,0,1661,1662,3,120,60,0,1662,89,1,0,0,0,1663,1671,3,94,47,0,1664,
        1666,5,28,0,0,1665,1664,1,0,0,0,1665,1666,1,0,0,0,1666,1667,1,0,
        0,0,1667,1669,3,222,111,0,1668,1670,3,92,46,0,1669,1668,1,0,0,0,
        1669,1670,1,0,0,0,1670,1672,1,0,0,0,1671,1665,1,0,0,0,1671,1672,
        1,0,0,0,1672,91,1,0,0,0,1673,1674,5,2,0,0,1674,1679,3,222,111,0,
        1675,1676,5,4,0,0,1676,1678,3,222,111,0,1677,1675,1,0,0,0,1678,1681,
        1,0,0,0,1679,1677,1,0,0,0,1679,1680,1,0,0,0,1680,1682,1,0,0,0,1681,
        1679,1,0,0,0,1682,1683,5,3,0,0,1683,93,1,0,0,0,1684,1686,3,210,105,
        0,1685,1687,3,212,106,0,1686,1685,1,0,0,0,1686,1687,1,0,0,0,1687,
        1756,1,0,0,0,1688,1689,5,2,0,0,1689,1690,3,12,6,0,1690,1691,5,3,
        0,0,1691,1756,1,0,0,0,1692,1693,5,271,0,0,1693,1694,5,2,0,0,1694,
        1699,3,120,60,0,1695,1696,5,4,0,0,1696,1698,3,120,60,0,1697,1695,
        1,0,0,0,1698,1701,1,0,0,0,1699,1697,1,0,0,0,1699,1700,1,0,0,0,1700,
        1702,1,0,0,0,1701,1699,1,0,0,0,1702,1705,5,3,0,0,1703,1704,5,288,
        0,0,1704,1706,5,185,0,0,1705,1703,1,0,0,0,1705,1706,1,0,0,0,1706,
        1756,1,0,0,0,1707,1708,5,140,0,0,1708,1709,5,2,0,0,1709,1710,3,12,
        6,0,1710,1711,5,3,0,0,1711,1756,1,0,0,0,1712,1713,5,246,0,0,1713,
        1714,5,2,0,0,1714,1715,3,106,53,0,1715,1716,5,3,0,0,1716,1756,1,
        0,0,0,1717,1718,5,2,0,0,1718,1719,3,60,30,0,1719,1720,5,3,0,0,1720,
        1756,1,0,0,0,1721,1722,5,134,0,0,1722,1723,5,2,0,0,1723,1724,3,130,
        65,0,1724,1725,5,43,0,0,1725,1726,5,2,0,0,1726,1731,3,96,48,0,1727,
        1728,5,4,0,0,1728,1730,3,96,48,0,1729,1727,1,0,0,0,1730,1733,1,0,
        0,0,1731,1729,1,0,0,0,1731,1732,1,0,0,0,1732,1734,1,0,0,0,1733,1731,
        1,0,0,0,1734,1746,5,3,0,0,1735,1736,5,199,0,0,1736,1737,5,2,0,0,
        1737,1738,3,98,49,0,1738,1739,5,3,0,0,1739,1747,1,0,0,0,1740,1741,
        5,199,0,0,1741,1742,5,67,0,0,1742,1743,5,2,0,0,1743,1744,3,104,52,
        0,1744,1745,5,3,0,0,1745,1747,1,0,0,0,1746,1735,1,0,0,0,1746,1740,
        1,0,0,0,1746,1747,1,0,0,0,1747,1751,1,0,0,0,1748,1749,7,15,0,0,1749,
        1750,5,179,0,0,1750,1752,5,83,0,0,1751,1748,1,0,0,0,1751,1752,1,
        0,0,0,1752,1753,1,0,0,0,1753,1754,5,3,0,0,1754,1756,1,0,0,0,1755,
        1684,1,0,0,0,1755,1688,1,0,0,0,1755,1692,1,0,0,0,1755,1707,1,0,0,
        0,1755,1712,1,0,0,0,1755,1717,1,0,0,0,1755,1721,1,0,0,0,1756,95,
        1,0,0,0,1757,1758,3,222,111,0,1758,1759,5,97,0,0,1759,1760,5,185,
        0,0,1760,1835,1,0,0,0,1761,1762,3,222,111,0,1762,1765,3,168,84,0,
        1763,1764,5,194,0,0,1764,1766,3,152,76,0,1765,1763,1,0,0,0,1765,
        1766,1,0,0,0,1766,1771,1,0,0,0,1767,1768,3,140,70,0,1768,1769,5,
        179,0,0,1769,1770,5,80,0,0,1770,1772,1,0,0,0,1771,1767,1,0,0,0,1771,
        1772,1,0,0,0,1772,1777,1,0,0,0,1773,1774,3,140,70,0,1774,1775,5,
        179,0,0,1775,1776,5,83,0,0,1776,1778,1,0,0,0,1777,1773,1,0,0,0,1777,
        1778,1,0,0,0,1778,1835,1,0,0,0,1779,1780,3,222,111,0,1780,1781,3,
        168,84,0,1781,1782,5,98,0,0,1782,1785,3,134,67,0,1783,1784,5,194,
        0,0,1784,1786,3,152,76,0,1785,1783,1,0,0,0,1785,1786,1,0,0,0,1786,
        1790,1,0,0,0,1787,1788,3,142,71,0,1788,1789,5,292,0,0,1789,1791,
        1,0,0,0,1790,1787,1,0,0,0,1790,1791,1,0,0,0,1791,1799,1,0,0,0,1792,
        1793,7,16,0,0,1793,1797,5,207,0,0,1794,1795,5,179,0,0,1795,1796,
        5,228,0,0,1796,1798,5,250,0,0,1797,1794,1,0,0,0,1797,1798,1,0,0,
        0,1798,1800,1,0,0,0,1799,1792,1,0,0,0,1799,1800,1,0,0,0,1800,1805,
        1,0,0,0,1801,1802,3,144,72,0,1802,1803,5,179,0,0,1803,1804,5,80,
        0,0,1804,1806,1,0,0,0,1805,1801,1,0,0,0,1805,1806,1,0,0,0,1806,1811,
        1,0,0,0,1807,1808,3,144,72,0,1808,1809,5,179,0,0,1809,1810,5,83,
        0,0,1810,1812,1,0,0,0,1811,1807,1,0,0,0,1811,1812,1,0,0,0,1812,1835,
        1,0,0,0,1813,1815,5,162,0,0,1814,1816,5,194,0,0,1815,1814,1,0,0,
        0,1815,1816,1,0,0,0,1816,1817,1,0,0,0,1817,1820,3,152,76,0,1818,
        1819,5,28,0,0,1819,1821,3,222,111,0,1820,1818,1,0,0,0,1820,1821,
        1,0,0,0,1821,1822,1,0,0,0,1822,1823,5,43,0,0,1823,1824,5,2,0,0,1824,
        1829,3,96,48,0,1825,1826,5,4,0,0,1826,1828,3,96,48,0,1827,1825,1,
        0,0,0,1828,1831,1,0,0,0,1829,1827,1,0,0,0,1829,1830,1,0,0,0,1830,
        1832,1,0,0,0,1831,1829,1,0,0,0,1832,1833,5,3,0,0,1833,1835,1,0,0,
        0,1834,1757,1,0,0,0,1834,1761,1,0,0,0,1834,1779,1,0,0,0,1834,1813,
        1,0,0,0,1835,97,1,0,0,0,1836,1862,3,100,50,0,1837,1838,3,100,50,
        0,1838,1839,7,17,0,0,1839,1840,3,102,51,0,1840,1862,1,0,0,0,1841,
        1842,3,102,51,0,1842,1843,5,267,0,0,1843,1848,3,102,51,0,1844,1845,
        5,267,0,0,1845,1847,3,102,51,0,1846,1844,1,0,0,0,1847,1850,1,0,0,
        0,1848,1846,1,0,0,0,1848,1849,1,0,0,0,1849,1862,1,0,0,0,1850,1848,
        1,0,0,0,1851,1852,3,102,51,0,1852,1853,5,52,0,0,1853,1858,3,102,
        51,0,1854,1855,5,52,0,0,1855,1857,3,102,51,0,1856,1854,1,0,0,0,1857,
        1860,1,0,0,0,1858,1856,1,0,0,0,1858,1859,1,0,0,0,1859,1862,1,0,0,
        0,1860,1858,1,0,0,0,1861,1836,1,0,0,0,1861,1837,1,0,0,0,1861,1841,
        1,0,0,0,1861,1851,1,0,0,0,1862,99,1,0,0,0,1863,1864,3,222,111,0,
        1864,101,1,0,0,0,1865,1871,3,100,50,0,1866,1867,5,2,0,0,1867,1868,
        3,98,49,0,1868,1869,5,3,0,0,1869,1871,1,0,0,0,1870,1865,1,0,0,0,
        1870,1866,1,0,0,0,1871,103,1,0,0,0,1872,1875,7,17,0,0,1873,1874,
        5,4,0,0,1874,1876,7,18,0,0,1875,1873,1,0,0,0,1875,1876,1,0,0,0,1876,
        1883,1,0,0,0,1877,1880,7,18,0,0,1878,1879,5,4,0,0,1879,1881,7,17,
        0,0,1880,1878,1,0,0,0,1880,1881,1,0,0,0,1881,1883,1,0,0,0,1882,1872,
        1,0,0,0,1882,1877,1,0,0,0,1883,105,1,0,0,0,1884,1885,3,210,105,0,
        1885,1894,5,2,0,0,1886,1891,3,108,54,0,1887,1888,5,4,0,0,1888,1890,
        3,108,54,0,1889,1887,1,0,0,0,1890,1893,1,0,0,0,1891,1889,1,0,0,0,
        1891,1892,1,0,0,0,1892,1895,1,0,0,0,1893,1891,1,0,0,0,1894,1886,
        1,0,0,0,1894,1895,1,0,0,0,1895,1905,1,0,0,0,1896,1897,5,50,0,0,1897,
        1902,3,118,59,0,1898,1899,5,4,0,0,1899,1901,3,118,59,0,1900,1898,
        1,0,0,0,1901,1904,1,0,0,0,1902,1900,1,0,0,0,1902,1903,1,0,0,0,1903,
        1906,1,0,0,0,1904,1902,1,0,0,0,1905,1896,1,0,0,0,1905,1906,1,0,0,
        0,1906,1907,1,0,0,0,1907,1908,5,3,0,0,1908,107,1,0,0,0,1909,1910,
        3,222,111,0,1910,1911,5,6,0,0,1911,1913,1,0,0,0,1912,1909,1,0,0,
        0,1912,1913,1,0,0,0,1913,1917,1,0,0,0,1914,1918,3,110,55,0,1915,
        1918,3,114,57,0,1916,1918,3,120,60,0,1917,1914,1,0,0,0,1917,1915,
        1,0,0,0,1917,1916,1,0,0,0,1918,109,1,0,0,0,1919,1937,3,112,56,0,
        1920,1921,5,190,0,0,1921,1935,5,35,0,0,1922,1931,5,2,0,0,1923,1928,
        3,120,60,0,1924,1925,5,4,0,0,1925,1927,3,120,60,0,1926,1924,1,0,
        0,0,1927,1930,1,0,0,0,1928,1926,1,0,0,0,1928,1929,1,0,0,0,1929,1932,
        1,0,0,0,1930,1928,1,0,0,0,1931,1923,1,0,0,0,1931,1932,1,0,0,0,1932,
        1933,1,0,0,0,1933,1936,5,3,0,0,1934,1936,3,120,60,0,1935,1922,1,
        0,0,0,1935,1934,1,0,0,0,1936,1938,1,0,0,0,1937,1920,1,0,0,0,1937,
        1938,1,0,0,0,1938,1945,1,0,0,0,1939,1940,5,206,0,0,1940,1941,5,285,
        0,0,1941,1946,5,80,0,0,1942,1943,5,136,0,0,1943,1944,5,285,0,0,1944,
        1946,5,80,0,0,1945,1939,1,0,0,0,1945,1942,1,0,0,0,1945,1946,1,0,
        0,0,1946,1963,1,0,0,0,1947,1948,5,184,0,0,1948,1961,5,35,0,0,1949,
        1950,5,2,0,0,1950,1955,3,40,20,0,1951,1952,5,4,0,0,1952,1954,3,40,
        20,0,1953,1951,1,0,0,0,1954,1957,1,0,0,0,1955,1953,1,0,0,0,1955,
        1956,1,0,0,0,1956,1958,1,0,0,0,1957,1955,1,0,0,0,1958,1959,5,3,0,
        0,1959,1962,1,0,0,0,1960,1962,3,40,20,0,1961,1949,1,0,0,0,1961,1960,
        1,0,0,0,1962,1964,1,0,0,0,1963,1947,1,0,0,0,1963,1964,1,0,0,0,1964,
        111,1,0,0,0,1965,1966,5,246,0,0,1966,1967,5,2,0,0,1967,1968,3,210,
        105,0,1968,1976,5,3,0,0,1969,1971,5,28,0,0,1970,1969,1,0,0,0,1970,
        1971,1,0,0,0,1971,1972,1,0,0,0,1972,1974,3,222,111,0,1973,1975,3,
        92,46,0,1974,1973,1,0,0,0,1974,1975,1,0,0,0,1975,1977,1,0,0,0,1976,
        1970,1,0,0,0,1976,1977,1,0,0,0,1977,1992,1,0,0,0,1978,1979,5,246,
        0,0,1979,1980,5,2,0,0,1980,1981,3,12,6,0,1981,1989,5,3,0,0,1982,
        1984,5,28,0,0,1983,1982,1,0,0,0,1983,1984,1,0,0,0,1984,1985,1,0,
        0,0,1985,1987,3,222,111,0,1986,1988,3,92,46,0,1987,1986,1,0,0,0,
        1987,1988,1,0,0,0,1988,1990,1,0,0,0,1989,1983,1,0,0,0,1989,1990,
        1,0,0,0,1990,1992,1,0,0,0,1991,1965,1,0,0,0,1991,1978,1,0,0,0,1992,
        113,1,0,0,0,1993,1994,5,74,0,0,1994,1995,5,2,0,0,1995,2000,3,116,
        58,0,1996,1997,5,4,0,0,1997,1999,3,116,58,0,1998,1996,1,0,0,0,1999,
        2002,1,0,0,0,2000,1998,1,0,0,0,2000,2001,1,0,0,0,2001,2003,1,0,0,
        0,2002,2000,1,0,0,0,2003,2004,5,3,0,0,2004,2012,1,0,0,0,2005,2006,
        5,39,0,0,2006,2007,5,2,0,0,2007,2008,5,172,0,0,2008,2009,5,28,0,
        0,2009,2010,5,74,0,0,2010,2012,5,3,0,0,2011,1993,1,0,0,0,2011,2005,
        1,0,0,0,2012,115,1,0,0,0,2013,2015,3,222,111,0,2014,2016,3,168,84,
        0,2015,2014,1,0,0,0,2015,2016,1,0,0,0,2016,117,1,0,0,0,2017,2018,
        5,2,0,0,2018,2019,3,210,105,0,2019,2020,5,4,0,0,2020,2025,3,210,
        105,0,2021,2022,5,4,0,0,2022,2024,3,210,105,0,2023,2021,1,0,0,0,
        2024,2027,1,0,0,0,2025,2023,1,0,0,0,2025,2026,1,0,0,0,2026,2028,
        1,0,0,0,2027,2025,1,0,0,0,2028,2029,5,3,0,0,2029,119,1,0,0,0,2030,
        2031,3,122,61,0,2031,121,1,0,0,0,2032,2033,6,61,-1,0,2033,2035,3,
        126,63,0,2034,2036,3,124,62,0,2035,2034,1,0,0,0,2035,2036,1,0,0,
        0,2036,2040,1,0,0,0,2037,2038,5,171,0,0,2038,2040,3,122,61,3,2039,
        2032,1,0,0,0,2039,2037,1,0,0,0,2040,2049,1,0,0,0,2041,2042,10,2,
        0,0,2042,2043,5,25,0,0,2043,2048,3,122,61,3,2044,2045,10,1,0,0,2045,
        2046,5,183,0,0,2046,2048,3,122,61,2,2047,2041,1,0,0,0,2047,2044,
        1,0,0,0,2048,2051,1,0,0,0,2049,2047,1,0,0,0,2049,2050,1,0,0,0,2050,
        123,1,0,0,0,2051,2049,1,0,0,0,2052,2053,3,156,78,0,2053,2054,3,126,
        63,0,2054,2114,1,0,0,0,2055,2056,3,156,78,0,2056,2057,3,158,79,0,
        2057,2058,5,2,0,0,2058,2059,3,12,6,0,2059,2060,5,3,0,0,2060,2114,
        1,0,0,0,2061,2063,5,171,0,0,2062,2061,1,0,0,0,2062,2063,1,0,0,0,
        2063,2064,1,0,0,0,2064,2065,5,33,0,0,2065,2066,3,126,63,0,2066,2067,
        5,25,0,0,2067,2068,3,126,63,0,2068,2114,1,0,0,0,2069,2071,5,171,
        0,0,2070,2069,1,0,0,0,2070,2071,1,0,0,0,2071,2072,1,0,0,0,2072,2073,
        5,115,0,0,2073,2074,5,2,0,0,2074,2079,3,120,60,0,2075,2076,5,4,0,
        0,2076,2078,3,120,60,0,2077,2075,1,0,0,0,2078,2081,1,0,0,0,2079,
        2077,1,0,0,0,2079,2080,1,0,0,0,2080,2082,1,0,0,0,2081,2079,1,0,0,
        0,2082,2083,5,3,0,0,2083,2114,1,0,0,0,2084,2086,5,171,0,0,2085,2084,
        1,0,0,0,2085,2086,1,0,0,0,2086,2087,1,0,0,0,2087,2088,5,115,0,0,
        2088,2089,5,2,0,0,2089,2090,3,12,6,0,2090,2091,5,3,0,0,2091,2114,
        1,0,0,0,2092,2094,5,171,0,0,2093,2092,1,0,0,0,2093,2094,1,0,0,0,
        2094,2095,1,0,0,0,2095,2096,5,144,0,0,2096,2099,3,126,63,0,2097,
        2098,5,84,0,0,2098,2100,3,126,63,0,2099,2097,1,0,0,0,2099,2100,1,
        0,0,0,2100,2114,1,0,0,0,2101,2103,5,126,0,0,2102,2104,5,171,0,0,
        2103,2102,1,0,0,0,2103,2104,1,0,0,0,2104,2105,1,0,0,0,2105,2114,
        5,172,0,0,2106,2108,5,126,0,0,2107,2109,5,171,0,0,2108,2107,1,0,
        0,0,2108,2109,1,0,0,0,2109,2110,1,0,0,0,2110,2111,5,75,0,0,2111,
        2112,5,99,0,0,2112,2114,3,126,63,0,2113,2052,1,0,0,0,2113,2055,1,
        0,0,0,2113,2062,1,0,0,0,2113,2070,1,0,0,0,2113,2085,1,0,0,0,2113,
        2093,1,0,0,0,2113,2101,1,0,0,0,2113,2106,1,0,0,0,2114,125,1,0,0,
        0,2115,2116,6,63,-1,0,2116,2120,3,128,64,0,2117,2118,7,19,0,0,2118,
        2120,3,126,63,4,2119,2115,1,0,0,0,2119,2117,1,0,0,0,2120,2135,1,
        0,0,0,2121,2122,10,3,0,0,2122,2123,7,20,0,0,2123,2134,3,126,63,4,
        2124,2125,10,2,0,0,2125,2126,7,19,0,0,2126,2134,3,126,63,3,2127,
        2128,10,1,0,0,2128,2129,5,307,0,0,2129,2134,3,126,63,2,2130,2131,
        10,5,0,0,2131,2132,5,30,0,0,2132,2134,3,154,77,0,2133,2121,1,0,0,
        0,2133,2124,1,0,0,0,2133,2127,1,0,0,0,2133,2130,1,0,0,0,2134,2137,
        1,0,0,0,2135,2133,1,0,0,0,2135,2136,1,0,0,0,2136,127,1,0,0,0,2137,
        2135,1,0,0,0,2138,2139,6,64,-1,0,2139,2589,5,172,0,0,2140,2589,3,
        162,81,0,2141,2142,3,222,111,0,2142,2143,3,152,76,0,2143,2589,1,
        0,0,0,2144,2145,5,77,0,0,2145,2146,5,202,0,0,2146,2589,3,152,76,
        0,2147,2589,3,224,112,0,2148,2589,3,160,80,0,2149,2589,3,152,76,
        0,2150,2589,5,311,0,0,2151,2589,5,308,0,0,2152,2153,5,200,0,0,2153,
        2154,5,2,0,0,2154,2155,3,126,63,0,2155,2156,5,115,0,0,2156,2157,
        3,126,63,0,2157,2158,5,3,0,0,2158,2589,1,0,0,0,2159,2160,5,2,0,0,
        2160,2163,3,120,60,0,2161,2162,5,4,0,0,2162,2164,3,120,60,0,2163,
        2161,1,0,0,0,2164,2165,1,0,0,0,2165,2163,1,0,0,0,2165,2166,1,0,0,
        0,2166,2167,1,0,0,0,2167,2168,5,3,0,0,2168,2589,1,0,0,0,2169,2170,
        5,225,0,0,2170,2171,5,2,0,0,2171,2176,3,120,60,0,2172,2173,5,4,0,
        0,2173,2175,3,120,60,0,2174,2172,1,0,0,0,2175,2178,1,0,0,0,2176,
        2174,1,0,0,0,2176,2177,1,0,0,0,2177,2179,1,0,0,0,2178,2176,1,0,0,
        0,2179,2180,5,3,0,0,2180,2589,1,0,0,0,2181,2182,5,146,0,0,2182,2184,
        5,2,0,0,2183,2185,3,56,28,0,2184,2183,1,0,0,0,2184,2185,1,0,0,0,
        2185,2186,1,0,0,0,2186,2189,3,120,60,0,2187,2188,5,4,0,0,2188,2190,
        3,152,76,0,2189,2187,1,0,0,0,2189,2190,1,0,0,0,2190,2194,1,0,0,0,
        2191,2192,5,179,0,0,2192,2193,5,189,0,0,2193,2195,3,72,36,0,2194,
        2191,1,0,0,0,2194,2195,1,0,0,0,2195,2196,1,0,0,0,2196,2197,5,3,0,
        0,2197,2198,5,289,0,0,2198,2199,5,107,0,0,2199,2200,5,2,0,0,2200,
        2201,5,184,0,0,2201,2202,5,35,0,0,2202,2207,3,40,20,0,2203,2204,
        5,4,0,0,2204,2206,3,40,20,0,2205,2203,1,0,0,0,2206,2209,1,0,0,0,
        2207,2205,1,0,0,0,2207,2208,1,0,0,0,2208,2210,1,0,0,0,2209,2207,
        1,0,0,0,2210,2211,5,3,0,0,2211,2589,1,0,0,0,2212,2214,3,148,74,0,
        2213,2212,1,0,0,0,2213,2214,1,0,0,0,2214,2215,1,0,0,0,2215,2216,
        3,210,105,0,2216,2220,5,2,0,0,2217,2218,3,222,111,0,2218,2219,5,
        1,0,0,2219,2221,1,0,0,0,2220,2217,1,0,0,0,2220,2221,1,0,0,0,2221,
        2222,1,0,0,0,2222,2223,5,304,0,0,2223,2225,5,3,0,0,2224,2226,3,176,
        88,0,2225,2224,1,0,0,0,2225,2226,1,0,0,0,2226,2228,1,0,0,0,2227,
        2229,3,180,90,0,2228,2227,1,0,0,0,2228,2229,1,0,0,0,2229,2589,1,
        0,0,0,2230,2232,3,148,74,0,2231,2230,1,0,0,0,2231,2232,1,0,0,0,2232,
        2233,1,0,0,0,2233,2234,3,210,105,0,2234,2246,5,2,0,0,2235,2237,3,
        56,28,0,2236,2235,1,0,0,0,2236,2237,1,0,0,0,2237,2238,1,0,0,0,2238,
        2243,3,120,60,0,2239,2240,5,4,0,0,2240,2242,3,120,60,0,2241,2239,
        1,0,0,0,2242,2245,1,0,0,0,2243,2241,1,0,0,0,2243,2244,1,0,0,0,2244,
        2247,1,0,0,0,2245,2243,1,0,0,0,2246,2236,1,0,0,0,2246,2247,1,0,0,
        0,2247,2258,1,0,0,0,2248,2249,5,184,0,0,2249,2250,5,35,0,0,2250,
        2255,3,40,20,0,2251,2252,5,4,0,0,2252,2254,3,40,20,0,2253,2251,1,
        0,0,0,2254,2257,1,0,0,0,2255,2253,1,0,0,0,2255,2256,1,0,0,0,2256,
        2259,1,0,0,0,2257,2255,1,0,0,0,2258,2248,1,0,0,0,2258,2259,1,0,0,
        0,2259,2260,1,0,0,0,2260,2262,5,3,0,0,2261,2263,3,176,88,0,2262,
        2261,1,0,0,0,2262,2263,1,0,0,0,2263,2268,1,0,0,0,2264,2266,3,150,
        75,0,2265,2264,1,0,0,0,2265,2266,1,0,0,0,2266,2267,1,0,0,0,2267,
        2269,3,180,90,0,2268,2265,1,0,0,0,2268,2269,1,0,0,0,2269,2589,1,
        0,0,0,2270,2271,3,222,111,0,2271,2272,3,180,90,0,2272,2589,1,0,0,
        0,2273,2274,3,222,111,0,2274,2275,5,7,0,0,2275,2276,3,120,60,0,2276,
        2589,1,0,0,0,2277,2286,5,2,0,0,2278,2283,3,222,111,0,2279,2280,5,
        4,0,0,2280,2282,3,222,111,0,2281,2279,1,0,0,0,2282,2285,1,0,0,0,
        2283,2281,1,0,0,0,2283,2284,1,0,0,0,2284,2287,1,0,0,0,2285,2283,
        1,0,0,0,2286,2278,1,0,0,0,2286,2287,1,0,0,0,2287,2288,1,0,0,0,2288,
        2289,5,3,0,0,2289,2290,5,7,0,0,2290,2589,3,120,60,0,2291,2292,5,
        2,0,0,2292,2293,3,12,6,0,2293,2294,5,3,0,0,2294,2589,1,0,0,0,2295,
        2296,5,88,0,0,2296,2297,5,2,0,0,2297,2298,3,12,6,0,2298,2299,5,3,
        0,0,2299,2589,1,0,0,0,2300,2301,5,38,0,0,2301,2303,3,120,60,0,2302,
        2304,3,174,87,0,2303,2302,1,0,0,0,2304,2305,1,0,0,0,2305,2303,1,
        0,0,0,2305,2306,1,0,0,0,2306,2309,1,0,0,0,2307,2308,5,79,0,0,2308,
        2310,3,120,60,0,2309,2307,1,0,0,0,2309,2310,1,0,0,0,2310,2311,1,
        0,0,0,2311,2312,5,82,0,0,2312,2589,1,0,0,0,2313,2315,5,38,0,0,2314,
        2316,3,174,87,0,2315,2314,1,0,0,0,2316,2317,1,0,0,0,2317,2315,1,
        0,0,0,2317,2318,1,0,0,0,2318,2321,1,0,0,0,2319,2320,5,79,0,0,2320,
        2322,3,120,60,0,2321,2319,1,0,0,0,2321,2322,1,0,0,0,2322,2323,1,
        0,0,0,2323,2324,5,82,0,0,2324,2589,1,0,0,0,2325,2326,5,39,0,0,2326,
        2327,5,2,0,0,2327,2328,3,120,60,0,2328,2329,5,28,0,0,2329,2330,3,
        168,84,0,2330,2331,5,3,0,0,2331,2589,1,0,0,0,2332,2333,5,261,0,0,
        2333,2334,5,2,0,0,2334,2335,3,120,60,0,2335,2336,5,28,0,0,2336,2337,
        3,168,84,0,2337,2338,5,3,0,0,2338,2589,1,0,0,0,2339,2340,5,27,0,
        0,2340,2349,5,8,0,0,2341,2346,3,120,60,0,2342,2343,5,4,0,0,2343,
        2345,3,120,60,0,2344,2342,1,0,0,0,2345,2348,1,0,0,0,2346,2344,1,
        0,0,0,2346,2347,1,0,0,0,2347,2350,1,0,0,0,2348,2346,1,0,0,0,2349,
        2341,1,0,0,0,2349,2350,1,0,0,0,2350,2351,1,0,0,0,2351,2589,5,9,0,
        0,2352,2589,3,222,111,0,2353,2589,5,56,0,0,2354,2358,5,60,0,0,2355,
        2356,5,2,0,0,2356,2357,5,312,0,0,2357,2359,5,3,0,0,2358,2355,1,0,
        0,0,2358,2359,1,0,0,0,2359,2589,1,0,0,0,2360,2364,5,61,0,0,2361,
        2362,5,2,0,0,2362,2363,5,312,0,0,2363,2365,5,3,0,0,2364,2361,1,0,
        0,0,2364,2365,1,0,0,0,2365,2589,1,0,0,0,2366,2370,5,148,0,0,2367,
        2368,5,2,0,0,2368,2369,5,312,0,0,2369,2371,5,3,0,0,2370,2367,1,0,
        0,0,2370,2371,1,0,0,0,2371,2589,1,0,0,0,2372,2376,5,149,0,0,2373,
        2374,5,2,0,0,2374,2375,5,312,0,0,2375,2377,5,3,0,0,2376,2373,1,0,
        0,0,2376,2377,1,0,0,0,2377,2589,1,0,0,0,2378,2589,5,62,0,0,2379,
        2589,5,55,0,0,2380,2589,5,59,0,0,2381,2589,5,57,0,0,2382,2383,5,
        258,0,0,2383,2391,5,2,0,0,2384,2386,3,70,35,0,2385,2384,1,0,0,0,
        2385,2386,1,0,0,0,2386,2388,1,0,0,0,2387,2389,3,126,63,0,2388,2387,
        1,0,0,0,2388,2389,1,0,0,0,2389,2390,1,0,0,0,2390,2392,5,99,0,0,2391,
        2385,1,0,0,0,2391,2392,1,0,0,0,2392,2393,1,0,0,0,2393,2394,3,126,
        63,0,2394,2395,5,3,0,0,2395,2589,1,0,0,0,2396,2397,5,258,0,0,2397,
        2398,5,2,0,0,2398,2399,3,126,63,0,2399,2400,5,4,0,0,2400,2401,3,
        126,63,0,2401,2402,5,3,0,0,2402,2589,1,0,0,0,2403,2404,5,244,0,0,
        2404,2405,5,2,0,0,2405,2406,3,126,63,0,2406,2407,5,99,0,0,2407,2410,
        3,126,63,0,2408,2409,5,97,0,0,2409,2411,3,126,63,0,2410,2408,1,0,
        0,0,2410,2411,1,0,0,0,2411,2412,1,0,0,0,2412,2413,5,3,0,0,2413,2589,
        1,0,0,0,2414,2415,5,170,0,0,2415,2416,5,2,0,0,2416,2419,3,126,63,
        0,2417,2418,5,4,0,0,2418,2420,3,166,83,0,2419,2417,1,0,0,0,2419,
        2420,1,0,0,0,2420,2421,1,0,0,0,2421,2422,5,3,0,0,2422,2589,1,0,0,
        0,2423,2424,5,90,0,0,2424,2425,5,2,0,0,2425,2426,3,222,111,0,2426,
        2427,5,99,0,0,2427,2428,3,126,63,0,2428,2429,5,3,0,0,2429,2589,1,
        0,0,0,2430,2431,5,2,0,0,2431,2432,3,120,60,0,2432,2433,5,3,0,0,2433,
        2589,1,0,0,0,2434,2435,5,108,0,0,2435,2444,5,2,0,0,2436,2441,3,210,
        105,0,2437,2438,5,4,0,0,2438,2440,3,210,105,0,2439,2437,1,0,0,0,
        2440,2443,1,0,0,0,2441,2439,1,0,0,0,2441,2442,1,0,0,0,2442,2445,
        1,0,0,0,2443,2441,1,0,0,0,2444,2436,1,0,0,0,2444,2445,1,0,0,0,2445,
        2446,1,0,0,0,2446,2589,5,3,0,0,2447,2448,5,131,0,0,2448,2449,5,2,
        0,0,2449,2454,3,130,65,0,2450,2451,3,138,69,0,2451,2452,5,179,0,
        0,2452,2453,5,83,0,0,2453,2455,1,0,0,0,2454,2450,1,0,0,0,2454,2455,
        1,0,0,0,2455,2456,1,0,0,0,2456,2457,5,3,0,0,2457,2589,1,0,0,0,2458,
        2459,5,135,0,0,2459,2460,5,2,0,0,2460,2463,3,130,65,0,2461,2462,
        5,218,0,0,2462,2464,3,168,84,0,2463,2461,1,0,0,0,2463,2464,1,0,0,
        0,2464,2469,1,0,0,0,2465,2466,3,140,70,0,2466,2467,5,179,0,0,2467,
        2468,5,80,0,0,2468,2470,1,0,0,0,2469,2465,1,0,0,0,2469,2470,1,0,
        0,0,2470,2475,1,0,0,0,2471,2472,3,140,70,0,2472,2473,5,179,0,0,2473,
        2474,5,83,0,0,2474,2476,1,0,0,0,2475,2471,1,0,0,0,2475,2476,1,0,
        0,0,2476,2477,1,0,0,0,2477,2478,5,3,0,0,2478,2589,1,0,0,0,2479,2480,
        5,133,0,0,2480,2481,5,2,0,0,2481,2488,3,130,65,0,2482,2483,5,218,
        0,0,2483,2486,3,168,84,0,2484,2485,5,98,0,0,2485,2487,3,134,67,0,
        2486,2484,1,0,0,0,2486,2487,1,0,0,0,2487,2489,1,0,0,0,2488,2482,
        1,0,0,0,2488,2489,1,0,0,0,2489,2493,1,0,0,0,2490,2491,3,142,71,0,
        2491,2492,5,292,0,0,2492,2494,1,0,0,0,2493,2490,1,0,0,0,2493,2494,
        1,0,0,0,2494,2502,1,0,0,0,2495,2496,7,16,0,0,2496,2500,5,207,0,0,
        2497,2498,5,179,0,0,2498,2499,5,228,0,0,2499,2501,5,250,0,0,2500,
        2497,1,0,0,0,2500,2501,1,0,0,0,2501,2503,1,0,0,0,2502,2495,1,0,0,
        0,2502,2503,1,0,0,0,2503,2508,1,0,0,0,2504,2505,3,144,72,0,2505,
        2506,5,179,0,0,2506,2507,5,80,0,0,2507,2509,1,0,0,0,2508,2504,1,
        0,0,0,2508,2509,1,0,0,0,2509,2514,1,0,0,0,2510,2511,3,144,72,0,2511,
        2512,5,179,0,0,2512,2513,5,83,0,0,2513,2515,1,0,0,0,2514,2510,1,
        0,0,0,2514,2515,1,0,0,0,2515,2516,1,0,0,0,2516,2517,5,3,0,0,2517,
        2589,1,0,0,0,2518,2519,5,132,0,0,2519,2548,5,2,0,0,2520,2525,3,146,
        73,0,2521,2522,5,4,0,0,2522,2524,3,146,73,0,2523,2521,1,0,0,0,2524,
        2527,1,0,0,0,2525,2523,1,0,0,0,2525,2526,1,0,0,0,2526,2534,1,0,0,
        0,2527,2525,1,0,0,0,2528,2529,5,172,0,0,2529,2530,5,179,0,0,2530,
        2535,5,172,0,0,2531,2532,5,18,0,0,2532,2533,5,179,0,0,2533,2535,
        5,172,0,0,2534,2528,1,0,0,0,2534,2531,1,0,0,0,2534,2535,1,0,0,0,
        2535,2546,1,0,0,0,2536,2537,5,288,0,0,2537,2539,5,268,0,0,2538,2540,
        5,138,0,0,2539,2538,1,0,0,0,2539,2540,1,0,0,0,2540,2547,1,0,0,0,
        2541,2542,5,290,0,0,2542,2544,5,268,0,0,2543,2545,5,138,0,0,2544,
        2543,1,0,0,0,2544,2545,1,0,0,0,2545,2547,1,0,0,0,2546,2536,1,0,0,
        0,2546,2541,1,0,0,0,2546,2547,1,0,0,0,2547,2549,1,0,0,0,2548,2520,
        1,0,0,0,2548,2549,1,0,0,0,2549,2556,1,0,0,0,2550,2551,5,218,0,0,
        2551,2554,3,168,84,0,2552,2553,5,98,0,0,2553,2555,3,134,67,0,2554,
        2552,1,0,0,0,2554,2555,1,0,0,0,2555,2557,1,0,0,0,2556,2550,1,0,0,
        0,2556,2557,1,0,0,0,2557,2558,1,0,0,0,2558,2589,5,3,0,0,2559,2560,
        5,130,0,0,2560,2577,5,2,0,0,2561,2566,3,132,66,0,2562,2563,5,4,0,
        0,2563,2565,3,132,66,0,2564,2562,1,0,0,0,2565,2568,1,0,0,0,2566,
        2564,1,0,0,0,2566,2567,1,0,0,0,2567,2575,1,0,0,0,2568,2566,1,0,0,
        0,2569,2570,5,172,0,0,2570,2571,5,179,0,0,2571,2576,5,172,0,0,2572,
        2573,5,18,0,0,2573,2574,5,179,0,0,2574,2576,5,172,0,0,2575,2569,
        1,0,0,0,2575,2572,1,0,0,0,2575,2576,1,0,0,0,2576,2578,1,0,0,0,2577,
        2561,1,0,0,0,2577,2578,1,0,0,0,2578,2585,1,0,0,0,2579,2580,5,218,
        0,0,2580,2583,3,168,84,0,2581,2582,5,98,0,0,2582,2584,3,134,67,0,
        2583,2581,1,0,0,0,2583,2584,1,0,0,0,2584,2586,1,0,0,0,2585,2579,
        1,0,0,0,2585,2586,1,0,0,0,2586,2587,1,0,0,0,2587,2589,5,3,0,0,2588,
        2138,1,0,0,0,2588,2140,1,0,0,0,2588,2141,1,0,0,0,2588,2144,1,0,0,
        0,2588,2147,1,0,0,0,2588,2148,1,0,0,0,2588,2149,1,0,0,0,2588,2150,
        1,0,0,0,2588,2151,1,0,0,0,2588,2152,1,0,0,0,2588,2159,1,0,0,0,2588,
        2169,1,0,0,0,2588,2181,1,0,0,0,2588,2213,1,0,0,0,2588,2231,1,0,0,
        0,2588,2270,1,0,0,0,2588,2273,1,0,0,0,2588,2277,1,0,0,0,2588,2291,
        1,0,0,0,2588,2295,1,0,0,0,2588,2300,1,0,0,0,2588,2313,1,0,0,0,2588,
        2325,1,0,0,0,2588,2332,1,0,0,0,2588,2339,1,0,0,0,2588,2352,1,0,0,
        0,2588,2353,1,0,0,0,2588,2354,1,0,0,0,2588,2360,1,0,0,0,2588,2366,
        1,0,0,0,2588,2372,1,0,0,0,2588,2378,1,0,0,0,2588,2379,1,0,0,0,2588,
        2380,1,0,0,0,2588,2381,1,0,0,0,2588,2382,1,0,0,0,2588,2396,1,0,0,
        0,2588,2403,1,0,0,0,2588,2414,1,0,0,0,2588,2423,1,0,0,0,2588,2430,
        1,0,0,0,2588,2434,1,0,0,0,2588,2447,1,0,0,0,2588,2458,1,0,0,0,2588,
        2479,1,0,0,0,2588,2518,1,0,0,0,2588,2559,1,0,0,0,2589,2600,1,0,0,
        0,2590,2591,10,24,0,0,2591,2592,5,8,0,0,2592,2593,3,126,63,0,2593,
        2594,5,9,0,0,2594,2599,1,0,0,0,2595,2596,10,22,0,0,2596,2597,5,1,
        0,0,2597,2599,3,222,111,0,2598,2590,1,0,0,0,2598,2595,1,0,0,0,2599,
        2602,1,0,0,0,2600,2598,1,0,0,0,2600,2601,1,0,0,0,2601,129,1,0,0,
        0,2602,2600,1,0,0,0,2603,2604,3,132,66,0,2604,2605,5,4,0,0,2605,
        2608,3,152,76,0,2606,2607,5,28,0,0,2607,2609,3,222,111,0,2608,2606,
        1,0,0,0,2608,2609,1,0,0,0,2609,2619,1,0,0,0,2610,2611,5,192,0,0,
        2611,2616,3,136,68,0,2612,2613,5,4,0,0,2613,2615,3,136,68,0,2614,
        2612,1,0,0,0,2615,2618,1,0,0,0,2616,2614,1,0,0,0,2616,2617,1,0,0,
        0,2617,2620,1,0,0,0,2618,2616,1,0,0,0,2619,2610,1,0,0,0,2619,2620,
        1,0,0,0,2620,131,1,0,0,0,2621,2624,3,120,60,0,2622,2623,5,98,0,0,
        2623,2625,3,134,67,0,2624,2622,1,0,0,0,2624,2625,1,0,0,0,2625,133,
        1,0,0,0,2626,2629,5,129,0,0,2627,2628,5,81,0,0,2628,2630,7,21,0,
        0,2629,2627,1,0,0,0,2629,2630,1,0,0,0,2630,135,1,0,0,0,2631,2632,
        3,132,66,0,2632,2633,5,28,0,0,2633,2634,3,222,111,0,2634,137,1,0,
        0,0,2635,2636,7,22,0,0,2636,139,1,0,0,0,2637,2642,5,83,0,0,2638,
        2642,5,172,0,0,2639,2640,5,67,0,0,2640,2642,3,120,60,0,2641,2637,
        1,0,0,0,2641,2638,1,0,0,0,2641,2639,1,0,0,0,2642,141,1,0,0,0,2643,
        2645,5,290,0,0,2644,2646,5,27,0,0,2645,2644,1,0,0,0,2645,2646,1,
        0,0,0,2646,2655,1,0,0,0,2647,2649,5,288,0,0,2648,2650,7,23,0,0,2649,
        2648,1,0,0,0,2649,2650,1,0,0,0,2650,2652,1,0,0,0,2651,2653,5,27,
        0,0,2652,2651,1,0,0,0,2652,2653,1,0,0,0,2653,2655,1,0,0,0,2654,2643,
        1,0,0,0,2654,2647,1,0,0,0,2655,143,1,0,0,0,2656,2663,5,83,0,0,2657,
        2663,5,172,0,0,2658,2659,5,80,0,0,2659,2663,5,27,0,0,2660,2661,5,
        80,0,0,2661,2663,5,175,0,0,2662,2656,1,0,0,0,2662,2657,1,0,0,0,2662,
        2658,1,0,0,0,2662,2660,1,0,0,0,2663,145,1,0,0,0,2664,2666,5,137,
        0,0,2665,2664,1,0,0,0,2665,2666,1,0,0,0,2666,2667,1,0,0,0,2667,2668,
        3,120,60,0,2668,2669,5,280,0,0,2669,2670,3,132,66,0,2670,2676,1,
        0,0,0,2671,2672,3,120,60,0,2672,2673,5,10,0,0,2673,2674,3,132,66,
        0,2674,2676,1,0,0,0,2675,2665,1,0,0,0,2675,2671,1,0,0,0,2676,147,
        1,0,0,0,2677,2678,7,24,0,0,2678,149,1,0,0,0,2679,2680,5,113,0,0,
        2680,2684,5,174,0,0,2681,2682,5,216,0,0,2682,2684,5,174,0,0,2683,
        2679,1,0,0,0,2683,2681,1,0,0,0,2684,151,1,0,0,0,2685,2692,5,309,
        0,0,2686,2689,5,310,0,0,2687,2688,5,263,0,0,2688,2690,5,309,0,0,
        2689,2687,1,0,0,0,2689,2690,1,0,0,0,2690,2692,1,0,0,0,2691,2685,
        1,0,0,0,2691,2686,1,0,0,0,2692,153,1,0,0,0,2693,2694,5,253,0,0,2694,
        2695,5,295,0,0,2695,2700,3,162,81,0,2696,2697,5,253,0,0,2697,2698,
        5,295,0,0,2698,2700,3,152,76,0,2699,2693,1,0,0,0,2699,2696,1,0,0,
        0,2700,155,1,0,0,0,2701,2702,7,25,0,0,2702,157,1,0,0,0,2703,2704,
        7,26,0,0,2704,159,1,0,0,0,2705,2706,7,27,0,0,2706,161,1,0,0,0,2707,
        2709,5,122,0,0,2708,2710,7,19,0,0,2709,2708,1,0,0,0,2709,2710,1,
        0,0,0,2710,2711,1,0,0,0,2711,2712,3,152,76,0,2712,2715,3,164,82,
        0,2713,2714,5,255,0,0,2714,2716,3,164,82,0,2715,2713,1,0,0,0,2715,
        2716,1,0,0,0,2716,163,1,0,0,0,2717,2718,7,28,0,0,2718,165,1,0,0,
        0,2719,2720,7,29,0,0,2720,167,1,0,0,0,2721,2722,6,84,-1,0,2722,2723,
        5,225,0,0,2723,2724,5,2,0,0,2724,2729,3,170,85,0,2725,2726,5,4,0,
        0,2726,2728,3,170,85,0,2727,2725,1,0,0,0,2728,2731,1,0,0,0,2729,
        2727,1,0,0,0,2729,2730,1,0,0,0,2730,2732,1,0,0,0,2731,2729,1,0,0,
        0,2732,2733,5,3,0,0,2733,2813,1,0,0,0,2734,2735,5,122,0,0,2735,2738,
        3,164,82,0,2736,2737,5,255,0,0,2737,2739,3,164,82,0,2738,2736,1,
        0,0,0,2738,2739,1,0,0,0,2739,2813,1,0,0,0,2740,2745,5,254,0,0,2741,
        2742,5,2,0,0,2742,2743,3,172,86,0,2743,2744,5,3,0,0,2744,2746,1,
        0,0,0,2745,2741,1,0,0,0,2745,2746,1,0,0,0,2746,2750,1,0,0,0,2747,
        2748,5,290,0,0,2748,2749,5,253,0,0,2749,2751,5,295,0,0,2750,2747,
        1,0,0,0,2750,2751,1,0,0,0,2751,2813,1,0,0,0,2752,2757,5,254,0,0,
        2753,2754,5,2,0,0,2754,2755,3,172,86,0,2755,2756,5,3,0,0,2756,2758,
        1,0,0,0,2757,2753,1,0,0,0,2757,2758,1,0,0,0,2758,2759,1,0,0,0,2759,
        2760,5,288,0,0,2760,2761,5,253,0,0,2761,2813,5,295,0,0,2762,2767,
        5,253,0,0,2763,2764,5,2,0,0,2764,2765,3,172,86,0,2765,2766,5,3,0,
        0,2766,2768,1,0,0,0,2767,2763,1,0,0,0,2767,2768,1,0,0,0,2768,2772,
        1,0,0,0,2769,2770,5,290,0,0,2770,2771,5,253,0,0,2771,2773,5,295,
        0,0,2772,2769,1,0,0,0,2772,2773,1,0,0,0,2773,2813,1,0,0,0,2774,2779,
        5,253,0,0,2775,2776,5,2,0,0,2776,2777,3,172,86,0,2777,2778,5,3,0,
        0,2778,2780,1,0,0,0,2779,2775,1,0,0,0,2779,2780,1,0,0,0,2780,2781,
        1,0,0,0,2781,2782,5,288,0,0,2782,2783,5,253,0,0,2783,2813,5,295,
        0,0,2784,2785,5,77,0,0,2785,2813,5,202,0,0,2786,2787,5,27,0,0,2787,
        2788,5,298,0,0,2788,2789,3,168,84,0,2789,2790,5,300,0,0,2790,2813,
        1,0,0,0,2791,2792,5,151,0,0,2792,2793,5,298,0,0,2793,2794,3,168,
        84,0,2794,2795,5,4,0,0,2795,2796,3,168,84,0,2796,2797,5,300,0,0,
        2797,2813,1,0,0,0,2798,2810,3,222,111,0,2799,2800,5,2,0,0,2800,2805,
        3,172,86,0,2801,2802,5,4,0,0,2802,2804,3,172,86,0,2803,2801,1,0,
        0,0,2804,2807,1,0,0,0,2805,2803,1,0,0,0,2805,2806,1,0,0,0,2806,2808,
        1,0,0,0,2807,2805,1,0,0,0,2808,2809,5,3,0,0,2809,2811,1,0,0,0,2810,
        2799,1,0,0,0,2810,2811,1,0,0,0,2811,2813,1,0,0,0,2812,2721,1,0,0,
        0,2812,2734,1,0,0,0,2812,2740,1,0,0,0,2812,2752,1,0,0,0,2812,2762,
        1,0,0,0,2812,2774,1,0,0,0,2812,2784,1,0,0,0,2812,2786,1,0,0,0,2812,
        2791,1,0,0,0,2812,2798,1,0,0,0,2813,2823,1,0,0,0,2814,2815,10,2,
        0,0,2815,2819,5,27,0,0,2816,2817,5,8,0,0,2817,2818,5,312,0,0,2818,
        2820,5,9,0,0,2819,2816,1,0,0,0,2819,2820,1,0,0,0,2820,2822,1,0,0,
        0,2821,2814,1,0,0,0,2822,2825,1,0,0,0,2823,2821,1,0,0,0,2823,2824,
        1,0,0,0,2824,169,1,0,0,0,2825,2823,1,0,0,0,2826,2831,3,168,84,0,
        2827,2828,3,222,111,0,2828,2829,3,168,84,0,2829,2831,1,0,0,0,2830,
        2826,1,0,0,0,2830,2827,1,0,0,0,2831,171,1,0,0,0,2832,2835,5,312,
        0,0,2833,2835,3,168,84,0,2834,2832,1,0,0,0,2834,2833,1,0,0,0,2835,
        173,1,0,0,0,2836,2837,5,285,0,0,2837,2838,3,120,60,0,2838,2839,5,
        251,0,0,2839,2840,3,120,60,0,2840,175,1,0,0,0,2841,2842,5,93,0,0,
        2842,2843,5,2,0,0,2843,2844,5,286,0,0,2844,2845,3,122,61,0,2845,
        2846,5,3,0,0,2846,177,1,0,0,0,2847,2848,5,285,0,0,2848,2851,5,153,
        0,0,2849,2850,5,25,0,0,2850,2852,3,120,60,0,2851,2849,1,0,0,0,2851,
        2852,1,0,0,0,2852,2853,1,0,0,0,2853,2854,5,251,0,0,2854,2855,5,272,
        0,0,2855,2856,5,237,0,0,2856,2857,3,222,111,0,2857,2858,5,296,0,
        0,2858,2866,3,120,60,0,2859,2860,5,4,0,0,2860,2861,3,222,111,0,2861,
        2862,5,296,0,0,2862,2863,3,120,60,0,2863,2865,1,0,0,0,2864,2859,
        1,0,0,0,2865,2868,1,0,0,0,2866,2864,1,0,0,0,2866,2867,1,0,0,0,2867,
        2912,1,0,0,0,2868,2866,1,0,0,0,2869,2870,5,285,0,0,2870,2873,5,153,
        0,0,2871,2872,5,25,0,0,2872,2874,3,120,60,0,2873,2871,1,0,0,0,2873,
        2874,1,0,0,0,2874,2875,1,0,0,0,2875,2876,5,251,0,0,2876,2912,5,70,
        0,0,2877,2878,5,285,0,0,2878,2879,5,171,0,0,2879,2882,5,153,0,0,
        2880,2881,5,25,0,0,2881,2883,3,120,60,0,2882,2880,1,0,0,0,2882,2883,
        1,0,0,0,2883,2884,1,0,0,0,2884,2885,5,251,0,0,2885,2897,5,120,0,
        0,2886,2887,5,2,0,0,2887,2892,3,222,111,0,2888,2889,5,4,0,0,2889,
        2891,3,222,111,0,2890,2888,1,0,0,0,2891,2894,1,0,0,0,2892,2890,1,
        0,0,0,2892,2893,1,0,0,0,2893,2895,1,0,0,0,2894,2892,1,0,0,0,2895,
        2896,5,3,0,0,2896,2898,1,0,0,0,2897,2886,1,0,0,0,2897,2898,1,0,0,
        0,2898,2899,1,0,0,0,2899,2900,5,281,0,0,2900,2901,5,2,0,0,2901,2906,
        3,120,60,0,2902,2903,5,4,0,0,2903,2905,3,120,60,0,2904,2902,1,0,
        0,0,2905,2908,1,0,0,0,2906,2904,1,0,0,0,2906,2907,1,0,0,0,2907,2909,
        1,0,0,0,2908,2906,1,0,0,0,2909,2910,5,3,0,0,2910,2912,1,0,0,0,2911,
        2847,1,0,0,0,2911,2869,1,0,0,0,2911,2877,1,0,0,0,2912,179,1,0,0,
        0,2913,2919,5,188,0,0,2914,2920,3,222,111,0,2915,2916,5,2,0,0,2916,
        2917,3,52,26,0,2917,2918,5,3,0,0,2918,2920,1,0,0,0,2919,2914,1,0,
        0,0,2919,2915,1,0,0,0,2920,181,1,0,0,0,2921,2922,5,157,0,0,2922,
        2927,3,78,39,0,2923,2924,5,4,0,0,2924,2926,3,78,39,0,2925,2923,1,
        0,0,0,2926,2929,1,0,0,0,2927,2925,1,0,0,0,2927,2928,1,0,0,0,2928,
        2931,1,0,0,0,2929,2927,1,0,0,0,2930,2921,1,0,0,0,2930,2931,1,0,0,
        0,2931,2932,1,0,0,0,2932,2936,3,184,92,0,2933,2934,5,21,0,0,2934,
        2935,5,152,0,0,2935,2937,3,84,42,0,2936,2933,1,0,0,0,2936,2937,1,
        0,0,0,2937,2939,1,0,0,0,2938,2940,7,14,0,0,2939,2938,1,0,0,0,2939,
        2940,1,0,0,0,2940,2946,1,0,0,0,2941,2942,5,195,0,0,2942,2943,5,2,
        0,0,2943,2944,3,188,94,0,2944,2945,5,3,0,0,2945,2947,1,0,0,0,2946,
        2941,1,0,0,0,2946,2947,1,0,0,0,2947,2957,1,0,0,0,2948,2949,5,243,
        0,0,2949,2954,3,86,43,0,2950,2951,5,4,0,0,2951,2953,3,86,43,0,2952,
        2950,1,0,0,0,2953,2956,1,0,0,0,2954,2952,1,0,0,0,2954,2955,1,0,0,
        0,2955,2958,1,0,0,0,2956,2954,1,0,0,0,2957,2948,1,0,0,0,2957,2958,
        1,0,0,0,2958,2968,1,0,0,0,2959,2960,5,68,0,0,2960,2965,3,88,44,0,
        2961,2962,5,4,0,0,2962,2964,3,88,44,0,2963,2961,1,0,0,0,2964,2967,
        1,0,0,0,2965,2963,1,0,0,0,2965,2966,1,0,0,0,2966,2969,1,0,0,0,2967,
        2965,1,0,0,0,2968,2959,1,0,0,0,2968,2969,1,0,0,0,2969,183,1,0,0,
        0,2970,2971,5,208,0,0,2971,2995,3,186,93,0,2972,2973,5,226,0,0,2973,
        2995,3,186,93,0,2974,2975,5,109,0,0,2975,2995,3,186,93,0,2976,2977,
        5,208,0,0,2977,2978,5,33,0,0,2978,2979,3,186,93,0,2979,2980,5,25,
        0,0,2980,2981,3,186,93,0,2981,2995,1,0,0,0,2982,2983,5,226,0,0,2983,
        2984,5,33,0,0,2984,2985,3,186,93,0,2985,2986,5,25,0,0,2986,2987,
        3,186,93,0,2987,2995,1,0,0,0,2988,2989,5,109,0,0,2989,2990,5,33,
        0,0,2990,2991,3,186,93,0,2991,2992,5,25,0,0,2992,2993,3,186,93,0,
        2993,2995,1,0,0,0,2994,2970,1,0,0,0,2994,2972,1,0,0,0,2994,2974,
        1,0,0,0,2994,2976,1,0,0,0,2994,2982,1,0,0,0,2994,2988,1,0,0,0,2995,
        185,1,0,0,0,2996,2997,5,264,0,0,2997,3006,5,201,0,0,2998,2999,5,
        264,0,0,2999,3006,5,96,0,0,3000,3001,5,54,0,0,3001,3006,5,225,0,
        0,3002,3003,3,120,60,0,3003,3004,7,30,0,0,3004,3006,1,0,0,0,3005,
        2996,1,0,0,0,3005,2998,1,0,0,0,3005,3000,1,0,0,0,3005,3002,1,0,0,
        0,3006,187,1,0,0,0,3007,3008,6,94,-1,0,3008,3010,3,190,95,0,3009,
        3011,3,192,96,0,3010,3009,1,0,0,0,3010,3011,1,0,0,0,3011,3019,1,
        0,0,0,3012,3013,10,2,0,0,3013,3018,3,188,94,3,3014,3015,10,1,0,0,
        3015,3016,5,11,0,0,3016,3018,3,188,94,2,3017,3012,1,0,0,0,3017,3014,
        1,0,0,0,3018,3021,1,0,0,0,3019,3017,1,0,0,0,3019,3020,1,0,0,0,3020,
        189,1,0,0,0,3021,3019,1,0,0,0,3022,3048,3,222,111,0,3023,3024,5,
        2,0,0,3024,3048,5,3,0,0,3025,3026,5,198,0,0,3026,3027,5,2,0,0,3027,
        3032,3,188,94,0,3028,3029,5,4,0,0,3029,3031,3,188,94,0,3030,3028,
        1,0,0,0,3031,3034,1,0,0,0,3032,3030,1,0,0,0,3032,3033,1,0,0,0,3033,
        3035,1,0,0,0,3034,3032,1,0,0,0,3035,3036,5,3,0,0,3036,3048,1,0,0,
        0,3037,3038,5,2,0,0,3038,3039,3,188,94,0,3039,3040,5,3,0,0,3040,
        3048,1,0,0,0,3041,3048,5,12,0,0,3042,3048,5,13,0,0,3043,3044,5,14,
        0,0,3044,3045,3,188,94,0,3045,3046,5,15,0,0,3046,3048,1,0,0,0,3047,
        3022,1,0,0,0,3047,3023,1,0,0,0,3047,3025,1,0,0,0,3047,3037,1,0,0,
        0,3047,3041,1,0,0,0,3047,3042,1,0,0,0,3047,3043,1,0,0,0,3048,191,
        1,0,0,0,3049,3051,5,304,0,0,3050,3052,5,308,0,0,3051,3050,1,0,0,
        0,3051,3052,1,0,0,0,3052,3080,1,0,0,0,3053,3055,5,302,0,0,3054,3056,
        5,308,0,0,3055,3054,1,0,0,0,3055,3056,1,0,0,0,3056,3080,1,0,0,0,
        3057,3059,5,308,0,0,3058,3060,5,308,0,0,3059,3058,1,0,0,0,3059,3060,
        1,0,0,0,3060,3080,1,0,0,0,3061,3062,5,16,0,0,3062,3063,5,312,0,0,
        3063,3065,5,17,0,0,3064,3066,5,308,0,0,3065,3064,1,0,0,0,3065,3066,
        1,0,0,0,3066,3080,1,0,0,0,3067,3069,5,16,0,0,3068,3070,5,312,0,0,
        3069,3068,1,0,0,0,3069,3070,1,0,0,0,3070,3071,1,0,0,0,3071,3073,
        5,4,0,0,3072,3074,5,312,0,0,3073,3072,1,0,0,0,3073,3074,1,0,0,0,
        3074,3075,1,0,0,0,3075,3077,5,17,0,0,3076,3078,5,308,0,0,3077,3076,
        1,0,0,0,3077,3078,1,0,0,0,3078,3080,1,0,0,0,3079,3049,1,0,0,0,3079,
        3053,1,0,0,0,3079,3057,1,0,0,0,3079,3061,1,0,0,0,3079,3067,1,0,0,
        0,3080,193,1,0,0,0,3081,3082,3,222,111,0,3082,3083,5,296,0,0,3083,
        3084,3,120,60,0,3084,195,1,0,0,0,3085,3086,5,98,0,0,3086,3090,7,
        31,0,0,3087,3088,5,262,0,0,3088,3090,7,32,0,0,3089,3085,1,0,0,0,
        3089,3087,1,0,0,0,3090,197,1,0,0,0,3091,3092,5,127,0,0,3092,3093,
        5,143,0,0,3093,3097,3,200,100,0,3094,3095,5,209,0,0,3095,3097,7,
        33,0,0,3096,3091,1,0,0,0,3096,3094,1,0,0,0,3097,199,1,0,0,0,3098,
        3099,5,209,0,0,3099,3106,5,265,0,0,3100,3101,5,209,0,0,3101,3106,
        5,46,0,0,3102,3103,5,213,0,0,3103,3106,5,209,0,0,3104,3106,5,235,
        0,0,3105,3098,1,0,0,0,3105,3100,1,0,0,0,3105,3102,1,0,0,0,3105,3104,
        1,0,0,0,3106,201,1,0,0,0,3107,3113,3,120,60,0,3108,3109,3,222,111,
        0,3109,3110,5,6,0,0,3110,3111,3,120,60,0,3111,3113,1,0,0,0,3112,
        3107,1,0,0,0,3112,3108,1,0,0,0,3113,203,1,0,0,0,3114,3115,3,222,
        111,0,3115,3116,5,1,0,0,3116,3117,3,222,111,0,3117,3120,1,0,0,0,
        3118,3120,3,222,111,0,3119,3114,1,0,0,0,3119,3118,1,0,0,0,3120,205,
        1,0,0,0,3121,3126,3,204,102,0,3122,3123,5,4,0,0,3123,3125,3,204,
        102,0,3124,3122,1,0,0,0,3125,3128,1,0,0,0,3126,3124,1,0,0,0,3126,
        3127,1,0,0,0,3127,207,1,0,0,0,3128,3126,1,0,0,0,3129,3130,7,34,0,
        0,3130,209,1,0,0,0,3131,3136,3,222,111,0,3132,3133,5,1,0,0,3133,
        3135,3,222,111,0,3134,3132,1,0,0,0,3135,3138,1,0,0,0,3136,3134,1,
        0,0,0,3136,3137,1,0,0,0,3137,211,1,0,0,0,3138,3136,1,0,0,0,3139,
        3140,5,97,0,0,3140,3141,3,214,107,0,3141,3142,5,28,0,0,3142,3143,
        5,176,0,0,3143,3144,3,126,63,0,3144,213,1,0,0,0,3145,3146,7,35,0,
        0,3146,215,1,0,0,0,3147,3151,3,218,109,0,3148,3151,5,62,0,0,3149,
        3151,5,58,0,0,3150,3147,1,0,0,0,3150,3148,1,0,0,0,3150,3149,1,0,
        0,0,3151,217,1,0,0,0,3152,3158,3,222,111,0,3153,3154,5,274,0,0,3154,
        3158,3,222,111,0,3155,3156,5,221,0,0,3156,3158,3,222,111,0,3157,
        3152,1,0,0,0,3157,3153,1,0,0,0,3157,3155,1,0,0,0,3158,219,1,0,0,
        0,3159,3164,3,222,111,0,3160,3161,5,4,0,0,3161,3163,3,222,111,0,
        3162,3160,1,0,0,0,3163,3166,1,0,0,0,3164,3162,1,0,0,0,3164,3165,
        1,0,0,0,3165,221,1,0,0,0,3166,3164,1,0,0,0,3167,3173,5,315,0,0,3168,
        3173,5,317,0,0,3169,3173,3,228,114,0,3170,3173,5,318,0,0,3171,3173,
        5,316,0,0,3172,3167,1,0,0,0,3172,3168,1,0,0,0,3172,3169,1,0,0,0,
        3172,3170,1,0,0,0,3172,3171,1,0,0,0,3173,223,1,0,0,0,3174,3176,5,
        303,0,0,3175,3174,1,0,0,0,3175,3176,1,0,0,0,3176,3177,1,0,0,0,3177,
        3187,5,313,0,0,3178,3180,5,303,0,0,3179,3178,1,0,0,0,3179,3180,1,
        0,0,0,3180,3181,1,0,0,0,3181,3187,5,314,0,0,3182,3184,5,303,0,0,
        3183,3182,1,0,0,0,3183,3184,1,0,0,0,3184,3185,1,0,0,0,3185,3187,
        5,312,0,0,3186,3175,1,0,0,0,3186,3179,1,0,0,0,3186,3183,1,0,0,0,
        3187,225,1,0,0,0,3188,3191,3,222,111,0,3189,3191,3,152,76,0,3190,
        3188,1,0,0,0,3190,3189,1,0,0,0,3191,227,1,0,0,0,3192,3193,7,36,0,
        0,3193,229,1,0,0,0,429,258,265,269,273,279,283,290,295,299,305,309,
        328,334,338,342,346,354,358,361,366,372,381,387,391,397,404,413,
        425,434,443,449,460,468,476,483,493,500,508,544,547,550,554,560,
        565,572,578,582,586,594,600,604,618,626,645,670,673,683,687,694,
        704,710,715,719,725,734,740,744,751,755,763,768,772,780,788,793,
        797,807,814,819,823,833,836,845,850,856,880,886,888,894,900,902,
        910,912,918,924,926,941,946,953,965,967,975,977,1002,1005,1009,1013,
        1031,1034,1045,1048,1064,1074,1079,1085,1088,1097,1099,1102,1108,
        1115,1120,1126,1130,1134,1140,1151,1160,1170,1173,1178,1180,1187,
        1193,1195,1199,1209,1215,1218,1220,1232,1239,1243,1247,1251,1258,
        1267,1270,1274,1279,1283,1291,1294,1297,1304,1315,1318,1328,1331,
        1342,1347,1355,1358,1362,1371,1380,1383,1392,1395,1398,1402,1413,
        1416,1423,1426,1445,1449,1453,1457,1461,1465,1467,1478,1483,1492,
        1501,1504,1510,1522,1525,1534,1537,1545,1548,1551,1556,1559,1571,
        1574,1582,1587,1591,1593,1595,1610,1612,1623,1644,1654,1665,1669,
        1671,1679,1686,1699,1705,1731,1746,1751,1755,1765,1771,1777,1785,
        1790,1797,1799,1805,1811,1815,1820,1829,1834,1848,1858,1861,1870,
        1875,1880,1882,1891,1894,1902,1905,1912,1917,1928,1931,1935,1937,
        1945,1955,1961,1963,1970,1974,1976,1983,1987,1989,1991,2000,2011,
        2015,2025,2035,2039,2047,2049,2062,2070,2079,2085,2093,2099,2103,
        2108,2113,2119,2133,2135,2165,2176,2184,2189,2194,2207,2213,2220,
        2225,2228,2231,2236,2243,2246,2255,2258,2262,2265,2268,2283,2286,
        2305,2309,2317,2321,2346,2349,2358,2364,2370,2376,2385,2388,2391,
        2410,2419,2441,2444,2454,2463,2469,2475,2486,2488,2493,2500,2502,
        2508,2514,2525,2534,2539,2544,2546,2548,2554,2556,2566,2575,2577,
        2583,2585,2588,2598,2600,2608,2616,2619,2624,2629,2641,2645,2649,
        2652,2654,2662,2665,2675,2683,2689,2691,2699,2709,2715,2729,2738,
        2745,2750,2757,2767,2772,2779,2805,2810,2812,2819,2823,2830,2834,
        2851,2866,2873,2882,2892,2897,2906,2911,2919,2927,2930,2936,2939,
        2946,2954,2957,2965,2968,2994,3005,3010,3017,3019,3032,3047,3051,
        3055,3059,3065,3069,3073,3077,3079,3089,3096,3105,3112,3119,3126,
        3136,3150,3157,3164,3172,3175,3179,3183,3186,3190
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!SqlBaseParser.__ATN) {
            SqlBaseParser.__ATN = new antlr.ATNDeserializer().deserialize(SqlBaseParser._serializedATN);
        }

        return SqlBaseParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(SqlBaseParser.literalNames, SqlBaseParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return SqlBaseParser.vocabulary;
    }

    private static readonly decisionsToDFA = SqlBaseParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class SingleStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.EOF, 0)!;
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_singleStatement;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSingleStatement) {
             listener.enterSingleStatement(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSingleStatement) {
             listener.exitSingleStatement(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSingleStatement) {
            return visitor.visitSingleStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StandaloneExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.EOF, 0)!;
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_standaloneExpression;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterStandaloneExpression) {
             listener.enterStandaloneExpression(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitStandaloneExpression) {
             listener.exitStandaloneExpression(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitStandaloneExpression) {
            return visitor.visitStandaloneExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StandalonePathSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pathSpecification(): PathSpecificationContext {
        return this.getRuleContext(0, PathSpecificationContext)!;
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.EOF, 0)!;
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_standalonePathSpecification;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterStandalonePathSpecification) {
             listener.enterStandalonePathSpecification(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitStandalonePathSpecification) {
             listener.exitStandalonePathSpecification(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitStandalonePathSpecification) {
            return visitor.visitStandalonePathSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StandaloneTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.EOF, 0)!;
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_standaloneType;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterStandaloneType) {
             listener.enterStandaloneType(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitStandaloneType) {
             listener.exitStandaloneType(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitStandaloneType) {
            return visitor.visitStandaloneType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StandaloneRowPatternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rowPattern(): RowPatternContext {
        return this.getRuleContext(0, RowPatternContext)!;
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.EOF, 0)!;
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_standaloneRowPattern;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterStandaloneRowPattern) {
             listener.enterStandaloneRowPattern(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitStandaloneRowPattern) {
             listener.exitStandaloneRowPattern(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitStandaloneRowPattern) {
            return visitor.visitStandaloneRowPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_statement;
    }
    public override copyFrom(ctx: StatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ExplainContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.EXPLAIN, 0)!;
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public explainOption(): ExplainOptionContext[];
    public explainOption(i: number): ExplainOptionContext | null;
    public explainOption(i?: number): ExplainOptionContext[] | ExplainOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExplainOptionContext);
        }

        return this.getRuleContext(i, ExplainOptionContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterExplain) {
             listener.enterExplain(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitExplain) {
             listener.exitExplain(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitExplain) {
            return visitor.visitExplain(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PrepareContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PREPARE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.PREPARE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.FROM, 0)!;
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterPrepare) {
             listener.enterPrepare(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitPrepare) {
             listener.exitPrepare(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitPrepare) {
            return visitor.visitPrepare(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropMaterializedViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.DROP, 0)!;
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.VIEW, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EXISTS, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterDropMaterializedView) {
             listener.enterDropMaterializedView(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitDropMaterializedView) {
             listener.exitDropMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitDropMaterializedView) {
            return visitor.visitDropMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetMaterializedViewPropertiesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ALTER, 0)!;
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.VIEW, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SET, 0)!;
    }
    public PROPERTIES(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.PROPERTIES, 0)!;
    }
    public propertyAssignments(): PropertyAssignmentsContext {
        return this.getRuleContext(0, PropertyAssignmentsContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSetMaterializedViewProperties) {
             listener.enterSetMaterializedViewProperties(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSetMaterializedViewProperties) {
             listener.exitSetMaterializedViewProperties(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSetMaterializedViewProperties) {
            return visitor.visitSetMaterializedViewProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UseContext extends StatementContext {
    public _schema?: IdentifierContext;
    public _catalog?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public USE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.USE, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterUse) {
             listener.enterUse(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitUse) {
             listener.exitUse(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitUse) {
            return visitor.visitUse(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DeallocateContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DEALLOCATE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.DEALLOCATE, 0)!;
    }
    public PREPARE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.PREPARE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterDeallocate) {
             listener.enterDeallocate(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitDeallocate) {
             listener.exitDeallocate(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitDeallocate) {
            return visitor.visitDeallocate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameTableContext extends StatementContext {
    public _from_?: QualifiedNameContext;
    public _to?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TABLE, 0)!;
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.RENAME, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TO, 0)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EXISTS, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterRenameTable) {
             listener.enterRenameTable(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitRenameTable) {
             listener.exitRenameTable(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitRenameTable) {
            return visitor.visitRenameTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommitContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMIT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.COMMIT, 0)!;
    }
    public WORK(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WORK, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterCommit) {
             listener.enterCommit(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitCommit) {
             listener.exitCommit(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitCommit) {
            return visitor.visitCommit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateRoleContext extends StatementContext {
    public _name?: IdentifierContext;
    public _catalog?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CREATE, 0)!;
    }
    public ROLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ROLE, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WITH, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ADMIN, 0);
    }
    public grantor(): GrantorContext | null {
        return this.getRuleContext(0, GrantorContext);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IN, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterCreateRole) {
             listener.enterCreateRole(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitCreateRole) {
             listener.exitCreateRole(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitCreateRole) {
            return visitor.visitCreateRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropColumnContext extends StatementContext {
    public _tableName?: QualifiedNameContext;
    public _column?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TABLE, 0)!;
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.DROP, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.COLUMN, 0)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public IF(): antlr.TerminalNode[];
    public IF(i: number): antlr.TerminalNode | null;
    public IF(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.IF);
    	} else {
    		return this.getToken(SqlBaseParser.IF, i);
    	}
    }
    public EXISTS(): antlr.TerminalNode[];
    public EXISTS(i: number): antlr.TerminalNode | null;
    public EXISTS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.EXISTS);
    	} else {
    		return this.getToken(SqlBaseParser.EXISTS, i);
    	}
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterDropColumn) {
             listener.enterDropColumn(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitDropColumn) {
             listener.exitDropColumn(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitDropColumn) {
            return visitor.visitDropColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.DROP, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.VIEW, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EXISTS, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterDropView) {
             listener.enterDropView(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitDropView) {
             listener.exitDropView(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitDropView) {
            return visitor.visitDropView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTablesContext extends StatementContext {
    public _pattern?: StringContext;
    public _escape?: StringContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SHOW, 0)!;
    }
    public TABLES(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TABLES, 0)!;
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.LIKE, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IN, 0);
    }
    public string_(): StringContext[];
    public string_(i: number): StringContext | null;
    public string_(i?: number): StringContext[] | StringContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringContext);
        }

        return this.getRuleContext(i, StringContext);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ESCAPE, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterShowTables) {
             listener.enterShowTables(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitShowTables) {
             listener.exitShowTables(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitShowTables) {
            return visitor.visitShowTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetViewAuthorizationContext extends StatementContext {
    public _from_?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ALTER, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.VIEW, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SET, 0)!;
    }
    public AUTHORIZATION(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.AUTHORIZATION, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSetViewAuthorization) {
             listener.enterSetViewAuthorization(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSetViewAuthorization) {
             listener.exitSetViewAuthorization(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSetViewAuthorization) {
            return visitor.visitSetViewAuthorization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCatalogsContext extends StatementContext {
    public _pattern?: StringContext;
    public _escape?: StringContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SHOW, 0)!;
    }
    public CATALOGS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CATALOGS, 0)!;
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.LIKE, 0);
    }
    public string_(): StringContext[];
    public string_(i: number): StringContext | null;
    public string_(i?: number): StringContext[] | StringContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringContext);
        }

        return this.getRuleContext(i, StringContext);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ESCAPE, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterShowCatalogs) {
             listener.enterShowCatalogs(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitShowCatalogs) {
             listener.exitShowCatalogs(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitShowCatalogs) {
            return visitor.visitShowCatalogs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowRolesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SHOW, 0)!;
    }
    public ROLES(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ROLES, 0)!;
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.CURRENT, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IN, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterShowRoles) {
             listener.enterShowRoles(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitShowRoles) {
             listener.exitShowRoles(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitShowRoles) {
            return visitor.visitShowRoles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MergeContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MERGE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.MERGE, 0)!;
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.INTO, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.USING, 0)!;
    }
    public relation(): RelationContext {
        return this.getRuleContext(0, RelationContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ON, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public mergeCase(): MergeCaseContext[];
    public mergeCase(i: number): MergeCaseContext | null;
    public mergeCase(i?: number): MergeCaseContext[] | MergeCaseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MergeCaseContext);
        }

        return this.getRuleContext(i, MergeCaseContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.AS, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterMerge) {
             listener.enterMerge(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitMerge) {
             listener.exitMerge(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitMerge) {
            return visitor.visitMerge(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameColumnContext extends StatementContext {
    public _tableName?: QualifiedNameContext;
    public _from_?: QualifiedNameContext;
    public _to?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TABLE, 0)!;
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.RENAME, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.COLUMN, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TO, 0)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public IF(): antlr.TerminalNode[];
    public IF(i: number): antlr.TerminalNode | null;
    public IF(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.IF);
    	} else {
    		return this.getToken(SqlBaseParser.IF, i);
    	}
    }
    public EXISTS(): antlr.TerminalNode[];
    public EXISTS(i: number): antlr.TerminalNode | null;
    public EXISTS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.EXISTS);
    	} else {
    		return this.getToken(SqlBaseParser.EXISTS, i);
    	}
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterRenameColumn) {
             listener.enterRenameColumn(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitRenameColumn) {
             listener.exitRenameColumn(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitRenameColumn) {
            return visitor.visitRenameColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommentColumnContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMENT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.COMMENT, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ON, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.COLUMN, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.IS, 0)!;
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NULL, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterCommentColumn) {
             listener.enterCommentColumn(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitCommentColumn) {
             listener.exitCommentColumn(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitCommentColumn) {
            return visitor.visitCommentColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RevokeRolesContext extends StatementContext {
    public _catalog?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REVOKE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.REVOKE, 0)!;
    }
    public roles(): RolesContext {
        return this.getRuleContext(0, RolesContext)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.FROM, 0)!;
    }
    public principal(): PrincipalContext[];
    public principal(i: number): PrincipalContext | null;
    public principal(i?: number): PrincipalContext[] | PrincipalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrincipalContext);
        }

        return this.getRuleContext(i, PrincipalContext);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ADMIN, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.OPTION, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FOR, 0);
    }
    public GRANTED(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.GRANTED, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.BY, 0);
    }
    public grantor(): GrantorContext | null {
        return this.getRuleContext(0, GrantorContext);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IN, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterRevokeRoles) {
             listener.enterRevokeRoles(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitRevokeRoles) {
             listener.exitRevokeRoles(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitRevokeRoles) {
            return visitor.visitRevokeRoles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CREATE, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TABLE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterShowCreateTable) {
             listener.enterShowCreateTable(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitShowCreateTable) {
             listener.exitShowCreateTable(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitShowCreateTable) {
            return visitor.visitShowCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowColumnsContext extends StatementContext {
    public _pattern?: StringContext;
    public _escape?: StringContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SHOW, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.COLUMNS, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IN, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.LIKE, 0);
    }
    public string_(): StringContext[];
    public string_(i: number): StringContext | null;
    public string_(i?: number): StringContext[] | StringContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringContext);
        }

        return this.getRuleContext(i, StringContext);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ESCAPE, 0);
    }
    public DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.DESCRIBE, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.DESC, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterShowColumns) {
             listener.enterShowColumns(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitShowColumns) {
             listener.exitShowColumns(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitShowColumns) {
            return visitor.visitShowColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowRoleGrantsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SHOW, 0)!;
    }
    public ROLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ROLE, 0)!;
    }
    public GRANTS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.GRANTS, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IN, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterShowRoleGrants) {
             listener.enterShowRoleGrants(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitShowRoleGrants) {
             listener.exitShowRoleGrants(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitShowRoleGrants) {
            return visitor.visitShowRoleGrants(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AddColumnContext extends StatementContext {
    public _tableName?: QualifiedNameContext;
    public _column?: ColumnDefinitionContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TABLE, 0)!;
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ADD, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.COLUMN, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public columnDefinition(): ColumnDefinitionContext {
        return this.getRuleContext(0, ColumnDefinitionContext)!;
    }
    public IF(): antlr.TerminalNode[];
    public IF(i: number): antlr.TerminalNode | null;
    public IF(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.IF);
    	} else {
    		return this.getToken(SqlBaseParser.IF, i);
    	}
    }
    public EXISTS(): antlr.TerminalNode[];
    public EXISTS(i: number): antlr.TerminalNode | null;
    public EXISTS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.EXISTS);
    	} else {
    		return this.getToken(SqlBaseParser.EXISTS, i);
    	}
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NOT, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterAddColumn) {
             listener.enterAddColumn(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitAddColumn) {
             listener.exitAddColumn(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitAddColumn) {
            return visitor.visitAddColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DenyContext extends StatementContext {
    public _grantee?: PrincipalContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DENY(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.DENY, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ON, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TO, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public privilege(): PrivilegeContext[];
    public privilege(i: number): PrivilegeContext | null;
    public privilege(i?: number): PrivilegeContext[] | PrivilegeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeContext);
        }

        return this.getRuleContext(i, PrivilegeContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ALL, 0);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PRIVILEGES, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SCHEMA, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TABLE, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterDeny) {
             listener.enterDeny(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitDeny) {
             listener.exitDeny(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitDeny) {
            return visitor.visitDeny(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ResetSessionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RESET(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.RESET, 0)!;
    }
    public SESSION(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SESSION, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterResetSession) {
             listener.enterResetSession(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitResetSession) {
             listener.exitResetSession(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitResetSession) {
            return visitor.visitResetSession(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InsertIntoContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INSERT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.INSERT, 0)!;
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.INTO, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterInsertInto) {
             listener.enterInsertInto(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitInsertInto) {
             listener.exitInsertInto(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitInsertInto) {
            return visitor.visitInsertInto(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowSessionContext extends StatementContext {
    public _pattern?: StringContext;
    public _escape?: StringContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SHOW, 0)!;
    }
    public SESSION(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SESSION, 0)!;
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.LIKE, 0);
    }
    public string_(): StringContext[];
    public string_(i: number): StringContext | null;
    public string_(i?: number): StringContext[] | StringContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringContext);
        }

        return this.getRuleContext(i, StringContext);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ESCAPE, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterShowSession) {
             listener.enterShowSession(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitShowSession) {
             listener.exitShowSession(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitShowSession) {
            return visitor.visitShowSession(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateSchemaContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CREATE, 0)!;
    }
    public SCHEMA(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SCHEMA, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EXISTS, 0);
    }
    public AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.AUTHORIZATION, 0);
    }
    public principal(): PrincipalContext | null {
        return this.getRuleContext(0, PrincipalContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WITH, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterCreateSchema) {
             listener.enterCreateSchema(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitCreateSchema) {
             listener.exitCreateSchema(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitCreateSchema) {
            return visitor.visitCreateSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetSessionAuthorizationContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SET, 0)!;
    }
    public SESSION(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SESSION, 0)!;
    }
    public AUTHORIZATION(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.AUTHORIZATION, 0)!;
    }
    public authorizationUser(): AuthorizationUserContext {
        return this.getRuleContext(0, AuthorizationUserContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSetSessionAuthorization) {
             listener.enterSetSessionAuthorization(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSetSessionAuthorization) {
             listener.exitSetSessionAuthorization(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSetSessionAuthorization) {
            return visitor.visitSetSessionAuthorization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainAnalyzeContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.EXPLAIN, 0)!;
    }
    public ANALYZE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ANALYZE, 0)!;
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public VERBOSE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.VERBOSE, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterExplainAnalyze) {
             listener.enterExplainAnalyze(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitExplainAnalyze) {
             listener.exitExplainAnalyze(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitExplainAnalyze) {
            return visitor.visitExplainAnalyze(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExecuteContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXECUTE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.EXECUTE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.USING, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterExecute) {
             listener.enterExecute(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitExecute) {
             listener.exitExecute(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitExecute) {
            return visitor.visitExecute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameSchemaContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ALTER, 0)!;
    }
    public SCHEMA(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SCHEMA, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.RENAME, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TO, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterRenameSchema) {
             listener.enterRenameSchema(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitRenameSchema) {
             listener.exitRenameSchema(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitRenameSchema) {
            return visitor.visitRenameSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropRoleContext extends StatementContext {
    public _name?: IdentifierContext;
    public _catalog?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.DROP, 0)!;
    }
    public ROLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ROLE, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IN, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterDropRole) {
             listener.enterDropRole(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitDropRole) {
             listener.exitDropRole(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitDropRole) {
            return visitor.visitDropRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AnalyzeContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ANALYZE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ANALYZE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WITH, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterAnalyze) {
             listener.enterAnalyze(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitAnalyze) {
             listener.exitAnalyze(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitAnalyze) {
            return visitor.visitAnalyze(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetRoleContext extends StatementContext {
    public _role?: IdentifierContext;
    public _catalog?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SET, 0)!;
    }
    public ROLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ROLE, 0)!;
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ALL, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NONE, 0);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IN, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSetRole) {
             listener.enterSetRole(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSetRole) {
             listener.exitSetRole(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSetRole) {
            return visitor.visitSetRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropCatalogContext extends StatementContext {
    public _catalog?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.DROP, 0)!;
    }
    public CATALOG(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CATALOG, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EXISTS, 0);
    }
    public CASCADE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.CASCADE, 0);
    }
    public RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.RESTRICT, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterDropCatalog) {
             listener.enterDropCatalog(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitDropCatalog) {
             listener.exitDropCatalog(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitDropCatalog) {
            return visitor.visitDropCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowGrantsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SHOW, 0)!;
    }
    public GRANTS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.GRANTS, 0)!;
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ON, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TABLE, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterShowGrants) {
             listener.enterShowGrants(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitShowGrants) {
             listener.exitShowGrants(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitShowGrants) {
            return visitor.visitShowGrants(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropSchemaContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.DROP, 0)!;
    }
    public SCHEMA(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SCHEMA, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EXISTS, 0);
    }
    public CASCADE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.CASCADE, 0);
    }
    public RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.RESTRICT, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterDropSchema) {
             listener.enterDropSchema(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitDropSchema) {
             listener.exitDropSchema(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitDropSchema) {
            return visitor.visitDropSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ResetSessionAuthorizationContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RESET(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.RESET, 0)!;
    }
    public SESSION(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SESSION, 0)!;
    }
    public AUTHORIZATION(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.AUTHORIZATION, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterResetSessionAuthorization) {
             listener.enterResetSessionAuthorization(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitResetSessionAuthorization) {
             listener.exitResetSessionAuthorization(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitResetSessionAuthorization) {
            return visitor.visitResetSessionAuthorization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTableAuthorizationContext extends StatementContext {
    public _tableName?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TABLE, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SET, 0)!;
    }
    public AUTHORIZATION(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.AUTHORIZATION, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSetTableAuthorization) {
             listener.enterSetTableAuthorization(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSetTableAuthorization) {
             listener.exitSetTableAuthorization(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSetTableAuthorization) {
            return visitor.visitSetTableAuthorization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CREATE, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.VIEW, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterShowCreateView) {
             listener.enterShowCreateView(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitShowCreateView) {
             listener.exitShowCreateView(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitShowCreateView) {
            return visitor.visitShowCreateView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CREATE, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TABLE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public tableElement(): TableElementContext[];
    public tableElement(i: number): TableElementContext | null;
    public tableElement(i?: number): TableElementContext[] | TableElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableElementContext);
        }

        return this.getRuleContext(i, TableElementContext);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.REPLACE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EXISTS, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.COMMENT, 0);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WITH, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterCreateTable) {
             listener.enterCreateTable(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitCreateTable) {
             listener.exitCreateTable(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitCreateTable) {
            return visitor.visitCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StartTransactionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public START(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.START, 0)!;
    }
    public TRANSACTION(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TRANSACTION, 0)!;
    }
    public transactionMode(): TransactionModeContext[];
    public transactionMode(i: number): TransactionModeContext | null;
    public transactionMode(i?: number): TransactionModeContext[] | TransactionModeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TransactionModeContext);
        }

        return this.getRuleContext(i, TransactionModeContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterStartTransaction) {
             listener.enterStartTransaction(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitStartTransaction) {
             listener.exitStartTransaction(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitStartTransaction) {
            return visitor.visitStartTransaction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateTableAsSelectContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CREATE, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TABLE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.AS, 0)!;
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.REPLACE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EXISTS, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.COMMENT, 0);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public WITH(): antlr.TerminalNode[];
    public WITH(i: number): antlr.TerminalNode | null;
    public WITH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.WITH);
    	} else {
    		return this.getToken(SqlBaseParser.WITH, i);
    	}
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public DATA(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.DATA, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NO, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterCreateTableAsSelect) {
             listener.enterCreateTableAsSelect(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitCreateTableAsSelect) {
             listener.exitCreateTableAsSelect(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitCreateTableAsSelect) {
            return visitor.visitCreateTableAsSelect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommentViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMENT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.COMMENT, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ON, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.VIEW, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.IS, 0)!;
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NULL, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterCommentView) {
             listener.enterCommentView(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitCommentView) {
             listener.exitCommentView(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitCommentView) {
            return visitor.visitCommentView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowStatsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SHOW, 0)!;
    }
    public STATS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.STATS, 0)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.FOR, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterShowStats) {
             listener.enterShowStats(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitShowStats) {
             listener.exitShowStats(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitShowStats) {
            return visitor.visitShowStats(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateSchemaContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CREATE, 0)!;
    }
    public SCHEMA(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SCHEMA, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterShowCreateSchema) {
             listener.enterShowCreateSchema(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitShowCreateSchema) {
             listener.exitShowCreateSchema(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitShowCreateSchema) {
            return visitor.visitShowCreateSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RevokeContext extends StatementContext {
    public _grantee?: PrincipalContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REVOKE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.REVOKE, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ON, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.FROM, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public privilege(): PrivilegeContext[];
    public privilege(i: number): PrivilegeContext | null;
    public privilege(i?: number): PrivilegeContext[] | PrivilegeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeContext);
        }

        return this.getRuleContext(i, PrivilegeContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ALL, 0);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PRIVILEGES, 0);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.GRANT, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.OPTION, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FOR, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SCHEMA, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TABLE, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterRevoke) {
             listener.enterRevoke(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitRevoke) {
             listener.exitRevoke(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitRevoke) {
            return visitor.visitRevoke(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UpdateContext extends StatementContext {
    public _where?: BooleanExpressionContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UPDATE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.UPDATE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SET, 0)!;
    }
    public updateAssignment(): UpdateAssignmentContext[];
    public updateAssignment(i: number): UpdateAssignmentContext | null;
    public updateAssignment(i?: number): UpdateAssignmentContext[] | UpdateAssignmentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UpdateAssignmentContext);
        }

        return this.getRuleContext(i, UpdateAssignmentContext);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WHERE, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterUpdate) {
             listener.enterUpdate(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitUpdate) {
             listener.exitUpdate(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitUpdate) {
            return visitor.visitUpdate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableExecuteContext extends StatementContext {
    public _tableName?: QualifiedNameContext;
    public _procedureName?: IdentifierContext;
    public _where?: BooleanExpressionContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TABLE, 0)!;
    }
    public EXECUTE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.EXECUTE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WHERE, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public callArgument(): CallArgumentContext[];
    public callArgument(i: number): CallArgumentContext | null;
    public callArgument(i?: number): CallArgumentContext[] | CallArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CallArgumentContext);
        }

        return this.getRuleContext(i, CallArgumentContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterTableExecute) {
             listener.enterTableExecute(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitTableExecute) {
             listener.exitTableExecute(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitTableExecute) {
            return visitor.visitTableExecute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DeleteContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DELETE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.DELETE, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.FROM, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WHERE, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterDelete) {
             listener.enterDelete(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitDelete) {
             listener.exitDelete(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitDelete) {
            return visitor.visitDelete(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DescribeInputContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DESCRIBE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.DESCRIBE, 0)!;
    }
    public INPUT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.INPUT, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterDescribeInput) {
             listener.enterDescribeInput(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitDescribeInput) {
             listener.exitDescribeInput(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitDescribeInput) {
            return visitor.visitDescribeInput(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowStatsForQueryContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SHOW, 0)!;
    }
    public STATS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.STATS, 0)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.FOR, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterShowStatsForQuery) {
             listener.enterShowStatsForQuery(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitShowStatsForQuery) {
             listener.exitShowStatsForQuery(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitShowStatsForQuery) {
            return visitor.visitShowStatsForQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetColumnTypeContext extends StatementContext {
    public _tableName?: QualifiedNameContext;
    public _columnName?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode[];
    public ALTER(i: number): antlr.TerminalNode | null;
    public ALTER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.ALTER);
    	} else {
    		return this.getToken(SqlBaseParser.ALTER, i);
    	}
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TABLE, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.COLUMN, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SET, 0)!;
    }
    public DATA(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.DATA, 0)!;
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TYPE, 0)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EXISTS, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSetColumnType) {
             listener.enterSetColumnType(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSetColumnType) {
             listener.exitSetColumnType(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSetColumnType) {
            return visitor.visitSetColumnType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StatementDefaultContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterStatementDefault) {
             listener.enterStatementDefault(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitStatementDefault) {
             listener.exitStatementDefault(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitStatementDefault) {
            return visitor.visitStatementDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTimeZoneContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SET, 0)!;
    }
    public TIME(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TIME, 0)!;
    }
    public ZONE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ZONE, 0)!;
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.LOCAL, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSetTimeZone) {
             listener.enterSetTimeZone(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSetTimeZone) {
             listener.exitSetTimeZone(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSetTimeZone) {
            return visitor.visitSetTimeZone(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TruncateTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TRUNCATE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TRUNCATE, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TABLE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterTruncateTable) {
             listener.enterTruncateTable(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitTruncateTable) {
             listener.exitTruncateTable(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitTruncateTable) {
            return visitor.visitTruncateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateMaterializedViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CREATE, 0)!;
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.VIEW, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.AS, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.REPLACE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EXISTS, 0);
    }
    public GRACE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.GRACE, 0);
    }
    public PERIOD(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PERIOD, 0);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(0, IntervalContext);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.COMMENT, 0);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WITH, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterCreateMaterializedView) {
             listener.enterCreateMaterializedView(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitCreateMaterializedView) {
             listener.exitCreateMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitCreateMaterializedView) {
            return visitor.visitCreateMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetSessionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SET, 0)!;
    }
    public SESSION(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SESSION, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.EQ, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSetSession) {
             listener.enterSetSession(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSetSession) {
             listener.exitSetSession(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSetSession) {
            return visitor.visitSetSession(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CREATE, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.VIEW, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.AS, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.REPLACE, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.COMMENT, 0);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public SECURITY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SECURITY, 0);
    }
    public DEFINER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.DEFINER, 0);
    }
    public INVOKER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.INVOKER, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterCreateView) {
             listener.enterCreateView(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitCreateView) {
             listener.exitCreateView(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitCreateView) {
            return visitor.visitCreateView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameMaterializedViewContext extends StatementContext {
    public _from_?: QualifiedNameContext;
    public _to?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ALTER, 0)!;
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.VIEW, 0)!;
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.RENAME, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TO, 0)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EXISTS, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterRenameMaterializedView) {
             listener.enterRenameMaterializedView(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitRenameMaterializedView) {
             listener.exitRenameMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitRenameMaterializedView) {
            return visitor.visitRenameMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowSchemasContext extends StatementContext {
    public _pattern?: StringContext;
    public _escape?: StringContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SHOW, 0)!;
    }
    public SCHEMAS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SCHEMAS, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.LIKE, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IN, 0);
    }
    public string_(): StringContext[];
    public string_(i: number): StringContext | null;
    public string_(i?: number): StringContext[] | StringContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringContext);
        }

        return this.getRuleContext(i, StringContext);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ESCAPE, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterShowSchemas) {
             listener.enterShowSchemas(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitShowSchemas) {
             listener.exitShowSchemas(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitShowSchemas) {
            return visitor.visitShowSchemas(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.DROP, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TABLE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EXISTS, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterDropTable) {
             listener.enterDropTable(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitDropTable) {
             listener.exitDropTable(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitDropTable) {
            return visitor.visitDropTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetSchemaAuthorizationContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ALTER, 0)!;
    }
    public SCHEMA(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SCHEMA, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SET, 0)!;
    }
    public AUTHORIZATION(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.AUTHORIZATION, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSetSchemaAuthorization) {
             listener.enterSetSchemaAuthorization(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSetSchemaAuthorization) {
             listener.exitSetSchemaAuthorization(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSetSchemaAuthorization) {
            return visitor.visitSetSchemaAuthorization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RollbackContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ROLLBACK(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ROLLBACK, 0)!;
    }
    public WORK(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WORK, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterRollback) {
             listener.enterRollback(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitRollback) {
             listener.exitRollback(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitRollback) {
            return visitor.visitRollback(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommentTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMENT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.COMMENT, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ON, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TABLE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.IS, 0)!;
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NULL, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterCommentTable) {
             listener.enterCommentTable(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitCommentTable) {
             listener.exitCommentTable(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitCommentTable) {
            return visitor.visitCommentTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExecuteImmediateContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXECUTE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.EXECUTE, 0)!;
    }
    public IMMEDIATE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.IMMEDIATE, 0)!;
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.USING, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterExecuteImmediate) {
             listener.enterExecuteImmediate(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitExecuteImmediate) {
             listener.exitExecuteImmediate(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitExecuteImmediate) {
            return visitor.visitExecuteImmediate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameViewContext extends StatementContext {
    public _from_?: QualifiedNameContext;
    public _to?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ALTER, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.VIEW, 0)!;
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.RENAME, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TO, 0)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterRenameView) {
             listener.enterRenameView(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitRenameView) {
             listener.exitRenameView(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitRenameView) {
            return visitor.visitRenameView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetPathContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SET, 0)!;
    }
    public PATH(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.PATH, 0)!;
    }
    public pathSpecification(): PathSpecificationContext {
        return this.getRuleContext(0, PathSpecificationContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSetPath) {
             listener.enterSetPath(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSetPath) {
             listener.exitSetPath(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSetPath) {
            return visitor.visitSetPath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GrantRolesContext extends StatementContext {
    public _catalog?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public GRANT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.GRANT, 0)!;
    }
    public roles(): RolesContext {
        return this.getRuleContext(0, RolesContext)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TO, 0)!;
    }
    public principal(): PrincipalContext[];
    public principal(i: number): PrincipalContext | null;
    public principal(i?: number): PrincipalContext[] | PrincipalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrincipalContext);
        }

        return this.getRuleContext(i, PrincipalContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WITH, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ADMIN, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.OPTION, 0);
    }
    public GRANTED(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.GRANTED, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.BY, 0);
    }
    public grantor(): GrantorContext | null {
        return this.getRuleContext(0, GrantorContext);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IN, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterGrantRoles) {
             listener.enterGrantRoles(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitGrantRoles) {
             listener.exitGrantRoles(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitGrantRoles) {
            return visitor.visitGrantRoles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CallContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CALL(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CALL, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public callArgument(): CallArgumentContext[];
    public callArgument(i: number): CallArgumentContext | null;
    public callArgument(i?: number): CallArgumentContext[] | CallArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CallArgumentContext);
        }

        return this.getRuleContext(i, CallArgumentContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterCall) {
             listener.enterCall(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitCall) {
             listener.exitCall(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitCall) {
            return visitor.visitCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RefreshMaterializedViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REFRESH(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.REFRESH, 0)!;
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.VIEW, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterRefreshMaterializedView) {
             listener.enterRefreshMaterializedView(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitRefreshMaterializedView) {
             listener.exitRefreshMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitRefreshMaterializedView) {
            return visitor.visitRefreshMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateMaterializedViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CREATE, 0)!;
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.VIEW, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterShowCreateMaterializedView) {
             listener.enterShowCreateMaterializedView(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitShowCreateMaterializedView) {
             listener.exitShowCreateMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitShowCreateMaterializedView) {
            return visitor.visitShowCreateMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateCatalogContext extends StatementContext {
    public _catalog?: IdentifierContext;
    public _connectorName?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CREATE, 0)!;
    }
    public CATALOG(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CATALOG, 0)!;
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.USING, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EXISTS, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.COMMENT, 0);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.AUTHORIZATION, 0);
    }
    public principal(): PrincipalContext | null {
        return this.getRuleContext(0, PrincipalContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WITH, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterCreateCatalog) {
             listener.enterCreateCatalog(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitCreateCatalog) {
             listener.exitCreateCatalog(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitCreateCatalog) {
            return visitor.visitCreateCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowFunctionsContext extends StatementContext {
    public _pattern?: StringContext;
    public _escape?: StringContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SHOW, 0)!;
    }
    public FUNCTIONS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.FUNCTIONS, 0)!;
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.LIKE, 0);
    }
    public string_(): StringContext[];
    public string_(i: number): StringContext | null;
    public string_(i?: number): StringContext[] | StringContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringContext);
        }

        return this.getRuleContext(i, StringContext);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ESCAPE, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterShowFunctions) {
             listener.enterShowFunctions(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitShowFunctions) {
             listener.exitShowFunctions(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitShowFunctions) {
            return visitor.visitShowFunctions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DescribeOutputContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DESCRIBE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.DESCRIBE, 0)!;
    }
    public OUTPUT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.OUTPUT, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterDescribeOutput) {
             listener.enterDescribeOutput(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitDescribeOutput) {
             listener.exitDescribeOutput(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitDescribeOutput) {
            return visitor.visitDescribeOutput(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GrantContext extends StatementContext {
    public _grantee?: PrincipalContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public GRANT(): antlr.TerminalNode[];
    public GRANT(i: number): antlr.TerminalNode | null;
    public GRANT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.GRANT);
    	} else {
    		return this.getToken(SqlBaseParser.GRANT, i);
    	}
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ON, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TO, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public privilege(): PrivilegeContext[];
    public privilege(i: number): PrivilegeContext | null;
    public privilege(i?: number): PrivilegeContext[] | PrivilegeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeContext);
        }

        return this.getRuleContext(i, PrivilegeContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ALL, 0);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PRIVILEGES, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WITH, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.OPTION, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SCHEMA, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TABLE, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterGrant) {
             listener.enterGrant(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitGrant) {
             listener.exitGrant(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitGrant) {
            return visitor.visitGrant(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTablePropertiesContext extends StatementContext {
    public _tableName?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TABLE, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SET, 0)!;
    }
    public PROPERTIES(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.PROPERTIES, 0)!;
    }
    public propertyAssignments(): PropertyAssignmentsContext {
        return this.getRuleContext(0, PropertyAssignmentsContext)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSetTableProperties) {
             listener.enterSetTableProperties(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSetTableProperties) {
             listener.exitSetTableProperties(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSetTableProperties) {
            return visitor.visitSetTableProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryNoWith(): QueryNoWithContext {
        return this.getRuleContext(0, QueryNoWithContext)!;
    }
    public with(): WithContext | null {
        return this.getRuleContext(0, WithContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_query;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterQuery) {
             listener.enterQuery(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitQuery) {
             listener.exitQuery(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitQuery) {
            return visitor.visitQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.WITH, 0)!;
    }
    public namedQuery(): NamedQueryContext[];
    public namedQuery(i: number): NamedQueryContext | null;
    public namedQuery(i?: number): NamedQueryContext[] | NamedQueryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedQueryContext);
        }

        return this.getRuleContext(i, NamedQueryContext);
    }
    public RECURSIVE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.RECURSIVE, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_with;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterWith) {
             listener.enterWith(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitWith) {
             listener.exitWith(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitWith) {
            return visitor.visitWith(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnDefinition(): ColumnDefinitionContext | null {
        return this.getRuleContext(0, ColumnDefinitionContext);
    }
    public likeClause(): LikeClauseContext | null {
        return this.getRuleContext(0, LikeClauseContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_tableElement;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterTableElement) {
             listener.enterTableElement(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitTableElement) {
             listener.exitTableElement(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitTableElement) {
            return visitor.visitTableElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NOT, 0);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NULL, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.COMMENT, 0);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WITH, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_columnDefinition;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterColumnDefinition) {
             listener.enterColumnDefinition(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitColumnDefinition) {
             listener.exitColumnDefinition(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitColumnDefinition) {
            return visitor.visitColumnDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LikeClauseContext extends antlr.ParserRuleContext {
    public _optionType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIKE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.LIKE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public PROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PROPERTIES, 0);
    }
    public INCLUDING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.INCLUDING, 0);
    }
    public EXCLUDING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EXCLUDING, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_likeClause;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterLikeClause) {
             listener.enterLikeClause(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitLikeClause) {
             listener.exitLikeClause(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitLikeClause) {
            return visitor.visitLikeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertiesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public propertyAssignments(): PropertyAssignmentsContext {
        return this.getRuleContext(0, PropertyAssignmentsContext)!;
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_properties;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterProperties) {
             listener.enterProperties(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitProperties) {
             listener.exitProperties(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitProperties) {
            return visitor.visitProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyAssignmentsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public property(): PropertyContext[];
    public property(i: number): PropertyContext | null;
    public property(i?: number): PropertyContext[] | PropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyContext);
        }

        return this.getRuleContext(i, PropertyContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_propertyAssignments;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterPropertyAssignments) {
             listener.enterPropertyAssignments(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitPropertyAssignments) {
             listener.exitPropertyAssignments(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitPropertyAssignments) {
            return visitor.visitPropertyAssignments(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.EQ, 0)!;
    }
    public propertyValue(): PropertyValueContext {
        return this.getRuleContext(0, PropertyValueContext)!;
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_property;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterProperty) {
             listener.enterProperty(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitProperty) {
             listener.exitProperty(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitProperty) {
            return visitor.visitProperty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_propertyValue;
    }
    public override copyFrom(ctx: PropertyValueContext): void {
        super.copyFrom(ctx);
    }
}
export class DefaultPropertyValueContext extends PropertyValueContext {
    public constructor(ctx: PropertyValueContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DEFAULT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.DEFAULT, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterDefaultPropertyValue) {
             listener.enterDefaultPropertyValue(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitDefaultPropertyValue) {
             listener.exitDefaultPropertyValue(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitDefaultPropertyValue) {
            return visitor.visitDefaultPropertyValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NonDefaultPropertyValueContext extends PropertyValueContext {
    public constructor(ctx: PropertyValueContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterNonDefaultPropertyValue) {
             listener.enterNonDefaultPropertyValue(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitNonDefaultPropertyValue) {
             listener.exitNonDefaultPropertyValue(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitNonDefaultPropertyValue) {
            return visitor.visitNonDefaultPropertyValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryNoWithContext extends antlr.ParserRuleContext {
    public _offset?: RowCountContext;
    public _limit?: LimitRowCountContext;
    public _fetchFirst?: RowCountContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryTerm(): QueryTermContext {
        return this.getRuleContext(0, QueryTermContext)!;
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ORDER, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.BY, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.OFFSET, 0);
    }
    public rowCount(): RowCountContext[];
    public rowCount(i: number): RowCountContext | null;
    public rowCount(i?: number): RowCountContext[] | RowCountContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowCountContext);
        }

        return this.getRuleContext(i, RowCountContext);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.LIMIT, 0);
    }
    public FETCH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FETCH, 0);
    }
    public limitRowCount(): LimitRowCountContext | null {
        return this.getRuleContext(0, LimitRowCountContext);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FIRST, 0);
    }
    public NEXT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NEXT, 0);
    }
    public ROW(): antlr.TerminalNode[];
    public ROW(i: number): antlr.TerminalNode | null;
    public ROW(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.ROW);
    	} else {
    		return this.getToken(SqlBaseParser.ROW, i);
    	}
    }
    public ROWS(): antlr.TerminalNode[];
    public ROWS(i: number): antlr.TerminalNode | null;
    public ROWS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.ROWS);
    	} else {
    		return this.getToken(SqlBaseParser.ROWS, i);
    	}
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ONLY, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WITH, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TIES, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_queryNoWith;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterQueryNoWith) {
             listener.enterQueryNoWith(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitQueryNoWith) {
             listener.exitQueryNoWith(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitQueryNoWith) {
            return visitor.visitQueryNoWith(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitRowCountContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ALL, 0);
    }
    public rowCount(): RowCountContext | null {
        return this.getRuleContext(0, RowCountContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_limitRowCount;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterLimitRowCount) {
             listener.enterLimitRowCount(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitLimitRowCount) {
             listener.exitLimitRowCount(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitLimitRowCount) {
            return visitor.visitLimitRowCount(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowCountContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
    }
    public QUESTION_MARK(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.QUESTION_MARK, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_rowCount;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterRowCount) {
             listener.enterRowCount(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitRowCount) {
             listener.exitRowCount(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitRowCount) {
            return visitor.visitRowCount(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryTermContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_queryTerm;
    }
    public override copyFrom(ctx: QueryTermContext): void {
        super.copyFrom(ctx);
    }
}
export class QueryTermDefaultContext extends QueryTermContext {
    public constructor(ctx: QueryTermContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public queryPrimary(): QueryPrimaryContext {
        return this.getRuleContext(0, QueryPrimaryContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterQueryTermDefault) {
             listener.enterQueryTermDefault(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitQueryTermDefault) {
             listener.exitQueryTermDefault(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitQueryTermDefault) {
            return visitor.visitQueryTermDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetOperationContext extends QueryTermContext {
    public _left?: QueryTermContext;
    public _operator?: Token | null;
    public _right?: QueryTermContext;
    public constructor(ctx: QueryTermContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public queryTerm(): QueryTermContext[];
    public queryTerm(i: number): QueryTermContext | null;
    public queryTerm(i?: number): QueryTermContext[] | QueryTermContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QueryTermContext);
        }

        return this.getRuleContext(i, QueryTermContext);
    }
    public INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.INTERSECT, 0);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public UNION(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.UNION, 0);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EXCEPT, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSetOperation) {
             listener.enterSetOperation(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSetOperation) {
             listener.exitSetOperation(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSetOperation) {
            return visitor.visitSetOperation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_queryPrimary;
    }
    public override copyFrom(ctx: QueryPrimaryContext): void {
        super.copyFrom(ctx);
    }
}
export class SubqueryContext extends QueryPrimaryContext {
    public constructor(ctx: QueryPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public queryNoWith(): QueryNoWithContext {
        return this.getRuleContext(0, QueryNoWithContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSubquery) {
             listener.enterSubquery(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSubquery) {
             listener.exitSubquery(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSubquery) {
            return visitor.visitSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class QueryPrimaryDefaultContext extends QueryPrimaryContext {
    public constructor(ctx: QueryPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public querySpecification(): QuerySpecificationContext {
        return this.getRuleContext(0, QuerySpecificationContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterQueryPrimaryDefault) {
             listener.enterQueryPrimaryDefault(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitQueryPrimaryDefault) {
             listener.exitQueryPrimaryDefault(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitQueryPrimaryDefault) {
            return visitor.visitQueryPrimaryDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableContext extends QueryPrimaryContext {
    public constructor(ctx: QueryPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TABLE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterTable) {
             listener.enterTable(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitTable) {
             listener.exitTable(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitTable) {
            return visitor.visitTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InlineTableContext extends QueryPrimaryContext {
    public constructor(ctx: QueryPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public VALUES(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.VALUES, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterInlineTable) {
             listener.enterInlineTable(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitInlineTable) {
             listener.exitInlineTable(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitInlineTable) {
            return visitor.visitInlineTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortItemContext extends antlr.ParserRuleContext {
    public _ordering?: Token | null;
    public _nullOrdering?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public NULLS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NULLS, 0);
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ASC, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.DESC, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FIRST, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.LAST, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_sortItem;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSortItem) {
             listener.enterSortItem(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSortItem) {
             listener.exitSortItem(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSortItem) {
            return visitor.visitSortItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuerySpecificationContext extends antlr.ParserRuleContext {
    public _where?: BooleanExpressionContext;
    public _having?: BooleanExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SELECT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SELECT, 0)!;
    }
    public selectItem(): SelectItemContext[];
    public selectItem(i: number): SelectItemContext | null;
    public selectItem(i?: number): SelectItemContext[] | SelectItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectItemContext);
        }

        return this.getRuleContext(i, SelectItemContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FROM, 0);
    }
    public relation(): RelationContext[];
    public relation(i: number): RelationContext | null;
    public relation(i?: number): RelationContext[] | RelationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RelationContext);
        }

        return this.getRuleContext(i, RelationContext);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WHERE, 0);
    }
    public GROUP(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.GROUP, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.BY, 0);
    }
    public groupBy(): GroupByContext | null {
        return this.getRuleContext(0, GroupByContext);
    }
    public HAVING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.HAVING, 0);
    }
    public WINDOW(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WINDOW, 0);
    }
    public windowDefinition(): WindowDefinitionContext[];
    public windowDefinition(i: number): WindowDefinitionContext | null;
    public windowDefinition(i?: number): WindowDefinitionContext[] | WindowDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WindowDefinitionContext);
        }

        return this.getRuleContext(i, WindowDefinitionContext);
    }
    public booleanExpression(): BooleanExpressionContext[];
    public booleanExpression(i: number): BooleanExpressionContext | null;
    public booleanExpression(i?: number): BooleanExpressionContext[] | BooleanExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BooleanExpressionContext);
        }

        return this.getRuleContext(i, BooleanExpressionContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_querySpecification;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterQuerySpecification) {
             listener.enterQuerySpecification(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitQuerySpecification) {
             listener.exitQuerySpecification(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitQuerySpecification) {
            return visitor.visitQuerySpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupByContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public groupingElement(): GroupingElementContext[];
    public groupingElement(i: number): GroupingElementContext | null;
    public groupingElement(i?: number): GroupingElementContext[] | GroupingElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingElementContext);
        }

        return this.getRuleContext(i, GroupingElementContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_groupBy;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterGroupBy) {
             listener.enterGroupBy(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitGroupBy) {
             listener.exitGroupBy(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitGroupBy) {
            return visitor.visitGroupBy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_groupingElement;
    }
    public override copyFrom(ctx: GroupingElementContext): void {
        super.copyFrom(ctx);
    }
}
export class MultipleGroupingSetsContext extends GroupingElementContext {
    public constructor(ctx: GroupingElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public GROUPING(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.GROUPING, 0)!;
    }
    public SETS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SETS, 0)!;
    }
    public groupingSet(): GroupingSetContext[];
    public groupingSet(i: number): GroupingSetContext | null;
    public groupingSet(i?: number): GroupingSetContext[] | GroupingSetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingSetContext);
        }

        return this.getRuleContext(i, GroupingSetContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterMultipleGroupingSets) {
             listener.enterMultipleGroupingSets(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitMultipleGroupingSets) {
             listener.exitMultipleGroupingSets(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitMultipleGroupingSets) {
            return visitor.visitMultipleGroupingSets(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SingleGroupingSetContext extends GroupingElementContext {
    public constructor(ctx: GroupingElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public groupingSet(): GroupingSetContext {
        return this.getRuleContext(0, GroupingSetContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSingleGroupingSet) {
             listener.enterSingleGroupingSet(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSingleGroupingSet) {
             listener.exitSingleGroupingSet(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSingleGroupingSet) {
            return visitor.visitSingleGroupingSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CubeContext extends GroupingElementContext {
    public constructor(ctx: GroupingElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CUBE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CUBE, 0)!;
    }
    public groupingSet(): GroupingSetContext[];
    public groupingSet(i: number): GroupingSetContext | null;
    public groupingSet(i?: number): GroupingSetContext[] | GroupingSetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingSetContext);
        }

        return this.getRuleContext(i, GroupingSetContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterCube) {
             listener.enterCube(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitCube) {
             listener.exitCube(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitCube) {
            return visitor.visitCube(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RollupContext extends GroupingElementContext {
    public constructor(ctx: GroupingElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ROLLUP(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ROLLUP, 0)!;
    }
    public groupingSet(): GroupingSetContext[];
    public groupingSet(i: number): GroupingSetContext | null;
    public groupingSet(i?: number): GroupingSetContext[] | GroupingSetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingSetContext);
        }

        return this.getRuleContext(i, GroupingSetContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterRollup) {
             listener.enterRollup(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitRollup) {
             listener.exitRollup(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitRollup) {
            return visitor.visitRollup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingSetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_groupingSet;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterGroupingSet) {
             listener.enterGroupingSet(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitGroupingSet) {
             listener.exitGroupingSet(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitGroupingSet) {
            return visitor.visitGroupingSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowDefinitionContext extends antlr.ParserRuleContext {
    public _name?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.AS, 0)!;
    }
    public windowSpecification(): WindowSpecificationContext {
        return this.getRuleContext(0, WindowSpecificationContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_windowDefinition;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterWindowDefinition) {
             listener.enterWindowDefinition(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitWindowDefinition) {
             listener.exitWindowDefinition(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitWindowDefinition) {
            return visitor.visitWindowDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowSpecificationContext extends antlr.ParserRuleContext {
    public _existingWindowName?: IdentifierContext;
    public _expression?: ExpressionContext;
    public _partition: ExpressionContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PARTITION, 0);
    }
    public BY(): antlr.TerminalNode[];
    public BY(i: number): antlr.TerminalNode | null;
    public BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.BY);
    	} else {
    		return this.getToken(SqlBaseParser.BY, i);
    	}
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ORDER, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public windowFrame(): WindowFrameContext | null {
        return this.getRuleContext(0, WindowFrameContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_windowSpecification;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterWindowSpecification) {
             listener.enterWindowSpecification(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitWindowSpecification) {
             listener.exitWindowSpecification(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitWindowSpecification) {
            return visitor.visitWindowSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedQueryContext extends antlr.ParserRuleContext {
    public _name?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.AS, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_namedQuery;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterNamedQuery) {
             listener.enterNamedQuery(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitNamedQuery) {
             listener.exitNamedQuery(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitNamedQuery) {
            return visitor.visitNamedQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetQuantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.DISTINCT, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ALL, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_setQuantifier;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSetQuantifier) {
             listener.enterSetQuantifier(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSetQuantifier) {
             listener.exitSetQuantifier(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSetQuantifier) {
            return visitor.visitSetQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_selectItem;
    }
    public override copyFrom(ctx: SelectItemContext): void {
        super.copyFrom(ctx);
    }
}
export class SelectAllContext extends SelectItemContext {
    public constructor(ctx: SelectItemContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public primaryExpression(): PrimaryExpressionContext | null {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    public ASTERISK(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ASTERISK, 0)!;
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.AS, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSelectAll) {
             listener.enterSelectAll(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSelectAll) {
             listener.exitSelectAll(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSelectAll) {
            return visitor.visitSelectAll(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SelectSingleContext extends SelectItemContext {
    public constructor(ctx: SelectItemContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.AS, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSelectSingle) {
             listener.enterSelectSingle(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSelectSingle) {
             listener.exitSelectSingle(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSelectSingle) {
            return visitor.visitSelectSingle(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_relation;
    }
    public override copyFrom(ctx: RelationContext): void {
        super.copyFrom(ctx);
    }
}
export class RelationDefaultContext extends RelationContext {
    public constructor(ctx: RelationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public sampledRelation(): SampledRelationContext {
        return this.getRuleContext(0, SampledRelationContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterRelationDefault) {
             listener.enterRelationDefault(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitRelationDefault) {
             listener.exitRelationDefault(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitRelationDefault) {
            return visitor.visitRelationDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinRelationContext extends RelationContext {
    public _left?: RelationContext;
    public _right?: SampledRelationContext;
    public _rightRelation?: RelationContext;
    public constructor(ctx: RelationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public relation(): RelationContext[];
    public relation(i: number): RelationContext | null;
    public relation(i?: number): RelationContext[] | RelationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RelationContext);
        }

        return this.getRuleContext(i, RelationContext);
    }
    public CROSS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.CROSS, 0);
    }
    public JOIN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.JOIN, 0);
    }
    public joinType(): JoinTypeContext | null {
        return this.getRuleContext(0, JoinTypeContext);
    }
    public joinCriteria(): JoinCriteriaContext | null {
        return this.getRuleContext(0, JoinCriteriaContext);
    }
    public NATURAL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NATURAL, 0);
    }
    public sampledRelation(): SampledRelationContext | null {
        return this.getRuleContext(0, SampledRelationContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterJoinRelation) {
             listener.enterJoinRelation(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitJoinRelation) {
             listener.exitJoinRelation(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitJoinRelation) {
            return visitor.visitJoinRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.INNER, 0);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.LEFT, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.OUTER, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.RIGHT, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FULL, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_joinType;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterJoinType) {
             listener.enterJoinType(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitJoinType) {
             listener.exitJoinType(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitJoinType) {
            return visitor.visitJoinType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinCriteriaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ON, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.USING, 0);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_joinCriteria;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterJoinCriteria) {
             listener.enterJoinCriteria(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitJoinCriteria) {
             listener.exitJoinCriteria(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitJoinCriteria) {
            return visitor.visitJoinCriteria(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampledRelationContext extends antlr.ParserRuleContext {
    public _percentage?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public patternRecognition(): PatternRecognitionContext {
        return this.getRuleContext(0, PatternRecognitionContext)!;
    }
    public TABLESAMPLE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TABLESAMPLE, 0);
    }
    public sampleType(): SampleTypeContext | null {
        return this.getRuleContext(0, SampleTypeContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_sampledRelation;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSampledRelation) {
             listener.enterSampledRelation(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSampledRelation) {
             listener.exitSampledRelation(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSampledRelation) {
            return visitor.visitSampledRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampleTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BERNOULLI(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.BERNOULLI, 0);
    }
    public SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SYSTEM, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_sampleType;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSampleType) {
             listener.enterSampleType(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSampleType) {
             listener.exitSampleType(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSampleType) {
            return visitor.visitSampleType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TrimsSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEADING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.LEADING, 0);
    }
    public TRAILING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TRAILING, 0);
    }
    public BOTH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.BOTH, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_trimsSpecification;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterTrimsSpecification) {
             listener.enterTrimsSpecification(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitTrimsSpecification) {
             listener.exitTrimsSpecification(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitTrimsSpecification) {
            return visitor.visitTrimsSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListAggOverflowBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ERROR, 0);
    }
    public TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TRUNCATE, 0);
    }
    public listaggCountIndication(): ListaggCountIndicationContext | null {
        return this.getRuleContext(0, ListaggCountIndicationContext);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_listAggOverflowBehavior;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterListAggOverflowBehavior) {
             listener.enterListAggOverflowBehavior(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitListAggOverflowBehavior) {
             listener.exitListAggOverflowBehavior(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitListAggOverflowBehavior) {
            return visitor.visitListAggOverflowBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListaggCountIndicationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WITH, 0);
    }
    public COUNT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.COUNT, 0)!;
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WITHOUT, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_listaggCountIndication;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterListaggCountIndication) {
             listener.enterListaggCountIndication(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitListaggCountIndication) {
             listener.exitListaggCountIndication(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitListaggCountIndication) {
            return visitor.visitListaggCountIndication(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PatternRecognitionContext extends antlr.ParserRuleContext {
    public _expression?: ExpressionContext;
    public _partition: ExpressionContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public aliasedRelation(): AliasedRelationContext {
        return this.getRuleContext(0, AliasedRelationContext)!;
    }
    public MATCH_RECOGNIZE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.MATCH_RECOGNIZE, 0);
    }
    public PATTERN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PATTERN, 0);
    }
    public rowPattern(): RowPatternContext | null {
        return this.getRuleContext(0, RowPatternContext);
    }
    public DEFINE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.DEFINE, 0);
    }
    public variableDefinition(): VariableDefinitionContext[];
    public variableDefinition(i: number): VariableDefinitionContext | null;
    public variableDefinition(i?: number): VariableDefinitionContext[] | VariableDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(VariableDefinitionContext);
        }

        return this.getRuleContext(i, VariableDefinitionContext);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PARTITION, 0);
    }
    public BY(): antlr.TerminalNode[];
    public BY(i: number): antlr.TerminalNode | null;
    public BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.BY);
    	} else {
    		return this.getToken(SqlBaseParser.BY, i);
    	}
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ORDER, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public MEASURES(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.MEASURES, 0);
    }
    public measureDefinition(): MeasureDefinitionContext[];
    public measureDefinition(i: number): MeasureDefinitionContext | null;
    public measureDefinition(i?: number): MeasureDefinitionContext[] | MeasureDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MeasureDefinitionContext);
        }

        return this.getRuleContext(i, MeasureDefinitionContext);
    }
    public rowsPerMatch(): RowsPerMatchContext | null {
        return this.getRuleContext(0, RowsPerMatchContext);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.AFTER, 0);
    }
    public MATCH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.MATCH, 0);
    }
    public skipTo(): SkipToContext | null {
        return this.getRuleContext(0, SkipToContext);
    }
    public SUBSET(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SUBSET, 0);
    }
    public subsetDefinition(): SubsetDefinitionContext[];
    public subsetDefinition(i: number): SubsetDefinitionContext | null;
    public subsetDefinition(i?: number): SubsetDefinitionContext[] | SubsetDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SubsetDefinitionContext);
        }

        return this.getRuleContext(i, SubsetDefinitionContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public INITIAL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.INITIAL, 0);
    }
    public SEEK(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SEEK, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.AS, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_patternRecognition;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterPatternRecognition) {
             listener.enterPatternRecognition(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitPatternRecognition) {
             listener.exitPatternRecognition(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitPatternRecognition) {
            return visitor.visitPatternRecognition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MeasureDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.AS, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_measureDefinition;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterMeasureDefinition) {
             listener.enterMeasureDefinition(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitMeasureDefinition) {
             listener.exitMeasureDefinition(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitMeasureDefinition) {
            return visitor.visitMeasureDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowsPerMatchContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ONE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ONE, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ROW, 0);
    }
    public PER(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.PER, 0)!;
    }
    public MATCH(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.MATCH, 0)!;
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ALL, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ROWS, 0);
    }
    public emptyMatchHandling(): EmptyMatchHandlingContext | null {
        return this.getRuleContext(0, EmptyMatchHandlingContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_rowsPerMatch;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterRowsPerMatch) {
             listener.enterRowsPerMatch(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitRowsPerMatch) {
             listener.exitRowsPerMatch(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitRowsPerMatch) {
            return visitor.visitRowsPerMatch(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EmptyMatchHandlingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SHOW, 0);
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EMPTY, 0);
    }
    public MATCHES(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.MATCHES, 0);
    }
    public OMIT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.OMIT, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WITH, 0);
    }
    public UNMATCHED(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.UNMATCHED, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ROWS, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_emptyMatchHandling;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterEmptyMatchHandling) {
             listener.enterEmptyMatchHandling(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitEmptyMatchHandling) {
             listener.exitEmptyMatchHandling(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitEmptyMatchHandling) {
            return visitor.visitEmptyMatchHandling(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkipToContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TO, 0);
    }
    public NEXT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NEXT, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ROW, 0);
    }
    public PAST(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PAST, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.LAST, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FIRST, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_skipTo;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSkipTo) {
             listener.enterSkipTo(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSkipTo) {
             listener.exitSkipTo(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSkipTo) {
            return visitor.visitSkipTo(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubsetDefinitionContext extends antlr.ParserRuleContext {
    public _name?: IdentifierContext;
    public _identifier?: IdentifierContext;
    public _union: IdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.EQ, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_subsetDefinition;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSubsetDefinition) {
             listener.enterSubsetDefinition(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSubsetDefinition) {
             listener.exitSubsetDefinition(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSubsetDefinition) {
            return visitor.visitSubsetDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariableDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.AS, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_variableDefinition;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterVariableDefinition) {
             listener.enterVariableDefinition(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitVariableDefinition) {
             listener.exitVariableDefinition(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitVariableDefinition) {
            return visitor.visitVariableDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AliasedRelationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public relationPrimary(): RelationPrimaryContext {
        return this.getRuleContext(0, RelationPrimaryContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.AS, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_aliasedRelation;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterAliasedRelation) {
             listener.enterAliasedRelation(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitAliasedRelation) {
             listener.exitAliasedRelation(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitAliasedRelation) {
            return visitor.visitAliasedRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnAliasesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_columnAliases;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterColumnAliases) {
             listener.enterColumnAliases(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitColumnAliases) {
             listener.exitColumnAliases(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitColumnAliases) {
            return visitor.visitColumnAliases(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_relationPrimary;
    }
    public override copyFrom(ctx: RelationPrimaryContext): void {
        super.copyFrom(ctx);
    }
}
export class SubqueryRelationContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSubqueryRelation) {
             listener.enterSubqueryRelation(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSubqueryRelation) {
             listener.exitSubqueryRelation(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSubqueryRelation) {
            return visitor.visitSubqueryRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonTableContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public JSON_TABLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.JSON_TABLE, 0)!;
    }
    public jsonPathInvocation(): JsonPathInvocationContext {
        return this.getRuleContext(0, JsonPathInvocationContext)!;
    }
    public COLUMNS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.COLUMNS, 0)!;
    }
    public jsonTableColumn(): JsonTableColumnContext[];
    public jsonTableColumn(i: number): JsonTableColumnContext | null;
    public jsonTableColumn(i?: number): JsonTableColumnContext[] | JsonTableColumnContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonTableColumnContext);
        }

        return this.getRuleContext(i, JsonTableColumnContext);
    }
    public PLAN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PLAN, 0);
    }
    public jsonTableSpecificPlan(): JsonTableSpecificPlanContext | null {
        return this.getRuleContext(0, JsonTableSpecificPlanContext);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.DEFAULT, 0);
    }
    public jsonTableDefaultPlan(): JsonTableDefaultPlanContext | null {
        return this.getRuleContext(0, JsonTableDefaultPlanContext);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ON, 0);
    }
    public ERROR(): antlr.TerminalNode[];
    public ERROR(i: number): antlr.TerminalNode | null;
    public ERROR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.ERROR);
    	} else {
    		return this.getToken(SqlBaseParser.ERROR, i);
    	}
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EMPTY, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterJsonTable) {
             listener.enterJsonTable(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitJsonTable) {
             listener.exitJsonTable(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitJsonTable) {
            return visitor.visitJsonTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ParenthesizedRelationContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public relation(): RelationContext {
        return this.getRuleContext(0, RelationContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterParenthesizedRelation) {
             listener.enterParenthesizedRelation(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitParenthesizedRelation) {
             listener.exitParenthesizedRelation(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitParenthesizedRelation) {
            return visitor.visitParenthesizedRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnnestContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UNNEST(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.UNNEST, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WITH, 0);
    }
    public ORDINALITY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ORDINALITY, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterUnnest) {
             listener.enterUnnest(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitUnnest) {
             listener.exitUnnest(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitUnnest) {
            return visitor.visitUnnest(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableFunctionInvocationContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TABLE, 0)!;
    }
    public tableFunctionCall(): TableFunctionCallContext {
        return this.getRuleContext(0, TableFunctionCallContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterTableFunctionInvocation) {
             listener.enterTableFunctionInvocation(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitTableFunctionInvocation) {
             listener.exitTableFunctionInvocation(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitTableFunctionInvocation) {
            return visitor.visitTableFunctionInvocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LateralContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LATERAL(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.LATERAL, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterLateral) {
             listener.enterLateral(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitLateral) {
             listener.exitLateral(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitLateral) {
            return visitor.visitLateral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableNameContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public queryPeriod(): QueryPeriodContext | null {
        return this.getRuleContext(0, QueryPeriodContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterTableName) {
             listener.enterTableName(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitTableName) {
             listener.exitTableName(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitTableName) {
            return visitor.visitTableName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonTableColumnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_jsonTableColumn;
    }
    public override copyFrom(ctx: JsonTableColumnContext): void {
        super.copyFrom(ctx);
    }
}
export class QueryColumnContext extends JsonTableColumnContext {
    public _emptyBehavior?: JsonQueryBehaviorContext;
    public _errorBehavior?: JsonQueryBehaviorContext;
    public constructor(ctx: JsonTableColumnContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public FORMAT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.FORMAT, 0)!;
    }
    public jsonRepresentation(): JsonRepresentationContext {
        return this.getRuleContext(0, JsonRepresentationContext)!;
    }
    public PATH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PATH, 0);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public jsonQueryWrapperBehavior(): JsonQueryWrapperBehaviorContext | null {
        return this.getRuleContext(0, JsonQueryWrapperBehaviorContext);
    }
    public WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WRAPPER, 0);
    }
    public QUOTES(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.QUOTES, 0);
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.ON);
    	} else {
    		return this.getToken(SqlBaseParser.ON, i);
    	}
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EMPTY, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ERROR, 0);
    }
    public KEEP(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.KEEP, 0);
    }
    public OMIT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.OMIT, 0);
    }
    public jsonQueryBehavior(): JsonQueryBehaviorContext[];
    public jsonQueryBehavior(i: number): JsonQueryBehaviorContext | null;
    public jsonQueryBehavior(i?: number): JsonQueryBehaviorContext[] | JsonQueryBehaviorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonQueryBehaviorContext);
        }

        return this.getRuleContext(i, JsonQueryBehaviorContext);
    }
    public SCALAR(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SCALAR, 0);
    }
    public TEXT_STRING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TEXT_STRING, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterQueryColumn) {
             listener.enterQueryColumn(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitQueryColumn) {
             listener.exitQueryColumn(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitQueryColumn) {
            return visitor.visitQueryColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NestedColumnsContext extends JsonTableColumnContext {
    public constructor(ctx: JsonTableColumnContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NESTED(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.NESTED, 0)!;
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public COLUMNS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.COLUMNS, 0)!;
    }
    public jsonTableColumn(): JsonTableColumnContext[];
    public jsonTableColumn(i: number): JsonTableColumnContext | null;
    public jsonTableColumn(i?: number): JsonTableColumnContext[] | JsonTableColumnContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonTableColumnContext);
        }

        return this.getRuleContext(i, JsonTableColumnContext);
    }
    public PATH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PATH, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.AS, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterNestedColumns) {
             listener.enterNestedColumns(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitNestedColumns) {
             listener.exitNestedColumns(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitNestedColumns) {
            return visitor.visitNestedColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ValueColumnContext extends JsonTableColumnContext {
    public _emptyBehavior?: JsonValueBehaviorContext;
    public _errorBehavior?: JsonValueBehaviorContext;
    public constructor(ctx: JsonTableColumnContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public PATH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PATH, 0);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.ON);
    	} else {
    		return this.getToken(SqlBaseParser.ON, i);
    	}
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EMPTY, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ERROR, 0);
    }
    public jsonValueBehavior(): JsonValueBehaviorContext[];
    public jsonValueBehavior(i: number): JsonValueBehaviorContext | null;
    public jsonValueBehavior(i?: number): JsonValueBehaviorContext[] | JsonValueBehaviorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonValueBehaviorContext);
        }

        return this.getRuleContext(i, JsonValueBehaviorContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterValueColumn) {
             listener.enterValueColumn(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitValueColumn) {
             listener.exitValueColumn(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitValueColumn) {
            return visitor.visitValueColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class OrdinalityColumnContext extends JsonTableColumnContext {
    public constructor(ctx: JsonTableColumnContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.FOR, 0)!;
    }
    public ORDINALITY(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ORDINALITY, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterOrdinalityColumn) {
             listener.enterOrdinalityColumn(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitOrdinalityColumn) {
             listener.exitOrdinalityColumn(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitOrdinalityColumn) {
            return visitor.visitOrdinalityColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonTableSpecificPlanContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_jsonTableSpecificPlan;
    }
    public override copyFrom(ctx: JsonTableSpecificPlanContext): void {
        super.copyFrom(ctx);
    }
}
export class CrossPlanContext extends JsonTableSpecificPlanContext {
    public constructor(ctx: JsonTableSpecificPlanContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public planPrimary(): PlanPrimaryContext[];
    public planPrimary(i: number): PlanPrimaryContext | null;
    public planPrimary(i?: number): PlanPrimaryContext[] | PlanPrimaryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PlanPrimaryContext);
        }

        return this.getRuleContext(i, PlanPrimaryContext);
    }
    public CROSS(): antlr.TerminalNode[];
    public CROSS(i: number): antlr.TerminalNode | null;
    public CROSS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.CROSS);
    	} else {
    		return this.getToken(SqlBaseParser.CROSS, i);
    	}
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterCrossPlan) {
             listener.enterCrossPlan(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitCrossPlan) {
             listener.exitCrossPlan(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitCrossPlan) {
            return visitor.visitCrossPlan(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinPlanContext extends JsonTableSpecificPlanContext {
    public constructor(ctx: JsonTableSpecificPlanContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public jsonTablePathName(): JsonTablePathNameContext {
        return this.getRuleContext(0, JsonTablePathNameContext)!;
    }
    public planPrimary(): PlanPrimaryContext {
        return this.getRuleContext(0, PlanPrimaryContext)!;
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.OUTER, 0);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.INNER, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterJoinPlan) {
             listener.enterJoinPlan(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitJoinPlan) {
             listener.exitJoinPlan(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitJoinPlan) {
            return visitor.visitJoinPlan(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LeafPlanContext extends JsonTableSpecificPlanContext {
    public constructor(ctx: JsonTableSpecificPlanContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public jsonTablePathName(): JsonTablePathNameContext {
        return this.getRuleContext(0, JsonTablePathNameContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterLeafPlan) {
             listener.enterLeafPlan(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitLeafPlan) {
             listener.exitLeafPlan(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitLeafPlan) {
            return visitor.visitLeafPlan(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnionPlanContext extends JsonTableSpecificPlanContext {
    public constructor(ctx: JsonTableSpecificPlanContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public planPrimary(): PlanPrimaryContext[];
    public planPrimary(i: number): PlanPrimaryContext | null;
    public planPrimary(i?: number): PlanPrimaryContext[] | PlanPrimaryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PlanPrimaryContext);
        }

        return this.getRuleContext(i, PlanPrimaryContext);
    }
    public UNION(): antlr.TerminalNode[];
    public UNION(i: number): antlr.TerminalNode | null;
    public UNION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.UNION);
    	} else {
    		return this.getToken(SqlBaseParser.UNION, i);
    	}
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterUnionPlan) {
             listener.enterUnionPlan(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitUnionPlan) {
             listener.exitUnionPlan(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitUnionPlan) {
            return visitor.visitUnionPlan(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonTablePathNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_jsonTablePathName;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterJsonTablePathName) {
             listener.enterJsonTablePathName(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitJsonTablePathName) {
             listener.exitJsonTablePathName(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitJsonTablePathName) {
            return visitor.visitJsonTablePathName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PlanPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public jsonTablePathName(): JsonTablePathNameContext | null {
        return this.getRuleContext(0, JsonTablePathNameContext);
    }
    public jsonTableSpecificPlan(): JsonTableSpecificPlanContext | null {
        return this.getRuleContext(0, JsonTableSpecificPlanContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_planPrimary;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterPlanPrimary) {
             listener.enterPlanPrimary(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitPlanPrimary) {
             listener.exitPlanPrimary(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitPlanPrimary) {
            return visitor.visitPlanPrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonTableDefaultPlanContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.OUTER, 0);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.INNER, 0);
    }
    public UNION(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.UNION, 0);
    }
    public CROSS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.CROSS, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_jsonTableDefaultPlan;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterJsonTableDefaultPlan) {
             listener.enterJsonTableDefaultPlan(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitJsonTableDefaultPlan) {
             listener.exitJsonTableDefaultPlan(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitJsonTableDefaultPlan) {
            return visitor.visitJsonTableDefaultPlan(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableFunctionCallContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public tableFunctionArgument(): TableFunctionArgumentContext[];
    public tableFunctionArgument(i: number): TableFunctionArgumentContext | null;
    public tableFunctionArgument(i?: number): TableFunctionArgumentContext[] | TableFunctionArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableFunctionArgumentContext);
        }

        return this.getRuleContext(i, TableFunctionArgumentContext);
    }
    public COPARTITION(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.COPARTITION, 0);
    }
    public copartitionTables(): CopartitionTablesContext[];
    public copartitionTables(i: number): CopartitionTablesContext | null;
    public copartitionTables(i?: number): CopartitionTablesContext[] | CopartitionTablesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CopartitionTablesContext);
        }

        return this.getRuleContext(i, CopartitionTablesContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_tableFunctionCall;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterTableFunctionCall) {
             listener.enterTableFunctionCall(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitTableFunctionCall) {
             listener.exitTableFunctionCall(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitTableFunctionCall) {
            return visitor.visitTableFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableFunctionArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableArgument(): TableArgumentContext | null {
        return this.getRuleContext(0, TableArgumentContext);
    }
    public descriptorArgument(): DescriptorArgumentContext | null {
        return this.getRuleContext(0, DescriptorArgumentContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_tableFunctionArgument;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterTableFunctionArgument) {
             listener.enterTableFunctionArgument(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitTableFunctionArgument) {
             listener.exitTableFunctionArgument(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitTableFunctionArgument) {
            return visitor.visitTableFunctionArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableArgumentRelation(): TableArgumentRelationContext {
        return this.getRuleContext(0, TableArgumentRelationContext)!;
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PARTITION, 0);
    }
    public BY(): antlr.TerminalNode[];
    public BY(i: number): antlr.TerminalNode | null;
    public BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.BY);
    	} else {
    		return this.getToken(SqlBaseParser.BY, i);
    	}
    }
    public PRUNE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PRUNE, 0);
    }
    public WHEN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WHEN, 0);
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EMPTY, 0);
    }
    public KEEP(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.KEEP, 0);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ORDER, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_tableArgument;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterTableArgument) {
             listener.enterTableArgument(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitTableArgument) {
             listener.exitTableArgument(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitTableArgument) {
            return visitor.visitTableArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableArgumentRelationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_tableArgumentRelation;
    }
    public override copyFrom(ctx: TableArgumentRelationContext): void {
        super.copyFrom(ctx);
    }
}
export class TableArgumentQueryContext extends TableArgumentRelationContext {
    public constructor(ctx: TableArgumentRelationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TABLE, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.AS, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterTableArgumentQuery) {
             listener.enterTableArgumentQuery(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitTableArgumentQuery) {
             listener.exitTableArgumentQuery(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitTableArgumentQuery) {
            return visitor.visitTableArgumentQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableArgumentTableContext extends TableArgumentRelationContext {
    public constructor(ctx: TableArgumentRelationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TABLE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.AS, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterTableArgumentTable) {
             listener.enterTableArgumentTable(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitTableArgumentTable) {
             listener.exitTableArgumentTable(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitTableArgumentTable) {
            return visitor.visitTableArgumentTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescriptorArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DESCRIPTOR(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.DESCRIPTOR, 0)!;
    }
    public descriptorField(): DescriptorFieldContext[];
    public descriptorField(i: number): DescriptorFieldContext | null;
    public descriptorField(i?: number): DescriptorFieldContext[] | DescriptorFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DescriptorFieldContext);
        }

        return this.getRuleContext(i, DescriptorFieldContext);
    }
    public CAST(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.CAST, 0);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NULL, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.AS, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_descriptorArgument;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterDescriptorArgument) {
             listener.enterDescriptorArgument(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitDescriptorArgument) {
             listener.exitDescriptorArgument(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitDescriptorArgument) {
            return visitor.visitDescriptorArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescriptorFieldContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_descriptorField;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterDescriptorField) {
             listener.enterDescriptorField(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitDescriptorField) {
             listener.exitDescriptorField(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitDescriptorField) {
            return visitor.visitDescriptorField(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CopartitionTablesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_copartitionTables;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterCopartitionTables) {
             listener.enterCopartitionTables(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitCopartitionTables) {
             listener.exitCopartitionTables(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitCopartitionTables) {
            return visitor.visitCopartitionTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_expression;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterExpression) {
             listener.enterExpression(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitExpression) {
             listener.exitExpression(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitExpression) {
            return visitor.visitExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_booleanExpression;
    }
    public override copyFrom(ctx: BooleanExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class LogicalNotContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NOT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.NOT, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterLogicalNot) {
             listener.enterLogicalNot(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitLogicalNot) {
             listener.exitLogicalNot(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitLogicalNot) {
            return visitor.visitLogicalNot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PredicatedContext extends BooleanExpressionContext {
    public _valueExpression?: ValueExpressionContext;
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public predicate(): PredicateContext | null {
        return this.getRuleContext(0, PredicateContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterPredicated) {
             listener.enterPredicated(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitPredicated) {
             listener.exitPredicated(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitPredicated) {
            return visitor.visitPredicated(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class OrContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public booleanExpression(): BooleanExpressionContext[];
    public booleanExpression(i: number): BooleanExpressionContext | null;
    public booleanExpression(i?: number): BooleanExpressionContext[] | BooleanExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BooleanExpressionContext);
        }

        return this.getRuleContext(i, BooleanExpressionContext);
    }
    public OR(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.OR, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterOr) {
             listener.enterOr(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitOr) {
             listener.exitOr(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitOr) {
            return visitor.visitOr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AndContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public booleanExpression(): BooleanExpressionContext[];
    public booleanExpression(i: number): BooleanExpressionContext | null;
    public booleanExpression(i?: number): BooleanExpressionContext[] | BooleanExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BooleanExpressionContext);
        }

        return this.getRuleContext(i, BooleanExpressionContext);
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.AND, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterAnd) {
             listener.enterAnd(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitAnd) {
             listener.exitAnd(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitAnd) {
            return visitor.visitAnd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PredicateContext extends antlr.ParserRuleContext {
    public value: antlr.ParserRuleContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number, value: antlr.ParserRuleContext) {
        super(parent, invokingState);
        this.value = value;
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_predicate;
    }
    public override copyFrom(ctx: PredicateContext): void {
        super.copyFrom(ctx);
        this.value = ctx.value;
    }
}
export class ComparisonContext extends PredicateContext {
    public _right?: ValueExpressionContext;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public comparisonOperator(): ComparisonOperatorContext {
        return this.getRuleContext(0, ComparisonOperatorContext)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterComparison) {
             listener.enterComparison(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitComparison) {
             listener.exitComparison(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitComparison) {
            return visitor.visitComparison(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LikeContext extends PredicateContext {
    public _pattern?: ValueExpressionContext;
    public _escape?: ValueExpressionContext;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public LIKE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.LIKE, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NOT, 0);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ESCAPE, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterLike) {
             listener.enterLike(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitLike) {
             listener.exitLike(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitLike) {
            return visitor.visitLike(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InSubqueryContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public IN(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.IN, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NOT, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterInSubquery) {
             listener.enterInSubquery(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitInSubquery) {
             listener.exitInSubquery(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitInSubquery) {
            return visitor.visitInSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DistinctFromContext extends PredicateContext {
    public _right?: ValueExpressionContext;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.IS, 0)!;
    }
    public DISTINCT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.DISTINCT, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.FROM, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NOT, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterDistinctFrom) {
             listener.enterDistinctFrom(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitDistinctFrom) {
             listener.exitDistinctFrom(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitDistinctFrom) {
            return visitor.visitDistinctFrom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InListContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public IN(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.IN, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NOT, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterInList) {
             listener.enterInList(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitInList) {
             listener.exitInList(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitInList) {
            return visitor.visitInList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NullPredicateContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.IS, 0)!;
    }
    public NULL(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.NULL, 0)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NOT, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterNullPredicate) {
             listener.enterNullPredicate(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitNullPredicate) {
             listener.exitNullPredicate(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitNullPredicate) {
            return visitor.visitNullPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BetweenContext extends PredicateContext {
    public _lower?: ValueExpressionContext;
    public _upper?: ValueExpressionContext;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public BETWEEN(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.BETWEEN, 0)!;
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.AND, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NOT, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterBetween) {
             listener.enterBetween(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitBetween) {
             listener.exitBetween(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitBetween) {
            return visitor.visitBetween(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class QuantifiedComparisonContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public comparisonOperator(): ComparisonOperatorContext {
        return this.getRuleContext(0, ComparisonOperatorContext)!;
    }
    public comparisonQuantifier(): ComparisonQuantifierContext {
        return this.getRuleContext(0, ComparisonQuantifierContext)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterQuantifiedComparison) {
             listener.enterQuantifiedComparison(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitQuantifiedComparison) {
             listener.exitQuantifiedComparison(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitQuantifiedComparison) {
            return visitor.visitQuantifiedComparison(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_valueExpression;
    }
    public override copyFrom(ctx: ValueExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class ValueExpressionDefaultContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterValueExpressionDefault) {
             listener.enterValueExpressionDefault(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitValueExpressionDefault) {
             listener.exitValueExpressionDefault(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitValueExpressionDefault) {
            return visitor.visitValueExpressionDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ConcatenationContext extends ValueExpressionContext {
    public _left?: ValueExpressionContext;
    public _right?: ValueExpressionContext;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CONCAT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CONCAT, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterConcatenation) {
             listener.enterConcatenation(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitConcatenation) {
             listener.exitConcatenation(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitConcatenation) {
            return visitor.visitConcatenation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArithmeticBinaryContext extends ValueExpressionContext {
    public _left?: ValueExpressionContext;
    public _operator?: Token | null;
    public _right?: ValueExpressionContext;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ASTERISK, 0);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SLASH, 0);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PERCENT, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.MINUS, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterArithmeticBinary) {
             listener.enterArithmeticBinary(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitArithmeticBinary) {
             listener.exitArithmeticBinary(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitArithmeticBinary) {
            return visitor.visitArithmeticBinary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArithmeticUnaryContext extends ValueExpressionContext {
    public _operator?: Token | null;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.MINUS, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PLUS, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterArithmeticUnary) {
             listener.enterArithmeticUnary(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitArithmeticUnary) {
             listener.exitArithmeticUnary(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitArithmeticUnary) {
            return visitor.visitArithmeticUnary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AtTimeZoneContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public AT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.AT, 0)!;
    }
    public timeZoneSpecifier(): TimeZoneSpecifierContext {
        return this.getRuleContext(0, TimeZoneSpecifierContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterAtTimeZone) {
             listener.enterAtTimeZone(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitAtTimeZone) {
             listener.exitAtTimeZone(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitAtTimeZone) {
            return visitor.visitAtTimeZone(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimaryExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_primaryExpression;
    }
    public override copyFrom(ctx: PrimaryExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class DereferenceContext extends PrimaryExpressionContext {
    public _base?: PrimaryExpressionContext;
    public _fieldName?: IdentifierContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterDereference) {
             listener.enterDereference(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitDereference) {
             listener.exitDereference(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitDereference) {
            return visitor.visitDereference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TypeConstructorContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.DOUBLE, 0);
    }
    public PRECISION(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PRECISION, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterTypeConstructor) {
             listener.enterTypeConstructor(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitTypeConstructor) {
             listener.exitTypeConstructor(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitTypeConstructor) {
            return visitor.visitTypeConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonValueContext extends PrimaryExpressionContext {
    public _emptyBehavior?: JsonValueBehaviorContext;
    public _errorBehavior?: JsonValueBehaviorContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public JSON_VALUE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.JSON_VALUE, 0)!;
    }
    public jsonPathInvocation(): JsonPathInvocationContext {
        return this.getRuleContext(0, JsonPathInvocationContext)!;
    }
    public RETURNING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.RETURNING, 0);
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.ON);
    	} else {
    		return this.getToken(SqlBaseParser.ON, i);
    	}
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EMPTY, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ERROR, 0);
    }
    public jsonValueBehavior(): JsonValueBehaviorContext[];
    public jsonValueBehavior(i: number): JsonValueBehaviorContext | null;
    public jsonValueBehavior(i?: number): JsonValueBehaviorContext[] | JsonValueBehaviorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonValueBehaviorContext);
        }

        return this.getRuleContext(i, JsonValueBehaviorContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterJsonValue) {
             listener.enterJsonValue(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitJsonValue) {
             listener.exitJsonValue(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitJsonValue) {
            return visitor.visitJsonValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SpecialDateTimeFunctionContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public _precision?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.CURRENT_DATE, 0);
    }
    public CURRENT_TIME(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.CURRENT_TIME, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
    }
    public CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0);
    }
    public LOCALTIME(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.LOCALTIME, 0);
    }
    public LOCALTIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.LOCALTIMESTAMP, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSpecialDateTimeFunction) {
             listener.enterSpecialDateTimeFunction(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSpecialDateTimeFunction) {
             listener.exitSpecialDateTimeFunction(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSpecialDateTimeFunction) {
            return visitor.visitSpecialDateTimeFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SubstringContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SUBSTRING(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SUBSTRING, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.FROM, 0)!;
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FOR, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSubstring) {
             listener.enterSubstring(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSubstring) {
             listener.exitSubstring(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSubstring) {
            return visitor.visitSubstring(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CastContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CAST(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.CAST, 0);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.AS, 0)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public TRY_CAST(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TRY_CAST, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterCast) {
             listener.enterCast(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitCast) {
             listener.exitCast(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitCast) {
            return visitor.visitCast(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LambdaContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterLambda) {
             listener.enterLambda(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitLambda) {
             listener.exitLambda(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitLambda) {
            return visitor.visitLambda(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ParenthesizedExpressionContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterParenthesizedExpression) {
             listener.enterParenthesizedExpression(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitParenthesizedExpression) {
             listener.exitParenthesizedExpression(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitParenthesizedExpression) {
            return visitor.visitParenthesizedExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TrimContext extends PrimaryExpressionContext {
    public _trimChar?: ValueExpressionContext;
    public _trimSource?: ValueExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TRIM(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TRIM, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FROM, 0);
    }
    public trimsSpecification(): TrimsSpecificationContext | null {
        return this.getRuleContext(0, TrimsSpecificationContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterTrim) {
             listener.enterTrim(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitTrim) {
             listener.exitTrim(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitTrim) {
            return visitor.visitTrim(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ParameterContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public QUESTION_MARK(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.QUESTION_MARK, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterParameter) {
             listener.enterParameter(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitParameter) {
             listener.exitParameter(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitParameter) {
            return visitor.visitParameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NormalizeContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NORMALIZE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.NORMALIZE, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public normalForm(): NormalFormContext | null {
        return this.getRuleContext(0, NormalFormContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterNormalize) {
             listener.enterNormalize(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitNormalize) {
             listener.exitNormalize(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitNormalize) {
            return visitor.visitNormalize(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonObjectContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public JSON_OBJECT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.JSON_OBJECT, 0)!;
    }
    public jsonObjectMember(): JsonObjectMemberContext[];
    public jsonObjectMember(i: number): JsonObjectMemberContext | null;
    public jsonObjectMember(i?: number): JsonObjectMemberContext[] | JsonObjectMemberContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonObjectMemberContext);
        }

        return this.getRuleContext(i, JsonObjectMemberContext);
    }
    public RETURNING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.RETURNING, 0);
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public NULL(): antlr.TerminalNode[];
    public NULL(i: number): antlr.TerminalNode | null;
    public NULL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.NULL);
    	} else {
    		return this.getToken(SqlBaseParser.NULL, i);
    	}
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ON, 0);
    }
    public ABSENT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ABSENT, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WITH, 0);
    }
    public UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.UNIQUE, 0);
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WITHOUT, 0);
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FORMAT, 0);
    }
    public jsonRepresentation(): JsonRepresentationContext | null {
        return this.getRuleContext(0, JsonRepresentationContext);
    }
    public KEYS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.KEYS, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterJsonObject) {
             listener.enterJsonObject(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitJsonObject) {
             listener.exitJsonObject(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitJsonObject) {
            return visitor.visitJsonObject(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IntervalLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public interval(): IntervalContext {
        return this.getRuleContext(0, IntervalContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterIntervalLiteral) {
             listener.enterIntervalLiteral(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitIntervalLiteral) {
             listener.exitIntervalLiteral(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitIntervalLiteral) {
            return visitor.visitIntervalLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NumericLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public number(): NumberContext {
        return this.getRuleContext(0, NumberContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterNumericLiteral) {
             listener.enterNumericLiteral(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitNumericLiteral) {
             listener.exitNumericLiteral(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitNumericLiteral) {
            return visitor.visitNumericLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BooleanLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public booleanValue(): BooleanValueContext {
        return this.getRuleContext(0, BooleanValueContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterBooleanLiteral) {
             listener.enterBooleanLiteral(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitBooleanLiteral) {
             listener.exitBooleanLiteral(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitBooleanLiteral) {
            return visitor.visitBooleanLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonArrayContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public JSON_ARRAY(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.JSON_ARRAY, 0)!;
    }
    public jsonValueExpression(): JsonValueExpressionContext[];
    public jsonValueExpression(i: number): JsonValueExpressionContext | null;
    public jsonValueExpression(i?: number): JsonValueExpressionContext[] | JsonValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonValueExpressionContext);
        }

        return this.getRuleContext(i, JsonValueExpressionContext);
    }
    public RETURNING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.RETURNING, 0);
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public NULL(): antlr.TerminalNode[];
    public NULL(i: number): antlr.TerminalNode | null;
    public NULL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.NULL);
    	} else {
    		return this.getToken(SqlBaseParser.NULL, i);
    	}
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ON, 0);
    }
    public ABSENT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ABSENT, 0);
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FORMAT, 0);
    }
    public jsonRepresentation(): JsonRepresentationContext | null {
        return this.getRuleContext(0, JsonRepresentationContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterJsonArray) {
             listener.enterJsonArray(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitJsonArray) {
             listener.exitJsonArray(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitJsonArray) {
            return visitor.visitJsonArray(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleCaseContext extends PrimaryExpressionContext {
    public _operand?: ExpressionContext;
    public _elseExpression?: ExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CASE, 0)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.END, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public whenClause(): WhenClauseContext[];
    public whenClause(i: number): WhenClauseContext | null;
    public whenClause(i?: number): WhenClauseContext[] | WhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenClauseContext);
        }

        return this.getRuleContext(i, WhenClauseContext);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ELSE, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSimpleCase) {
             listener.enterSimpleCase(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSimpleCase) {
             listener.exitSimpleCase(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSimpleCase) {
            return visitor.visitSimpleCase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnReferenceContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterColumnReference) {
             listener.enterColumnReference(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitColumnReference) {
             listener.exitColumnReference(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitColumnReference) {
            return visitor.visitColumnReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NullLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NULL(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.NULL, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterNullLiteral) {
             listener.enterNullLiteral(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitNullLiteral) {
             listener.exitNullLiteral(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitNullLiteral) {
            return visitor.visitNullLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RowConstructorContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ROW, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterRowConstructor) {
             listener.enterRowConstructor(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitRowConstructor) {
             listener.exitRowConstructor(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitRowConstructor) {
            return visitor.visitRowConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SubscriptContext extends PrimaryExpressionContext {
    public _value?: PrimaryExpressionContext;
    public _index?: ValueExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSubscript) {
             listener.enterSubscript(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSubscript) {
             listener.exitSubscript(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSubscript) {
            return visitor.visitSubscript(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonExistsContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public JSON_EXISTS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.JSON_EXISTS, 0)!;
    }
    public jsonPathInvocation(): JsonPathInvocationContext {
        return this.getRuleContext(0, JsonPathInvocationContext)!;
    }
    public jsonExistsErrorBehavior(): JsonExistsErrorBehaviorContext | null {
        return this.getRuleContext(0, JsonExistsErrorBehaviorContext);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ON, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ERROR, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterJsonExists) {
             listener.enterJsonExists(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitJsonExists) {
             listener.exitJsonExists(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitJsonExists) {
            return visitor.visitJsonExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentPathContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_PATH(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CURRENT_PATH, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterCurrentPath) {
             listener.enterCurrentPath(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitCurrentPath) {
             listener.exitCurrentPath(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitCurrentPath) {
            return visitor.visitCurrentPath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SubqueryExpressionContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSubqueryExpression) {
             listener.enterSubqueryExpression(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSubqueryExpression) {
             listener.exitSubqueryExpression(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSubqueryExpression) {
            return visitor.visitSubqueryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BinaryLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BINARY_LITERAL(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.BINARY_LITERAL, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterBinaryLiteral) {
             listener.enterBinaryLiteral(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitBinaryLiteral) {
             listener.exitBinaryLiteral(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitBinaryLiteral) {
            return visitor.visitBinaryLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentUserContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_USER(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CURRENT_USER, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterCurrentUser) {
             listener.enterCurrentUser(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitCurrentUser) {
             listener.exitCurrentUser(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitCurrentUser) {
            return visitor.visitCurrentUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonQueryContext extends PrimaryExpressionContext {
    public _emptyBehavior?: JsonQueryBehaviorContext;
    public _errorBehavior?: JsonQueryBehaviorContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public JSON_QUERY(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.JSON_QUERY, 0)!;
    }
    public jsonPathInvocation(): JsonPathInvocationContext {
        return this.getRuleContext(0, JsonPathInvocationContext)!;
    }
    public RETURNING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.RETURNING, 0);
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public jsonQueryWrapperBehavior(): JsonQueryWrapperBehaviorContext | null {
        return this.getRuleContext(0, JsonQueryWrapperBehaviorContext);
    }
    public WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WRAPPER, 0);
    }
    public QUOTES(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.QUOTES, 0);
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.ON);
    	} else {
    		return this.getToken(SqlBaseParser.ON, i);
    	}
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EMPTY, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ERROR, 0);
    }
    public KEEP(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.KEEP, 0);
    }
    public OMIT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.OMIT, 0);
    }
    public jsonQueryBehavior(): JsonQueryBehaviorContext[];
    public jsonQueryBehavior(i: number): JsonQueryBehaviorContext | null;
    public jsonQueryBehavior(i?: number): JsonQueryBehaviorContext[] | JsonQueryBehaviorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonQueryBehaviorContext);
        }

        return this.getRuleContext(i, JsonQueryBehaviorContext);
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FORMAT, 0);
    }
    public jsonRepresentation(): JsonRepresentationContext | null {
        return this.getRuleContext(0, JsonRepresentationContext);
    }
    public SCALAR(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SCALAR, 0);
    }
    public TEXT_STRING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TEXT_STRING, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterJsonQuery) {
             listener.enterJsonQuery(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitJsonQuery) {
             listener.exitJsonQuery(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitJsonQuery) {
            return visitor.visitJsonQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MeasureContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public over(): OverContext {
        return this.getRuleContext(0, OverContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterMeasure) {
             listener.enterMeasure(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitMeasure) {
             listener.exitMeasure(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitMeasure) {
            return visitor.visitMeasure(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExtractContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXTRACT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.EXTRACT, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.FROM, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterExtract) {
             listener.enterExtract(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitExtract) {
             listener.exitExtract(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitExtract) {
            return visitor.visitExtract(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StringLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterStringLiteral) {
             listener.enterStringLiteral(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitStringLiteral) {
             listener.exitStringLiteral(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitStringLiteral) {
            return visitor.visitStringLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArrayConstructorContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ARRAY(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ARRAY, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterArrayConstructor) {
             listener.enterArrayConstructor(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitArrayConstructor) {
             listener.exitArrayConstructor(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitArrayConstructor) {
            return visitor.visitArrayConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class FunctionCallContext extends PrimaryExpressionContext {
    public _label?: IdentifierContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ASTERISK, 0);
    }
    public processingMode(): ProcessingModeContext | null {
        return this.getRuleContext(0, ProcessingModeContext);
    }
    public filter(): FilterContext | null {
        return this.getRuleContext(0, FilterContext);
    }
    public over(): OverContext | null {
        return this.getRuleContext(0, OverContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ORDER, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.BY, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public nullTreatment(): NullTreatmentContext | null {
        return this.getRuleContext(0, NullTreatmentContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterFunctionCall) {
             listener.enterFunctionCall(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitFunctionCall) {
             listener.exitFunctionCall(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitFunctionCall) {
            return visitor.visitFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentSchemaContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_SCHEMA(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CURRENT_SCHEMA, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterCurrentSchema) {
             listener.enterCurrentSchema(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitCurrentSchema) {
             listener.exitCurrentSchema(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitCurrentSchema) {
            return visitor.visitCurrentSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExistsContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXISTS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.EXISTS, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterExists) {
             listener.enterExists(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitExists) {
             listener.exitExists(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitExists) {
            return visitor.visitExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PositionContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public POSITION(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.POSITION, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public IN(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.IN, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterPosition) {
             listener.enterPosition(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitPosition) {
             listener.exitPosition(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitPosition) {
            return visitor.visitPosition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ListaggContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public LISTAGG(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.LISTAGG, 0)!;
    }
    public WITHIN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WITHIN, 0);
    }
    public GROUP(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.GROUP, 0);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ORDER, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.BY, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ON, 0);
    }
    public OVERFLOW(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.OVERFLOW, 0);
    }
    public listAggOverflowBehavior(): ListAggOverflowBehaviorContext | null {
        return this.getRuleContext(0, ListAggOverflowBehaviorContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterListagg) {
             listener.enterListagg(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitListagg) {
             listener.exitListagg(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitListagg) {
            return visitor.visitListagg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SearchedCaseContext extends PrimaryExpressionContext {
    public _elseExpression?: ExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CASE, 0)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.END, 0)!;
    }
    public whenClause(): WhenClauseContext[];
    public whenClause(i: number): WhenClauseContext | null;
    public whenClause(i?: number): WhenClauseContext[] | WhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenClauseContext);
        }

        return this.getRuleContext(i, WhenClauseContext);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ELSE, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSearchedCase) {
             listener.enterSearchedCase(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSearchedCase) {
             listener.exitSearchedCase(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSearchedCase) {
            return visitor.visitSearchedCase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentCatalogContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_CATALOG(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CURRENT_CATALOG, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterCurrentCatalog) {
             listener.enterCurrentCatalog(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitCurrentCatalog) {
             listener.exitCurrentCatalog(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitCurrentCatalog) {
            return visitor.visitCurrentCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GroupingOperationContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public GROUPING(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.GROUPING, 0)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterGroupingOperation) {
             listener.enterGroupingOperation(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitGroupingOperation) {
             listener.exitGroupingOperation(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitGroupingOperation) {
            return visitor.visitGroupingOperation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonPathInvocationContext extends antlr.ParserRuleContext {
    public _path?: StringContext;
    public _pathName?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public jsonValueExpression(): JsonValueExpressionContext {
        return this.getRuleContext(0, JsonValueExpressionContext)!;
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.AS, 0);
    }
    public PASSING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PASSING, 0);
    }
    public jsonArgument(): JsonArgumentContext[];
    public jsonArgument(i: number): JsonArgumentContext | null;
    public jsonArgument(i?: number): JsonArgumentContext[] | JsonArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonArgumentContext);
        }

        return this.getRuleContext(i, JsonArgumentContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_jsonPathInvocation;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterJsonPathInvocation) {
             listener.enterJsonPathInvocation(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitJsonPathInvocation) {
             listener.exitJsonPathInvocation(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitJsonPathInvocation) {
            return visitor.visitJsonPathInvocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FORMAT, 0);
    }
    public jsonRepresentation(): JsonRepresentationContext | null {
        return this.getRuleContext(0, JsonRepresentationContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_jsonValueExpression;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterJsonValueExpression) {
             listener.enterJsonValueExpression(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitJsonValueExpression) {
             listener.exitJsonValueExpression(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitJsonValueExpression) {
            return visitor.visitJsonValueExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonRepresentationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.JSON, 0)!;
    }
    public ENCODING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ENCODING, 0);
    }
    public UTF8(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.UTF8, 0);
    }
    public UTF16(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.UTF16, 0);
    }
    public UTF32(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.UTF32, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_jsonRepresentation;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterJsonRepresentation) {
             listener.enterJsonRepresentation(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitJsonRepresentation) {
             listener.exitJsonRepresentation(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitJsonRepresentation) {
            return visitor.visitJsonRepresentation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public jsonValueExpression(): JsonValueExpressionContext {
        return this.getRuleContext(0, JsonValueExpressionContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.AS, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_jsonArgument;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterJsonArgument) {
             listener.enterJsonArgument(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitJsonArgument) {
             listener.exitJsonArgument(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitJsonArgument) {
            return visitor.visitJsonArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonExistsErrorBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TRUE, 0);
    }
    public FALSE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FALSE, 0);
    }
    public UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.UNKNOWN, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ERROR, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_jsonExistsErrorBehavior;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterJsonExistsErrorBehavior) {
             listener.enterJsonExistsErrorBehavior(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitJsonExistsErrorBehavior) {
             listener.exitJsonExistsErrorBehavior(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitJsonExistsErrorBehavior) {
            return visitor.visitJsonExistsErrorBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonValueBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ERROR, 0);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NULL, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.DEFAULT, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_jsonValueBehavior;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterJsonValueBehavior) {
             listener.enterJsonValueBehavior(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitJsonValueBehavior) {
             listener.exitJsonValueBehavior(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitJsonValueBehavior) {
            return visitor.visitJsonValueBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonQueryWrapperBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WITHOUT, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ARRAY, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WITH, 0);
    }
    public CONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.CONDITIONAL, 0);
    }
    public UNCONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.UNCONDITIONAL, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_jsonQueryWrapperBehavior;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterJsonQueryWrapperBehavior) {
             listener.enterJsonQueryWrapperBehavior(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitJsonQueryWrapperBehavior) {
             listener.exitJsonQueryWrapperBehavior(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitJsonQueryWrapperBehavior) {
            return visitor.visitJsonQueryWrapperBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonQueryBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ERROR, 0);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NULL, 0);
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EMPTY, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ARRAY, 0);
    }
    public OBJECT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.OBJECT, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_jsonQueryBehavior;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterJsonQueryBehavior) {
             listener.enterJsonQueryBehavior(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitJsonQueryBehavior) {
             listener.exitJsonQueryBehavior(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitJsonQueryBehavior) {
            return visitor.visitJsonQueryBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonObjectMemberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public VALUE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.VALUE, 0);
    }
    public jsonValueExpression(): JsonValueExpressionContext {
        return this.getRuleContext(0, JsonValueExpressionContext)!;
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.KEY, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_jsonObjectMember;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterJsonObjectMember) {
             listener.enterJsonObjectMember(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitJsonObjectMember) {
             listener.exitJsonObjectMember(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitJsonObjectMember) {
            return visitor.visitJsonObjectMember(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcessingModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RUNNING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.RUNNING, 0);
    }
    public FINAL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FINAL, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_processingMode;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterProcessingMode) {
             listener.enterProcessingMode(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitProcessingMode) {
             listener.exitProcessingMode(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitProcessingMode) {
            return visitor.visitProcessingMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NullTreatmentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IGNORE, 0);
    }
    public NULLS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.NULLS, 0)!;
    }
    public RESPECT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.RESPECT, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_nullTreatment;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterNullTreatment) {
             listener.enterNullTreatment(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitNullTreatment) {
             listener.exitNullTreatment(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitNullTreatment) {
            return visitor.visitNullTreatment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_string;
    }
    public override copyFrom(ctx: StringContext): void {
        super.copyFrom(ctx);
    }
}
export class UnicodeStringLiteralContext extends StringContext {
    public constructor(ctx: StringContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UNICODE_STRING(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.UNICODE_STRING, 0)!;
    }
    public UESCAPE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.UESCAPE, 0);
    }
    public STRING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.STRING, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterUnicodeStringLiteral) {
             listener.enterUnicodeStringLiteral(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitUnicodeStringLiteral) {
             listener.exitUnicodeStringLiteral(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitUnicodeStringLiteral) {
            return visitor.visitUnicodeStringLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BasicStringLiteralContext extends StringContext {
    public constructor(ctx: StringContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public STRING(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.STRING, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterBasicStringLiteral) {
             listener.enterBasicStringLiteral(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitBasicStringLiteral) {
             listener.exitBasicStringLiteral(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitBasicStringLiteral) {
            return visitor.visitBasicStringLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimeZoneSpecifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_timeZoneSpecifier;
    }
    public override copyFrom(ctx: TimeZoneSpecifierContext): void {
        super.copyFrom(ctx);
    }
}
export class TimeZoneIntervalContext extends TimeZoneSpecifierContext {
    public constructor(ctx: TimeZoneSpecifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TIME(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TIME, 0)!;
    }
    public ZONE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ZONE, 0)!;
    }
    public interval(): IntervalContext {
        return this.getRuleContext(0, IntervalContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterTimeZoneInterval) {
             listener.enterTimeZoneInterval(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitTimeZoneInterval) {
             listener.exitTimeZoneInterval(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitTimeZoneInterval) {
            return visitor.visitTimeZoneInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TimeZoneStringContext extends TimeZoneSpecifierContext {
    public constructor(ctx: TimeZoneSpecifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TIME(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TIME, 0)!;
    }
    public ZONE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ZONE, 0)!;
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterTimeZoneString) {
             listener.enterTimeZoneString(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitTimeZoneString) {
             listener.exitTimeZoneString(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitTimeZoneString) {
            return visitor.visitTimeZoneString(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComparisonOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EQ, 0);
    }
    public NEQ(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NEQ, 0);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.LT, 0);
    }
    public LTE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.LTE, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.GT, 0);
    }
    public GTE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.GTE, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_comparisonOperator;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterComparisonOperator) {
             listener.enterComparisonOperator(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitComparisonOperator) {
             listener.exitComparisonOperator(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitComparisonOperator) {
            return visitor.visitComparisonOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComparisonQuantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ALL, 0);
    }
    public SOME(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SOME, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ANY, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_comparisonQuantifier;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterComparisonQuantifier) {
             listener.enterComparisonQuantifier(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitComparisonQuantifier) {
             listener.exitComparisonQuantifier(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitComparisonQuantifier) {
            return visitor.visitComparisonQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TRUE, 0);
    }
    public FALSE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FALSE, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_booleanValue;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterBooleanValue) {
             listener.enterBooleanValue(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitBooleanValue) {
             listener.exitBooleanValue(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitBooleanValue) {
            return visitor.visitBooleanValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalContext extends antlr.ParserRuleContext {
    public _sign?: Token | null;
    public _from_?: IntervalFieldContext;
    public _to?: IntervalFieldContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTERVAL(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.INTERVAL, 0)!;
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public intervalField(): IntervalFieldContext[];
    public intervalField(i: number): IntervalFieldContext | null;
    public intervalField(i?: number): IntervalFieldContext[] | IntervalFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IntervalFieldContext);
        }

        return this.getRuleContext(i, IntervalFieldContext);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TO, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.MINUS, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_interval;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterInterval) {
             listener.enterInterval(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitInterval) {
             listener.exitInterval(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitInterval) {
            return visitor.visitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalFieldContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public YEAR(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.YEAR, 0);
    }
    public MONTH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.MONTH, 0);
    }
    public DAY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.DAY, 0);
    }
    public HOUR(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.HOUR, 0);
    }
    public MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.MINUTE, 0);
    }
    public SECOND(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SECOND, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_intervalField;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterIntervalField) {
             listener.enterIntervalField(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitIntervalField) {
             listener.exitIntervalField(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitIntervalField) {
            return visitor.visitIntervalField(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NormalFormContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NFD(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NFD, 0);
    }
    public NFC(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NFC, 0);
    }
    public NFKD(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NFKD, 0);
    }
    public NFKC(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NFKC, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_normalForm;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterNormalForm) {
             listener.enterNormalForm(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitNormalForm) {
             listener.exitNormalForm(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitNormalForm) {
            return visitor.visitNormalForm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_type;
    }
    public override copyFrom(ctx: TypeContext): void {
        super.copyFrom(ctx);
    }
}
export class RowTypeContext extends TypeContext {
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ROW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ROW, 0)!;
    }
    public rowField(): RowFieldContext[];
    public rowField(i: number): RowFieldContext | null;
    public rowField(i?: number): RowFieldContext[] | RowFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowFieldContext);
        }

        return this.getRuleContext(i, RowFieldContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterRowType) {
             listener.enterRowType(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitRowType) {
             listener.exitRowType(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitRowType) {
            return visitor.visitRowType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IntervalTypeContext extends TypeContext {
    public _from_?: IntervalFieldContext;
    public _to?: IntervalFieldContext;
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTERVAL(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.INTERVAL, 0)!;
    }
    public intervalField(): IntervalFieldContext[];
    public intervalField(i: number): IntervalFieldContext | null;
    public intervalField(i?: number): IntervalFieldContext[] | IntervalFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IntervalFieldContext);
        }

        return this.getRuleContext(i, IntervalFieldContext);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TO, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterIntervalType) {
             listener.enterIntervalType(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitIntervalType) {
             listener.exitIntervalType(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitIntervalType) {
            return visitor.visitIntervalType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArrayTypeContext extends TypeContext {
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public ARRAY(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ARRAY, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterArrayType) {
             listener.enterArrayType(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitArrayType) {
             listener.exitArrayType(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitArrayType) {
            return visitor.visitArrayType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DoublePrecisionTypeContext extends TypeContext {
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DOUBLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.DOUBLE, 0)!;
    }
    public PRECISION(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.PRECISION, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterDoublePrecisionType) {
             listener.enterDoublePrecisionType(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitDoublePrecisionType) {
             listener.exitDoublePrecisionType(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitDoublePrecisionType) {
            return visitor.visitDoublePrecisionType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LegacyArrayTypeContext extends TypeContext {
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ARRAY(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ARRAY, 0)!;
    }
    public LT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.LT, 0)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public GT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.GT, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterLegacyArrayType) {
             listener.enterLegacyArrayType(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitLegacyArrayType) {
             listener.exitLegacyArrayType(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitLegacyArrayType) {
            return visitor.visitLegacyArrayType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GenericTypeContext extends TypeContext {
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public typeParameter(): TypeParameterContext[];
    public typeParameter(i: number): TypeParameterContext | null;
    public typeParameter(i?: number): TypeParameterContext[] | TypeParameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypeParameterContext);
        }

        return this.getRuleContext(i, TypeParameterContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterGenericType) {
             listener.enterGenericType(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitGenericType) {
             listener.exitGenericType(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitGenericType) {
            return visitor.visitGenericType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DateTimeTypeContext extends TypeContext {
    public _base?: Token | null;
    public _precision?: TypeParameterContext;
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TIMESTAMP, 0);
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WITHOUT, 0);
    }
    public TIME(): antlr.TerminalNode[];
    public TIME(i: number): antlr.TerminalNode | null;
    public TIME(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.TIME);
    	} else {
    		return this.getToken(SqlBaseParser.TIME, i);
    	}
    }
    public ZONE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ZONE, 0);
    }
    public typeParameter(): TypeParameterContext | null {
        return this.getRuleContext(0, TypeParameterContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WITH, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterDateTimeType) {
             listener.enterDateTimeType(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitDateTimeType) {
             listener.exitDateTimeType(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitDateTimeType) {
            return visitor.visitDateTimeType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LegacyMapTypeContext extends TypeContext {
    public _keyType?: TypeContext;
    public _valueType?: TypeContext;
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MAP(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.MAP, 0)!;
    }
    public LT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.LT, 0)!;
    }
    public GT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.GT, 0)!;
    }
    public type_(): TypeContext[];
    public type_(i: number): TypeContext | null;
    public type_(i?: number): TypeContext[] | TypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypeContext);
        }

        return this.getRuleContext(i, TypeContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterLegacyMapType) {
             listener.enterLegacyMapType(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitLegacyMapType) {
             listener.exitLegacyMapType(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitLegacyMapType) {
            return visitor.visitLegacyMapType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowFieldContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_rowField;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterRowField) {
             listener.enterRowField(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitRowField) {
             listener.exitRowField(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitRowField) {
            return visitor.visitRowField(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeParameterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_typeParameter;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterTypeParameter) {
             listener.enterTypeParameter(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitTypeParameter) {
             listener.exitTypeParameter(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitTypeParameter) {
            return visitor.visitTypeParameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenClauseContext extends antlr.ParserRuleContext {
    public _condition?: ExpressionContext;
    public _result?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHEN(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.WHEN, 0)!;
    }
    public THEN(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.THEN, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_whenClause;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterWhenClause) {
             listener.enterWhenClause(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitWhenClause) {
             listener.exitWhenClause(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitWhenClause) {
            return visitor.visitWhenClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FILTER(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.FILTER, 0)!;
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.WHERE, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_filter;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterFilter) {
             listener.enterFilter(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitFilter) {
             listener.exitFilter(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitFilter) {
            return visitor.visitFilter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MergeCaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_mergeCase;
    }
    public override copyFrom(ctx: MergeCaseContext): void {
        super.copyFrom(ctx);
    }
}
export class MergeInsertContext extends MergeCaseContext {
    public _condition?: ExpressionContext;
    public _identifier?: IdentifierContext;
    public _targets: IdentifierContext[] = [];
    public _expression?: ExpressionContext;
    public _values: ExpressionContext[] = [];
    public constructor(ctx: MergeCaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public WHEN(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.WHEN, 0)!;
    }
    public NOT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.NOT, 0)!;
    }
    public MATCHED(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.MATCHED, 0)!;
    }
    public THEN(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.THEN, 0)!;
    }
    public INSERT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.INSERT, 0)!;
    }
    public VALUES(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.VALUES, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.AND, 0);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterMergeInsert) {
             listener.enterMergeInsert(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitMergeInsert) {
             listener.exitMergeInsert(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitMergeInsert) {
            return visitor.visitMergeInsert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MergeUpdateContext extends MergeCaseContext {
    public _condition?: ExpressionContext;
    public _identifier?: IdentifierContext;
    public _targets: IdentifierContext[] = [];
    public _expression?: ExpressionContext;
    public _values: ExpressionContext[] = [];
    public constructor(ctx: MergeCaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public WHEN(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.WHEN, 0)!;
    }
    public MATCHED(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.MATCHED, 0)!;
    }
    public THEN(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.THEN, 0)!;
    }
    public UPDATE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.UPDATE, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SET, 0)!;
    }
    public EQ(): antlr.TerminalNode[];
    public EQ(i: number): antlr.TerminalNode | null;
    public EQ(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.EQ);
    	} else {
    		return this.getToken(SqlBaseParser.EQ, i);
    	}
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.AND, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterMergeUpdate) {
             listener.enterMergeUpdate(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitMergeUpdate) {
             listener.exitMergeUpdate(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitMergeUpdate) {
            return visitor.visitMergeUpdate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MergeDeleteContext extends MergeCaseContext {
    public _condition?: ExpressionContext;
    public constructor(ctx: MergeCaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public WHEN(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.WHEN, 0)!;
    }
    public MATCHED(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.MATCHED, 0)!;
    }
    public THEN(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.THEN, 0)!;
    }
    public DELETE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.DELETE, 0)!;
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.AND, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterMergeDelete) {
             listener.enterMergeDelete(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitMergeDelete) {
             listener.exitMergeDelete(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitMergeDelete) {
            return visitor.visitMergeDelete(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OverContext extends antlr.ParserRuleContext {
    public _windowName?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OVER(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.OVER, 0)!;
    }
    public windowSpecification(): WindowSpecificationContext | null {
        return this.getRuleContext(0, WindowSpecificationContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_over;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterOver) {
             listener.enterOver(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitOver) {
             listener.exitOver(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitOver) {
            return visitor.visitOver(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public frameExtent(): FrameExtentContext {
        return this.getRuleContext(0, FrameExtentContext)!;
    }
    public MEASURES(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.MEASURES, 0);
    }
    public measureDefinition(): MeasureDefinitionContext[];
    public measureDefinition(i: number): MeasureDefinitionContext | null;
    public measureDefinition(i?: number): MeasureDefinitionContext[] | MeasureDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MeasureDefinitionContext);
        }

        return this.getRuleContext(i, MeasureDefinitionContext);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.AFTER, 0);
    }
    public MATCH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.MATCH, 0);
    }
    public skipTo(): SkipToContext | null {
        return this.getRuleContext(0, SkipToContext);
    }
    public PATTERN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PATTERN, 0);
    }
    public rowPattern(): RowPatternContext | null {
        return this.getRuleContext(0, RowPatternContext);
    }
    public SUBSET(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SUBSET, 0);
    }
    public subsetDefinition(): SubsetDefinitionContext[];
    public subsetDefinition(i: number): SubsetDefinitionContext | null;
    public subsetDefinition(i?: number): SubsetDefinitionContext[] | SubsetDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SubsetDefinitionContext);
        }

        return this.getRuleContext(i, SubsetDefinitionContext);
    }
    public DEFINE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.DEFINE, 0);
    }
    public variableDefinition(): VariableDefinitionContext[];
    public variableDefinition(i: number): VariableDefinitionContext | null;
    public variableDefinition(i?: number): VariableDefinitionContext[] | VariableDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(VariableDefinitionContext);
        }

        return this.getRuleContext(i, VariableDefinitionContext);
    }
    public INITIAL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.INITIAL, 0);
    }
    public SEEK(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SEEK, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_windowFrame;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterWindowFrame) {
             listener.enterWindowFrame(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitWindowFrame) {
             listener.exitWindowFrame(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitWindowFrame) {
            return visitor.visitWindowFrame(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FrameExtentContext extends antlr.ParserRuleContext {
    public _frameType?: Token | null;
    public _start?: FrameBoundContext;
    public _end?: FrameBoundContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.RANGE, 0);
    }
    public frameBound(): FrameBoundContext[];
    public frameBound(i: number): FrameBoundContext | null;
    public frameBound(i?: number): FrameBoundContext[] | FrameBoundContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FrameBoundContext);
        }

        return this.getRuleContext(i, FrameBoundContext);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ROWS, 0);
    }
    public GROUPS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.GROUPS, 0);
    }
    public BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.BETWEEN, 0);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.AND, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_frameExtent;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterFrameExtent) {
             listener.enterFrameExtent(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitFrameExtent) {
             listener.exitFrameExtent(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitFrameExtent) {
            return visitor.visitFrameExtent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FrameBoundContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_frameBound;
    }
    public override copyFrom(ctx: FrameBoundContext): void {
        super.copyFrom(ctx);
    }
}
export class BoundedFrameContext extends FrameBoundContext {
    public _boundType?: Token | null;
    public constructor(ctx: FrameBoundContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PRECEDING, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FOLLOWING, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterBoundedFrame) {
             listener.enterBoundedFrame(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitBoundedFrame) {
             listener.exitBoundedFrame(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitBoundedFrame) {
            return visitor.visitBoundedFrame(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnboundedFrameContext extends FrameBoundContext {
    public _boundType?: Token | null;
    public constructor(ctx: FrameBoundContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UNBOUNDED(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.UNBOUNDED, 0)!;
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PRECEDING, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FOLLOWING, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterUnboundedFrame) {
             listener.enterUnboundedFrame(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitUnboundedFrame) {
             listener.exitUnboundedFrame(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitUnboundedFrame) {
            return visitor.visitUnboundedFrame(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentRowBoundContext extends FrameBoundContext {
    public constructor(ctx: FrameBoundContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CURRENT, 0)!;
    }
    public ROW(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ROW, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterCurrentRowBound) {
             listener.enterCurrentRowBound(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitCurrentRowBound) {
             listener.exitCurrentRowBound(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitCurrentRowBound) {
            return visitor.visitCurrentRowBound(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowPatternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_rowPattern;
    }
    public override copyFrom(ctx: RowPatternContext): void {
        super.copyFrom(ctx);
    }
}
export class QuantifiedPrimaryContext extends RowPatternContext {
    public constructor(ctx: RowPatternContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public patternPrimary(): PatternPrimaryContext {
        return this.getRuleContext(0, PatternPrimaryContext)!;
    }
    public patternQuantifier(): PatternQuantifierContext | null {
        return this.getRuleContext(0, PatternQuantifierContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterQuantifiedPrimary) {
             listener.enterQuantifiedPrimary(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitQuantifiedPrimary) {
             listener.exitQuantifiedPrimary(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitQuantifiedPrimary) {
            return visitor.visitQuantifiedPrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PatternConcatenationContext extends RowPatternContext {
    public constructor(ctx: RowPatternContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public rowPattern(): RowPatternContext[];
    public rowPattern(i: number): RowPatternContext | null;
    public rowPattern(i?: number): RowPatternContext[] | RowPatternContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowPatternContext);
        }

        return this.getRuleContext(i, RowPatternContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterPatternConcatenation) {
             listener.enterPatternConcatenation(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitPatternConcatenation) {
             listener.exitPatternConcatenation(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitPatternConcatenation) {
            return visitor.visitPatternConcatenation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PatternAlternationContext extends RowPatternContext {
    public constructor(ctx: RowPatternContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public rowPattern(): RowPatternContext[];
    public rowPattern(i: number): RowPatternContext | null;
    public rowPattern(i?: number): RowPatternContext[] | RowPatternContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowPatternContext);
        }

        return this.getRuleContext(i, RowPatternContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterPatternAlternation) {
             listener.enterPatternAlternation(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitPatternAlternation) {
             listener.exitPatternAlternation(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitPatternAlternation) {
            return visitor.visitPatternAlternation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PatternPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_patternPrimary;
    }
    public override copyFrom(ctx: PatternPrimaryContext): void {
        super.copyFrom(ctx);
    }
}
export class PatternPermutationContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PERMUTE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.PERMUTE, 0)!;
    }
    public rowPattern(): RowPatternContext[];
    public rowPattern(i: number): RowPatternContext | null;
    public rowPattern(i?: number): RowPatternContext[] | RowPatternContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowPatternContext);
        }

        return this.getRuleContext(i, RowPatternContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterPatternPermutation) {
             listener.enterPatternPermutation(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitPatternPermutation) {
             listener.exitPatternPermutation(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitPatternPermutation) {
            return visitor.visitPatternPermutation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionEndAnchorContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterPartitionEndAnchor) {
             listener.enterPartitionEndAnchor(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitPartitionEndAnchor) {
             listener.exitPartitionEndAnchor(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitPartitionEndAnchor) {
            return visitor.visitPartitionEndAnchor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PatternVariableContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterPatternVariable) {
             listener.enterPatternVariable(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitPatternVariable) {
             listener.exitPatternVariable(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitPatternVariable) {
            return visitor.visitPatternVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExcludedPatternContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public rowPattern(): RowPatternContext {
        return this.getRuleContext(0, RowPatternContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterExcludedPattern) {
             listener.enterExcludedPattern(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitExcludedPattern) {
             listener.exitExcludedPattern(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitExcludedPattern) {
            return visitor.visitExcludedPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionStartAnchorContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterPartitionStartAnchor) {
             listener.enterPartitionStartAnchor(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitPartitionStartAnchor) {
             listener.exitPartitionStartAnchor(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitPartitionStartAnchor) {
            return visitor.visitPartitionStartAnchor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class EmptyPatternContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterEmptyPattern) {
             listener.enterEmptyPattern(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitEmptyPattern) {
             listener.exitEmptyPattern(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitEmptyPattern) {
            return visitor.visitEmptyPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GroupedPatternContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public rowPattern(): RowPatternContext {
        return this.getRuleContext(0, RowPatternContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterGroupedPattern) {
             listener.enterGroupedPattern(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitGroupedPattern) {
             listener.exitGroupedPattern(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitGroupedPattern) {
            return visitor.visitGroupedPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PatternQuantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_patternQuantifier;
    }
    public override copyFrom(ctx: PatternQuantifierContext): void {
        super.copyFrom(ctx);
    }
}
export class ZeroOrMoreQuantifierContext extends PatternQuantifierContext {
    public _reluctant?: Token | null;
    public constructor(ctx: PatternQuantifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ASTERISK(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ASTERISK, 0)!;
    }
    public QUESTION_MARK(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.QUESTION_MARK, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterZeroOrMoreQuantifier) {
             listener.enterZeroOrMoreQuantifier(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitZeroOrMoreQuantifier) {
             listener.exitZeroOrMoreQuantifier(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitZeroOrMoreQuantifier) {
            return visitor.visitZeroOrMoreQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class OneOrMoreQuantifierContext extends PatternQuantifierContext {
    public _reluctant?: Token | null;
    public constructor(ctx: PatternQuantifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PLUS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.PLUS, 0)!;
    }
    public QUESTION_MARK(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.QUESTION_MARK, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterOneOrMoreQuantifier) {
             listener.enterOneOrMoreQuantifier(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitOneOrMoreQuantifier) {
             listener.exitOneOrMoreQuantifier(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitOneOrMoreQuantifier) {
            return visitor.visitOneOrMoreQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ZeroOrOneQuantifierContext extends PatternQuantifierContext {
    public _reluctant?: Token | null;
    public constructor(ctx: PatternQuantifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public QUESTION_MARK(): antlr.TerminalNode[];
    public QUESTION_MARK(i: number): antlr.TerminalNode | null;
    public QUESTION_MARK(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.QUESTION_MARK);
    	} else {
    		return this.getToken(SqlBaseParser.QUESTION_MARK, i);
    	}
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterZeroOrOneQuantifier) {
             listener.enterZeroOrOneQuantifier(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitZeroOrOneQuantifier) {
             listener.exitZeroOrOneQuantifier(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitZeroOrOneQuantifier) {
            return visitor.visitZeroOrOneQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RangeQuantifierContext extends PatternQuantifierContext {
    public _exactly?: Token | null;
    public _reluctant?: Token | null;
    public _atLeast?: Token | null;
    public _atMost?: Token | null;
    public constructor(ctx: PatternQuantifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTEGER_VALUE(): antlr.TerminalNode[];
    public INTEGER_VALUE(i: number): antlr.TerminalNode | null;
    public INTEGER_VALUE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlBaseParser.INTEGER_VALUE);
    	} else {
    		return this.getToken(SqlBaseParser.INTEGER_VALUE, i);
    	}
    }
    public QUESTION_MARK(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.QUESTION_MARK, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterRangeQuantifier) {
             listener.enterRangeQuantifier(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitRangeQuantifier) {
             listener.exitRangeQuantifier(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitRangeQuantifier) {
            return visitor.visitRangeQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateAssignmentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.EQ, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_updateAssignment;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterUpdateAssignment) {
             listener.enterUpdateAssignment(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitUpdateAssignment) {
             listener.exitUpdateAssignment(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitUpdateAssignment) {
            return visitor.visitUpdateAssignment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_explainOption;
    }
    public override copyFrom(ctx: ExplainOptionContext): void {
        super.copyFrom(ctx);
    }
}
export class ExplainFormatContext extends ExplainOptionContext {
    public _value?: Token | null;
    public constructor(ctx: ExplainOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public FORMAT(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.FORMAT, 0)!;
    }
    public TEXT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TEXT, 0);
    }
    public GRAPHVIZ(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.GRAPHVIZ, 0);
    }
    public JSON(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.JSON, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterExplainFormat) {
             listener.enterExplainFormat(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitExplainFormat) {
             listener.exitExplainFormat(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitExplainFormat) {
            return visitor.visitExplainFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainTypeContext extends ExplainOptionContext {
    public _value?: Token | null;
    public constructor(ctx: ExplainOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.TYPE, 0)!;
    }
    public LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.LOGICAL, 0);
    }
    public DISTRIBUTED(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.DISTRIBUTED, 0);
    }
    public VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.VALIDATE, 0);
    }
    public IO(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IO, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterExplainType) {
             listener.enterExplainType(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitExplainType) {
             listener.exitExplainType(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitExplainType) {
            return visitor.visitExplainType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_transactionMode;
    }
    public override copyFrom(ctx: TransactionModeContext): void {
        super.copyFrom(ctx);
    }
}
export class TransactionAccessModeContext extends TransactionModeContext {
    public _accessMode?: Token | null;
    public constructor(ctx: TransactionModeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public READ(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.READ, 0)!;
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ONLY, 0);
    }
    public WRITE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WRITE, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterTransactionAccessMode) {
             listener.enterTransactionAccessMode(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitTransactionAccessMode) {
             listener.exitTransactionAccessMode(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitTransactionAccessMode) {
            return visitor.visitTransactionAccessMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IsolationLevelContext extends TransactionModeContext {
    public constructor(ctx: TransactionModeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ISOLATION(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ISOLATION, 0)!;
    }
    public LEVEL(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.LEVEL, 0)!;
    }
    public levelOfIsolation(): LevelOfIsolationContext {
        return this.getRuleContext(0, LevelOfIsolationContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterIsolationLevel) {
             listener.enterIsolationLevel(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitIsolationLevel) {
             listener.exitIsolationLevel(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitIsolationLevel) {
            return visitor.visitIsolationLevel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LevelOfIsolationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_levelOfIsolation;
    }
    public override copyFrom(ctx: LevelOfIsolationContext): void {
        super.copyFrom(ctx);
    }
}
export class ReadUncommittedContext extends LevelOfIsolationContext {
    public constructor(ctx: LevelOfIsolationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public READ(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.READ, 0)!;
    }
    public UNCOMMITTED(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.UNCOMMITTED, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterReadUncommitted) {
             listener.enterReadUncommitted(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitReadUncommitted) {
             listener.exitReadUncommitted(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitReadUncommitted) {
            return visitor.visitReadUncommitted(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SerializableContext extends LevelOfIsolationContext {
    public constructor(ctx: LevelOfIsolationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SERIALIZABLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.SERIALIZABLE, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSerializable) {
             listener.enterSerializable(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSerializable) {
             listener.exitSerializable(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSerializable) {
            return visitor.visitSerializable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ReadCommittedContext extends LevelOfIsolationContext {
    public constructor(ctx: LevelOfIsolationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public READ(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.READ, 0)!;
    }
    public COMMITTED(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.COMMITTED, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterReadCommitted) {
             listener.enterReadCommitted(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitReadCommitted) {
             listener.exitReadCommitted(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitReadCommitted) {
            return visitor.visitReadCommitted(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RepeatableReadContext extends LevelOfIsolationContext {
    public constructor(ctx: LevelOfIsolationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REPEATABLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.REPEATABLE, 0)!;
    }
    public READ(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.READ, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterRepeatableRead) {
             listener.enterRepeatableRead(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitRepeatableRead) {
             listener.exitRepeatableRead(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitRepeatableRead) {
            return visitor.visitRepeatableRead(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CallArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_callArgument;
    }
    public override copyFrom(ctx: CallArgumentContext): void {
        super.copyFrom(ctx);
    }
}
export class PositionalArgumentContext extends CallArgumentContext {
    public constructor(ctx: CallArgumentContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterPositionalArgument) {
             listener.enterPositionalArgument(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitPositionalArgument) {
             listener.exitPositionalArgument(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitPositionalArgument) {
            return visitor.visitPositionalArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NamedArgumentContext extends CallArgumentContext {
    public constructor(ctx: CallArgumentContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterNamedArgument) {
             listener.enterNamedArgument(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitNamedArgument) {
             listener.exitNamedArgument(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitNamedArgument) {
            return visitor.visitNamedArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_pathElement;
    }
    public override copyFrom(ctx: PathElementContext): void {
        super.copyFrom(ctx);
    }
}
export class QualifiedArgumentContext extends PathElementContext {
    public constructor(ctx: PathElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterQualifiedArgument) {
             listener.enterQualifiedArgument(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitQualifiedArgument) {
             listener.exitQualifiedArgument(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitQualifiedArgument) {
            return visitor.visitQualifiedArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnqualifiedArgumentContext extends PathElementContext {
    public constructor(ctx: PathElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterUnqualifiedArgument) {
             listener.enterUnqualifiedArgument(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitUnqualifiedArgument) {
             listener.exitUnqualifiedArgument(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitUnqualifiedArgument) {
            return visitor.visitUnqualifiedArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pathElement(): PathElementContext[];
    public pathElement(i: number): PathElementContext | null;
    public pathElement(i?: number): PathElementContext[] | PathElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PathElementContext);
        }

        return this.getRuleContext(i, PathElementContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_pathSpecification;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterPathSpecification) {
             listener.enterPathSpecification(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitPathSpecification) {
             listener.exitPathSpecification(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitPathSpecification) {
            return visitor.visitPathSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.CREATE, 0);
    }
    public SELECT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SELECT, 0);
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.DELETE, 0);
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.INSERT, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.UPDATE, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_privilege;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterPrivilege) {
             listener.enterPrivilege(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitPrivilege) {
             listener.exitPrivilege(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitPrivilege) {
            return visitor.visitPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_qualifiedName;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterQualifiedName) {
             listener.enterQualifiedName(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitQualifiedName) {
             listener.exitQualifiedName(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitQualifiedName) {
            return visitor.visitQualifiedName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryPeriodContext extends antlr.ParserRuleContext {
    public _end?: ValueExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.FOR, 0)!;
    }
    public rangeType(): RangeTypeContext {
        return this.getRuleContext(0, RangeTypeContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.AS, 0)!;
    }
    public OF(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.OF, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_queryPeriod;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterQueryPeriod) {
             listener.enterQueryPeriod(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitQueryPeriod) {
             listener.exitQueryPeriod(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitQueryPeriod) {
            return visitor.visitQueryPeriod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RangeTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TIMESTAMP, 0);
    }
    public VERSION(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.VERSION, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_rangeType;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterRangeType) {
             listener.enterRangeType(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitRangeType) {
             listener.exitRangeType(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitRangeType) {
            return visitor.visitRangeType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_grantor;
    }
    public override copyFrom(ctx: GrantorContext): void {
        super.copyFrom(ctx);
    }
}
export class CurrentUserGrantorContext extends GrantorContext {
    public constructor(ctx: GrantorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_USER(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CURRENT_USER, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterCurrentUserGrantor) {
             listener.enterCurrentUserGrantor(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitCurrentUserGrantor) {
             listener.exitCurrentUserGrantor(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitCurrentUserGrantor) {
            return visitor.visitCurrentUserGrantor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SpecifiedPrincipalContext extends GrantorContext {
    public constructor(ctx: GrantorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterSpecifiedPrincipal) {
             listener.enterSpecifiedPrincipal(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitSpecifiedPrincipal) {
             listener.exitSpecifiedPrincipal(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitSpecifiedPrincipal) {
            return visitor.visitSpecifiedPrincipal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentRoleGrantorContext extends GrantorContext {
    public constructor(ctx: GrantorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_ROLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.CURRENT_ROLE, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterCurrentRoleGrantor) {
             listener.enterCurrentRoleGrantor(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitCurrentRoleGrantor) {
             listener.exitCurrentRoleGrantor(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitCurrentRoleGrantor) {
            return visitor.visitCurrentRoleGrantor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrincipalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_principal;
    }
    public override copyFrom(ctx: PrincipalContext): void {
        super.copyFrom(ctx);
    }
}
export class UnspecifiedPrincipalContext extends PrincipalContext {
    public constructor(ctx: PrincipalContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterUnspecifiedPrincipal) {
             listener.enterUnspecifiedPrincipal(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitUnspecifiedPrincipal) {
             listener.exitUnspecifiedPrincipal(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitUnspecifiedPrincipal) {
            return visitor.visitUnspecifiedPrincipal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UserPrincipalContext extends PrincipalContext {
    public constructor(ctx: PrincipalContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.USER, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterUserPrincipal) {
             listener.enterUserPrincipal(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitUserPrincipal) {
             listener.exitUserPrincipal(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitUserPrincipal) {
            return visitor.visitUserPrincipal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RolePrincipalContext extends PrincipalContext {
    public constructor(ctx: PrincipalContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ROLE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.ROLE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterRolePrincipal) {
             listener.enterRolePrincipal(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitRolePrincipal) {
             listener.exitRolePrincipal(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitRolePrincipal) {
            return visitor.visitRolePrincipal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RolesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_roles;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterRoles) {
             listener.enterRoles(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitRoles) {
             listener.exitRoles(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitRoles) {
            return visitor.visitRoles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_identifier;
    }
    public override copyFrom(ctx: IdentifierContext): void {
        super.copyFrom(ctx);
    }
}
export class BackQuotedIdentifierContext extends IdentifierContext {
    public constructor(ctx: IdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BACKQUOTED_IDENTIFIER(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterBackQuotedIdentifier) {
             listener.enterBackQuotedIdentifier(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitBackQuotedIdentifier) {
             listener.exitBackQuotedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitBackQuotedIdentifier) {
            return visitor.visitBackQuotedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class QuotedIdentifierContext extends IdentifierContext {
    public constructor(ctx: IdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public QUOTED_IDENTIFIER(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.QUOTED_IDENTIFIER, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterQuotedIdentifier) {
             listener.enterQuotedIdentifier(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitQuotedIdentifier) {
             listener.exitQuotedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitQuotedIdentifier) {
            return visitor.visitQuotedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DigitIdentifierContext extends IdentifierContext {
    public constructor(ctx: IdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DIGIT_IDENTIFIER(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.DIGIT_IDENTIFIER, 0)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterDigitIdentifier) {
             listener.enterDigitIdentifier(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitDigitIdentifier) {
             listener.exitDigitIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitDigitIdentifier) {
            return visitor.visitDigitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnquotedIdentifierContext extends IdentifierContext {
    public constructor(ctx: IdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IDENTIFIER, 0);
    }
    public nonReserved(): NonReservedContext | null {
        return this.getRuleContext(0, NonReservedContext);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterUnquotedIdentifier) {
             listener.enterUnquotedIdentifier(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitUnquotedIdentifier) {
             listener.exitUnquotedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitUnquotedIdentifier) {
            return visitor.visitUnquotedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_number;
    }
    public override copyFrom(ctx: NumberContext): void {
        super.copyFrom(ctx);
    }
}
export class DecimalLiteralContext extends NumberContext {
    public constructor(ctx: NumberContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DECIMAL_VALUE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.DECIMAL_VALUE, 0)!;
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.MINUS, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterDecimalLiteral) {
             listener.enterDecimalLiteral(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitDecimalLiteral) {
             listener.exitDecimalLiteral(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitDecimalLiteral) {
            return visitor.visitDecimalLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DoubleLiteralContext extends NumberContext {
    public constructor(ctx: NumberContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DOUBLE_VALUE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.DOUBLE_VALUE, 0)!;
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.MINUS, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterDoubleLiteral) {
             listener.enterDoubleLiteral(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitDoubleLiteral) {
             listener.exitDoubleLiteral(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitDoubleLiteral) {
            return visitor.visitDoubleLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IntegerLiteralContext extends NumberContext {
    public constructor(ctx: NumberContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(SqlBaseParser.INTEGER_VALUE, 0)!;
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.MINUS, 0);
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterIntegerLiteral) {
             listener.enterIntegerLiteral(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitIntegerLiteral) {
             listener.exitIntegerLiteral(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitIntegerLiteral) {
            return visitor.visitIntegerLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AuthorizationUserContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_authorizationUser;
    }
    public override copyFrom(ctx: AuthorizationUserContext): void {
        super.copyFrom(ctx);
    }
}
export class StringUserContext extends AuthorizationUserContext {
    public constructor(ctx: AuthorizationUserContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterStringUser) {
             listener.enterStringUser(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitStringUser) {
             listener.exitStringUser(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitStringUser) {
            return visitor.visitStringUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IdentifierUserContext extends AuthorizationUserContext {
    public constructor(ctx: AuthorizationUserContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterIdentifierUser) {
             listener.enterIdentifierUser(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitIdentifierUser) {
             listener.exitIdentifierUser(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitIdentifierUser) {
            return visitor.visitIdentifierUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NonReservedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ABSENT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ABSENT, 0);
    }
    public ADD(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ADD, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ADMIN, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.AFTER, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ALL, 0);
    }
    public ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ANALYZE, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ANY, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ARRAY, 0);
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ASC, 0);
    }
    public AT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.AT, 0);
    }
    public AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.AUTHORIZATION, 0);
    }
    public BERNOULLI(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.BERNOULLI, 0);
    }
    public BOTH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.BOTH, 0);
    }
    public CALL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.CALL, 0);
    }
    public CASCADE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.CASCADE, 0);
    }
    public CATALOG(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.CATALOG, 0);
    }
    public CATALOGS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.CATALOGS, 0);
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.COLUMN, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.COLUMNS, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.COMMENT, 0);
    }
    public COMMIT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.COMMIT, 0);
    }
    public COMMITTED(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.COMMITTED, 0);
    }
    public CONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.CONDITIONAL, 0);
    }
    public COPARTITION(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.COPARTITION, 0);
    }
    public COUNT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.COUNT, 0);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.CURRENT, 0);
    }
    public DATA(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.DATA, 0);
    }
    public DATE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.DATE, 0);
    }
    public DAY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.DAY, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.DEFAULT, 0);
    }
    public DEFINE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.DEFINE, 0);
    }
    public DEFINER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.DEFINER, 0);
    }
    public DENY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.DENY, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.DESC, 0);
    }
    public DESCRIPTOR(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.DESCRIPTOR, 0);
    }
    public DISTRIBUTED(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.DISTRIBUTED, 0);
    }
    public DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.DOUBLE, 0);
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EMPTY, 0);
    }
    public ENCODING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ENCODING, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ERROR, 0);
    }
    public EXCLUDING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EXCLUDING, 0);
    }
    public EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.EXPLAIN, 0);
    }
    public FETCH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FETCH, 0);
    }
    public FILTER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FILTER, 0);
    }
    public FINAL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FINAL, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FIRST, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FOLLOWING, 0);
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FORMAT, 0);
    }
    public FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.FUNCTIONS, 0);
    }
    public GRACE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.GRACE, 0);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.GRANT, 0);
    }
    public GRANTED(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.GRANTED, 0);
    }
    public GRANTS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.GRANTS, 0);
    }
    public GRAPHVIZ(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.GRAPHVIZ, 0);
    }
    public GROUPS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.GROUPS, 0);
    }
    public HOUR(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.HOUR, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IF, 0);
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IGNORE, 0);
    }
    public IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IMMEDIATE, 0);
    }
    public INCLUDING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.INCLUDING, 0);
    }
    public INITIAL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.INITIAL, 0);
    }
    public INPUT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.INPUT, 0);
    }
    public INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.INTERVAL, 0);
    }
    public INVOKER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.INVOKER, 0);
    }
    public IO(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.IO, 0);
    }
    public ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ISOLATION, 0);
    }
    public JSON(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.JSON, 0);
    }
    public KEEP(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.KEEP, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.KEY, 0);
    }
    public KEYS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.KEYS, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.LAST, 0);
    }
    public LATERAL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.LATERAL, 0);
    }
    public LEADING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.LEADING, 0);
    }
    public LEVEL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.LEVEL, 0);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.LIMIT, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.LOCAL, 0);
    }
    public LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.LOGICAL, 0);
    }
    public MAP(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.MAP, 0);
    }
    public MATCH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.MATCH, 0);
    }
    public MATCHED(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.MATCHED, 0);
    }
    public MATCHES(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.MATCHES, 0);
    }
    public MATCH_RECOGNIZE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.MATCH_RECOGNIZE, 0);
    }
    public MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.MATERIALIZED, 0);
    }
    public MEASURES(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.MEASURES, 0);
    }
    public MERGE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.MERGE, 0);
    }
    public MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.MINUTE, 0);
    }
    public MONTH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.MONTH, 0);
    }
    public NESTED(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NESTED, 0);
    }
    public NEXT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NEXT, 0);
    }
    public NFC(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NFC, 0);
    }
    public NFD(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NFD, 0);
    }
    public NFKC(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NFKC, 0);
    }
    public NFKD(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NFKD, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NO, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NONE, 0);
    }
    public NULLIF(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NULLIF, 0);
    }
    public NULLS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.NULLS, 0);
    }
    public OBJECT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.OBJECT, 0);
    }
    public OF(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.OF, 0);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.OFFSET, 0);
    }
    public OMIT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.OMIT, 0);
    }
    public ONE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ONE, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ONLY, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.OPTION, 0);
    }
    public ORDINALITY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ORDINALITY, 0);
    }
    public OUTPUT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.OUTPUT, 0);
    }
    public OVER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.OVER, 0);
    }
    public OVERFLOW(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.OVERFLOW, 0);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PARTITION, 0);
    }
    public PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PARTITIONS, 0);
    }
    public PASSING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PASSING, 0);
    }
    public PAST(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PAST, 0);
    }
    public PATH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PATH, 0);
    }
    public PATTERN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PATTERN, 0);
    }
    public PER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PER, 0);
    }
    public PERIOD(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PERIOD, 0);
    }
    public PERMUTE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PERMUTE, 0);
    }
    public PLAN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PLAN, 0);
    }
    public POSITION(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.POSITION, 0);
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PRECEDING, 0);
    }
    public PRECISION(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PRECISION, 0);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PRIVILEGES, 0);
    }
    public PROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PROPERTIES, 0);
    }
    public PRUNE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.PRUNE, 0);
    }
    public QUOTES(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.QUOTES, 0);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.RANGE, 0);
    }
    public READ(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.READ, 0);
    }
    public REFRESH(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.REFRESH, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.RENAME, 0);
    }
    public REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.REPEATABLE, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.REPLACE, 0);
    }
    public RESET(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.RESET, 0);
    }
    public RESPECT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.RESPECT, 0);
    }
    public RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.RESTRICT, 0);
    }
    public RETURNING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.RETURNING, 0);
    }
    public REVOKE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.REVOKE, 0);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ROLE, 0);
    }
    public ROLES(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ROLES, 0);
    }
    public ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ROLLBACK, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ROW, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ROWS, 0);
    }
    public RUNNING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.RUNNING, 0);
    }
    public SCALAR(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SCALAR, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SCHEMA, 0);
    }
    public SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SCHEMAS, 0);
    }
    public SECOND(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SECOND, 0);
    }
    public SECURITY(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SECURITY, 0);
    }
    public SEEK(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SEEK, 0);
    }
    public SERIALIZABLE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SERIALIZABLE, 0);
    }
    public SESSION(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SESSION, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SET, 0);
    }
    public SETS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SETS, 0);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SHOW, 0);
    }
    public SOME(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SOME, 0);
    }
    public START(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.START, 0);
    }
    public STATS(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.STATS, 0);
    }
    public SUBSET(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SUBSET, 0);
    }
    public SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SUBSTRING, 0);
    }
    public SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.SYSTEM, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TABLES, 0);
    }
    public TABLESAMPLE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TABLESAMPLE, 0);
    }
    public TEXT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TEXT, 0);
    }
    public TEXT_STRING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TEXT_STRING, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TIES, 0);
    }
    public TIME(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TIME, 0);
    }
    public TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TIMESTAMP, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TO, 0);
    }
    public TRAILING(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TRAILING, 0);
    }
    public TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TRANSACTION, 0);
    }
    public TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TRUNCATE, 0);
    }
    public TRY_CAST(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TRY_CAST, 0);
    }
    public TYPE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.TYPE, 0);
    }
    public UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.UNBOUNDED, 0);
    }
    public UNCOMMITTED(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.UNCOMMITTED, 0);
    }
    public UNCONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.UNCONDITIONAL, 0);
    }
    public UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.UNIQUE, 0);
    }
    public UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.UNKNOWN, 0);
    }
    public UNMATCHED(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.UNMATCHED, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.UPDATE, 0);
    }
    public USE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.USE, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.USER, 0);
    }
    public UTF16(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.UTF16, 0);
    }
    public UTF32(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.UTF32, 0);
    }
    public UTF8(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.UTF8, 0);
    }
    public VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.VALIDATE, 0);
    }
    public VALUE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.VALUE, 0);
    }
    public VERBOSE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.VERBOSE, 0);
    }
    public VERSION(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.VERSION, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.VIEW, 0);
    }
    public WINDOW(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WINDOW, 0);
    }
    public WITHIN(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WITHIN, 0);
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WITHOUT, 0);
    }
    public WORK(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WORK, 0);
    }
    public WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WRAPPER, 0);
    }
    public WRITE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.WRITE, 0);
    }
    public YEAR(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.YEAR, 0);
    }
    public ZONE(): antlr.TerminalNode | null {
        return this.getToken(SqlBaseParser.ZONE, 0);
    }
    public override get ruleIndex(): number {
        return SqlBaseParser.RULE_nonReserved;
    }
    public override enterRule(listener: SqlBaseListener): void {
        if(listener.enterNonReserved) {
             listener.enterNonReserved(this);
        }
    }
    public override exitRule(listener: SqlBaseListener): void {
        if(listener.exitNonReserved) {
             listener.exitNonReserved(this);
        }
    }
    public override accept<Result>(visitor: SqlBaseVisitor<Result>): Result | null {
        if (visitor.visitNonReserved) {
            return visitor.visitNonReserved(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
